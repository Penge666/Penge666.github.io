<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Penge666</title>
  
  
  <link href="https://penge666.github.io/atom.xml" rel="self"/>
  
  <link href="https://penge666.github.io/"/>
  <updated>2024-05-08T13:37:35.562Z</updated>
  <id>https://penge666.github.io/</id>
  
  <author>
    <name>Penge666</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCPServer</title>
    <link href="https://penge666.github.io/posts/a173590e.html"/>
    <id>https://penge666.github.io/posts/a173590e.html</id>
    <published>2024-05-08T13:07:31.000Z</published>
    <updated>2024-05-08T13:37:35.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文启发自：<a href="https://joytsing.cn/posts/24827/">Boost中Asio网络编程</a></p><p>通过对<a href="https://mmoaay.gitbooks.io/boost-asio-cpp-network-programming-chinese/content/">Boost.Asio C++网络编程</a>书籍的学习，对于Boost.Asio有个基本的认识。但是如果只是学习理论没有实践的话，都是纸上谈兵。因此，为了加深Boost.Asio的学习，使用异步网络库Boost.Asio来实现TCP通信服务器。</p><h2 id="介绍">介绍</h2><blockquote><p><strong>基本认知</strong></p></blockquote><p><code>Boost.Asio</code>是一个用于网络和底层I/O编程的C++库，它提供了一种简洁而高效的方式来处理异步事件驱动的网络编程。Asio是&quot;<code>异步 I/O</code>&quot;的缩写。</p><p><code>Boost.Asio</code>的特点和功能的介绍：</p><ol><li><p>异步模型：Boost.Asio使用异步编程模型，允许你以非阻塞的方式处理多个并发的I/O操作。这样可以提高程序的性能和响应能力。</p></li><li><p>跨平台性：Boost.Asio在不同操作系统上提供统一的API，使得你可以在多个平台上轻松开发和移植网络应用程序。</p></li><li><p>支持多种协议：Boost.Asio支持多种网络协议，包括TCP、UDP、SSL等，让你能够轻松地进行各种网络通信。</p></li><li><p>网络编程基础功能：Boost.Asio提供了一系列的类和函数，用于处理套接字、地址解析、定时器、缓冲区等常见的网络编程任务。</p></li><li><p>可扩展性：Boost.Asio提供了灵活的接口和设计，允许你根据需要对其进行扩展和定制，以满足特定的应用需求。</p></li><li><p>高性能：Boost.Asio通过使用异步I/O、事件驱动和零拷贝等技术，可以实现高效的网络编程，提供出色的性能。</p></li></ol><blockquote><p><strong>安装</strong></p></blockquote><p>ubuntu20.04安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt安装</span></span><br><span class="line">sudo apt-get install libboost-dev libasio-dev</span><br></pre></td></tr></table></figure><h2 id="核心模块">核心模块</h2><h3 id="main">main</h3><p><code>main.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpConnection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/algorithm/string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> net;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 当消息到来，回调此函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, <span class="type">const</span> <span class="type">void</span> *data, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对接收到的消息进行异步发送，实现了回声功能</span></span><br><span class="line">    conn-&gt;<span class="built_in">asyncSend</span>(data, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个io_service对象，它提供了I/O功能，如套接字和定时器等</span></span><br><span class="line">    boost::asio::io_service service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个TcpServer对象，监听12345端口，等待客户端连接</span></span><br><span class="line">    <span class="function">TcpServer <span class="title">echoServer</span><span class="params">(service, <span class="number">12345</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置消息到达时的回调函数</span></span><br><span class="line">    echoServer.<span class="built_in">setMessageCallback</span>(onMessage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动事件处理循环，处理网络事件</span></span><br><span class="line">    service.<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onMessage</code>函数是当接收到客户端消息时被调用的回调函数，它实现了回声服务器的功能：将接收到的消息原样发送回去。</p><h3 id="TcpServer">TcpServer</h3><p><code>TcpServer.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpConnection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Callbacks.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> net</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> Tcp = boost::asio::ip::tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TcpServer</span>(<span class="type">const</span> TcpServer &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">TcpServer &amp;<span class="keyword">operator</span>=(<span class="type">const</span> TcpServer &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="built_in">TcpServer</span>(boost::asio::io_service &amp;ioService, <span class="type">short</span> port);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setConnectionCallback</span><span class="params">(<span class="type">const</span> ConnectionCallback &amp;cb)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMessageCallback</span><span class="params">(<span class="type">const</span> MessageCallback &amp;cb)</span> </span>&#123; messageCallback_ = cb; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWriteCompleteCallback</span><span class="params">(<span class="type">const</span> WriteCompleteCallback &amp;cb)</span> </span>&#123; writeCompleteCallback_ = cb; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doAccept</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newConnection</span><span class="params">(<span class="type">const</span> boost::system::error_code &amp;error)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Tcp::acceptor acceptor_;</span><br><span class="line">Tcp::socket socket_;</span><br><span class="line"></span><br><span class="line">ConnectionCallback connectionCallback_;</span><br><span class="line">MessageCallback messageCallback_;</span><br><span class="line">WriteCompleteCallback writeCompleteCallback_;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::shared_ptr&lt;TcpConnection&gt;&gt; connections_;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TcpServer.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpServer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> net;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TcpServer构造函数</span></span><br><span class="line">TcpServer::<span class="built_in">TcpServer</span>(boost::asio::io_service &amp;ioService, <span class="type">short</span> port) </span><br><span class="line">: <span class="built_in">acceptor_</span>(ioService, Tcp::<span class="built_in">endpoint</span>(Tcp::<span class="built_in">v4</span>(), port)),  <span class="comment">// 初始化接收器，用于接收新的连接</span></span><br><span class="line">  <span class="built_in">socket_</span>(ioService),  <span class="comment">// 初始化套接字，用于接收数据</span></span><br><span class="line">  <span class="built_in">connectionCallback_</span>(defaultConnectionCallback),  <span class="comment">// 初始化连接回调函数</span></span><br><span class="line">  <span class="built_in">messageCallback_</span>(defaultMessageCallback),  <span class="comment">// 初始化消息回调函数</span></span><br><span class="line">  <span class="built_in">writeCompleteCallback_</span>(defaultWriteCompleteCallback)  <span class="comment">// 初始化写完成回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">doAccept</span>();  <span class="comment">// 开始接收新的连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始接收新的连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpServer::doAccept</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    acceptor_.<span class="built_in">async_accept</span>(socket_, std::<span class="built_in">bind</span>(&amp;TcpServer::newConnection, <span class="keyword">this</span>, _1));  </span><br><span class="line">    <span class="comment">// 当有新的连接到来时，将调用newConnection函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理新的连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpServer::newConnection</span><span class="params">(<span class="type">const</span> boost::system::error_code &amp;error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!error)  <span class="comment">// 如果没有错误</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;debug:&quot;</span> &lt;&lt; socket_.<span class="built_in">remote_endpoint</span>().<span class="built_in">port</span>() &lt;&lt; endl;  <span class="comment">// 打印客户端的端口号</span></span><br><span class="line">        <span class="keyword">auto</span> conn = std::<span class="built_in">make_shared</span>&lt;TcpConnection&gt;(std::<span class="built_in">move</span>(socket_));  <span class="comment">// 创建一个新的TcpConnection对象来处理连接</span></span><br><span class="line"></span><br><span class="line">        conn-&gt;<span class="built_in">setMessageCallback</span>(messageCallback_);  <span class="comment">// 设置消息回调函数</span></span><br><span class="line">        conn-&gt;<span class="built_in">setWriteCompleteCallback</span>(writeCompleteCallback_);  <span class="comment">// 设置写完成回调函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*auto t = std::thread(std::bind(&amp;TcpConnection::start, conn));</span></span><br><span class="line"><span class="comment">        t.detach();*/</span></span><br><span class="line">        conn-&gt;<span class="built_in">start</span>();  <span class="comment">// 开始处理连接</span></span><br><span class="line"></span><br><span class="line">        connections_.<span class="built_in">push_back</span>(conn);  <span class="comment">// 将新的连接添加到连接列表中</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">connectionCallback_</span>(conn);  <span class="comment">// 调用连接回调函数</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">doAccept</span>();  <span class="comment">// 继续接收新的连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了深入理解该部分代码，笔者给出一个思考，利于理解asio异步的工作原理。</p><p>Q：这段代码中<code>doAccept()</code>;事件发生调用<code>newConnection</code>，在执行<code>newConnection</code>建立连接的时候有其他客户端进来，会立马<code>newConnection</code>函数吗？还是等当前<code>newConnection</code>执行完调用<code>doAccept</code>进入<code>newConnection</code>函数呢?</p><p>A：在这段代码中，<code>doAccept()</code>函数会立即返回并且不会等待新的客户端连接。这是因为<code>async_accept()</code>函数是非阻塞的，它会立即返回并在新的客户端连接时调用<code>newConnection()</code>函数。这就是所谓的异步编程模型。</p><p>当<code>newConnection()</code>函数被调用以处理新的客户端连接时，如果在处理过程中有其他新的客户端连接到达，那么这些新的连接会被放入队列中等待处理。直到当前的<code>newConnection()</code>函数执行完毕并再次调用<code>doAccept()</code>函数，这些等待的新连接才会被处理。</p><p>所以，如果在<code>newConnection()</code>函数执行过程中有新的客户端连接到达，这些新连接会等待当前的<code>newConnection()</code>函数执行完毕，并在<code>doAccept()</code>函数再次被调用时才会被处理。这就确保了每个连接都会被逐一处理，而不会出现同时处理多个连接的情况。</p><p>【举个生活中的例子，假设我买了快递，我不需要本人去取，只需要给驿站工作人员发消息，告诉他我有快递，当快递到了之后驿站工作人员会将快递送到我家门口。因此，本人什么都不需要做。注意：当下次又买了快递，你没告诉驿站工作人员，驿站工作人员是不会送到家门口的。因此，当你每次购物的时候就需要告诉驿站工作人员。】</p><h3 id="TcpConnection">TcpConnection</h3><p><code>TcpConnection.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Callbacks.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> net</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpConnection</span> : <span class="keyword">public</span> std::enable_shared_from_this&lt;TcpConnection&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> Tcp = boost::asio::ip::tcp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TcpConnection</span><span class="params">(Tcp::socket&amp;&amp; socket)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">asyncSend</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">asyncSend</span><span class="params">(<span class="type">const</span> std::string&amp; content)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">send</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">send</span><span class="params">(<span class="type">const</span> std::string&amp; content)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMessageCallback</span><span class="params">(<span class="type">const</span> MessageCallback&amp; cb)</span> </span>&#123; messageCallback_ = cb; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWriteCompleteCallback</span><span class="params">(<span class="type">const</span> WriteCompleteCallback&amp; cb)</span> </span>&#123; writeCompleteCallback_ = cb; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> boost::system::error_code&amp; error, <span class="type">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onWriteComplete</span><span class="params">(<span class="type">const</span> boost::system::error_code&amp; error, <span class="type">size_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">peerAddress</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> socket_.<span class="built_in">remote_endpoint</span>().<span class="built_in">address</span>().<span class="built_in">to_string</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">peerPort</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> socket_.<span class="built_in">remote_endpoint</span>().<span class="built_in">port</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::string <span class="title">peerIpPort</span><span class="params">()</span> <span class="type">const</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">string</span>(<span class="built_in">peerAddress</span>() + <span class="string">&quot;:&quot;</span> + std::<span class="built_in">to_string</span>(<span class="built_in">peerPort</span>()));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doRead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Tcp::socket socket_;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kBufferSize = <span class="number">8</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="type">char</span> data_[kBufferSize];</span><br><span class="line"></span><br><span class="line">MessageCallback messageCallback_;</span><br><span class="line">WriteCompleteCallback writeCompleteCallback_;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TcpConnection.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpConnection.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> net;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line"></span><br><span class="line">TcpConnection::<span class="built_in">TcpConnection</span>(Tcp::socket &amp;&amp;socket) : <span class="built_in">socket_</span>(std::<span class="built_in">move</span>(socket)),</span><br><span class="line"> <span class="built_in">messageCallback_</span>(defaultMessageCallback),</span><br><span class="line"> <span class="built_in">writeCompleteCallback_</span>(defaultWriteCompleteCallback)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpConnection::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">doRead</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpConnection::doRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">socket_.<span class="built_in">async_read_some</span>(boost::asio::<span class="built_in">buffer</span>(data_, kBufferSize),</span><br><span class="line">std::<span class="built_in">bind</span>(&amp;TcpConnection::onMessage, <span class="keyword">this</span>, _1, _2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpConnection::asyncSend</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::asio::<span class="built_in">async_write</span>(socket_, boost::asio::<span class="built_in">buffer</span>(data, len),</span><br><span class="line"> std::<span class="built_in">bind</span>(&amp;TcpConnection::onWriteComplete, <span class="keyword">this</span>, _1, _2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpConnection::asyncSend</span><span class="params">(<span class="type">const</span> std::string &amp;content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::asio::<span class="built_in">async_write</span>(socket_, boost::asio::<span class="built_in">buffer</span>(content.<span class="built_in">data</span>(), content.<span class="built_in">size</span>()),</span><br><span class="line"> std::<span class="built_in">bind</span>(&amp;TcpConnection::onWriteComplete, <span class="keyword">this</span>, _1, _2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TcpConnection::send</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">boost::asio::<span class="built_in">write</span>(socket_, boost::asio::<span class="built_in">buffer</span>(data, len));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> std::exception &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TcpConnection::send</span><span class="params">(<span class="type">const</span> std::string &amp;content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">boost::asio::<span class="built_in">write</span>(socket_, boost::asio::<span class="built_in">buffer</span>(content.<span class="built_in">data</span>(), content.<span class="built_in">size</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> std::exception &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpConnection::onMessage</span><span class="params">(<span class="type">const</span> boost::system::error_code &amp;error, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!error)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> t = std::<span class="built_in">thread</span>([=]()</span><br><span class="line"> &#123; <span class="built_in">messageCallback_</span>(<span class="built_in">shared_from_this</span>(), data_, len); &#125;);</span><br><span class="line">t.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">doRead</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TcpConnection::onWriteComplete</span><span class="params">(<span class="type">const</span> boost::system::error_code &amp;error, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!error)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">writeCompleteCallback_</span>(<span class="built_in">shared_from_this</span>(), len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shared_from_this知识点</strong></p><p><code>shared_from_this</code>是一个在C++中常见的用法，它是<code>std::enable_shared_from_this</code>类模板的一部分。这个类模板可以让对象的所有者通过一个<code>std::shared_ptr</code>来访问它。</p><p>当我们有一个类A，它继承自<code>std::enable_shared_from_this&lt;A&gt;</code>，我们可以创建一个<code>std::shared_ptr&lt;A&gt;</code>来管理一个A对象。然后，我们可以在A的成员函数中调用<code>shared_from_this</code>函数，这个函数会返回一个<code>std::shared_ptr&lt;A&gt;</code>，这个智能指针和最初的那个<code>std::shared_ptr&lt;A&gt;</code>共享对A对象的所有权。</p><p>这种机制的一个重要用途是在类的内部代码中安全地传递<code>this</code>指针。在C++中，传递裸指针<code>this</code>是危险的，因为这可能导致对象被提前销毁或者内存泄漏。但是，如果我们将<code>this</code>指针封装在<code>std::shared_ptr</code>中，那么对象的生命周期就可以被正确管理，这就是<code>shared_from_this</code>的主要作用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> std::enable_shared_from_this&lt;A&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::shared_ptr&lt;A&gt; <span class="title">getPtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;A&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> A)</span></span>;</span><br><span class="line">    std::shared_ptr&lt;A&gt; anotherPtr = ptr-&gt;<span class="built_in">getPtr</span>();</span><br><span class="line">    std::cout &lt;&lt; ptr.<span class="built_in">use_count</span>() &lt;&lt; std::endl;  <span class="comment">// 输出：2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行">运行</h2><p>完整代码：<a href="https://github.com/Penge666/TCPServer">https://github.com/Penge666/TCPServer</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240508213056743.png" alt="image-20240508213056743"></p>]]></content>
    
    
    <summary type="html">基于Boost.Asio实现TCPServer</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    <category term="网络编程" scheme="https://penge666.github.io/categories/Cpp/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
    <category term="网络编程" scheme="https://penge666.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>无锁队列</title>
    <link href="https://penge666.github.io/posts/9131331a.html"/>
    <id>https://penge666.github.io/posts/9131331a.html</id>
    <published>2024-05-07T12:15:38.000Z</published>
    <updated>2024-05-07T13:19:17.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在上一篇博客中，介绍了通过指定原子变量的操作的内存顺序, 实现线程同步问题。本文看看原子变量和内存顺序的应用 – 无锁队列（Lock-Free Queue）。本文介绍单写单读和多写多读的无锁队列的简单实现，学习无锁队列设计的基本思路。对无锁队列有个入门的了解。</p><h2 id="单写单读队列">单写单读队列</h2><p>单写单读的队列比较简单, 这里我们使用循环队列实现. 如下图所示, 队列维护两个指针 <code>head</code> 和 <code>tail</code>, 分别指向队首和队尾. <code>tail</code> 始终指向 dummy 节点, 这样 <code>tail == head</code> 表示队列为空, <code>(tail + 1) % Cap == head</code> 表示队列已满, 不用维护 <code>size</code> 成员.</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240507202501356.png" alt="image-20240507202501356"></p><p>入队的时候移动 <code>tail</code> 指针, 而出队的时候移动 <code>head</code> 指针, 两个操作并无冲突. 不过, 出队前需要读取 <code>tail</code> 指针, 判断 <code>tail != head</code> 确认队列不为空; 同理入队时也要判断 <code>(tail + 1) % Cap != head</code> 以确认队列不满. 由于存在多个线程读写这两个指针, 因此它们都应该是原子变量.</p><p>此外, 由于两个操作在不同线程中执行, 我们还需考虑内存顺序. 如果初始队列为空, 线程 a 先执行入队操作, 线程 b 后执行出队操作, 则线程 a 入队操作的内容要对线程 b 可见.</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240507202552069.png" alt="image-20240507202552069"></p><p>为了做到这一点, 需要有 a(2) “happens-before” b(3). 而 a(3) 和 b(2) 分别修改了读取了 <code>tail</code>, 所以应该利用原子变量同步, 使得 a(3) “synchronizes-with” b(2). 可以在 a(3) 写入 <code>tail</code> 的操作中使用 release, b(2) 读取 <code>tail</code> 的操作中使用 acquire 实现同步.</p><p>同理, 如果初始队列满, 线程 a 先执行出队操作, 线程 b 后执行入队操作, 则线程 a 出队操作的结果要对线程 b 可见. 出队的时候需要调用出队元素的析构函数, 要保证出队元素正常销毁后才能在那个位置写入新元素, 否则会导致内存损坏. 可以在出队写入 <code>head</code> 的操作中使用 release, 入队读取 <code>head</code> 的操作中使用 acquire 实现出队 “synchronizes-with” 入队.</p><p>简单来说:</p><p>1.线程 a 先执行出队操作, 线程 b 后执行入队操作, 则线程 a 出队操作的结果要对线程 b 可见.</p><p>2.线程 a 先执行入队操作, 线程 b 后执行出队操作, 则线程 a 入队操作的结果要对线程 b 可见.</p><p>使用memory_order_acquire和memory_order_release实现线程同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">size_t</span> Cap&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">spsc</span> : <span class="keyword">private</span> allocator&lt;T&gt; &#123;</span><br><span class="line">    T *data;</span><br><span class="line">    atomic&lt;<span class="type">size_t</span>&gt; head&#123;<span class="number">0</span>&#125;, tail&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">spsc</span>(): <span class="built_in">data</span>(allocator&lt;T&gt;::<span class="built_in">allocate</span>(Cap)) &#123;&#125;</span><br><span class="line">    <span class="built_in">spsc</span>(<span class="type">const</span> spsc&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    spsc &amp;<span class="keyword">operator</span>=(<span class="type">const</span> spsc&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    spsc &amp;<span class="keyword">operator</span>=(<span class="type">const</span> spsc&amp;) <span class="keyword">volatile</span> = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp;val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">emplace</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(T &amp;&amp;val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">emplace</span>(std::<span class="built_in">move</span>(val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">emplace</span><span class="params">(Args &amp;&amp; ...args)</span> </span>&#123; <span class="comment">// 入队操作</span></span><br><span class="line">        <span class="type">size_t</span> t = tail.<span class="built_in">load</span>(memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>(memory_order_acquire)) <span class="comment">// (1)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        allocator&lt;T&gt;::<span class="built_in">construct</span>(data + t, std::forward&lt;Args&gt;(args)...);</span><br><span class="line">        <span class="comment">// (2)  synchronizes-with (3)</span></span><br><span class="line">        tail.<span class="built_in">store</span>((t + <span class="number">1</span>) % Cap, memory_order_release); <span class="comment">// (2)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T &amp;val)</span> </span>&#123; <span class="comment">// 出队操作</span></span><br><span class="line">        <span class="type">size_t</span> h = head.<span class="built_in">load</span>(memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> (h == tail.<span class="built_in">load</span>(memory_order_acquire)) <span class="comment">// (3)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        val = std::<span class="built_in">move</span>(data[h]);</span><br><span class="line">        allocator&lt;T&gt;::<span class="built_in">destroy</span>(data + h);</span><br><span class="line">        <span class="comment">// (4) synchronizes-with (1)</span></span><br><span class="line">        head.<span class="built_in">store</span>((h + <span class="number">1</span>) % Cap, memory_order_release); <span class="comment">// (4)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种单写单读的无锁队列的两种操作可以同时执行, 且两种操作都只需要执行确定数量的指令, 因此数据 wait-free 结构, 性能很高.</p><p>给出完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type __sync_val_compare_and_swap(type *ptr, type oldval type newval, ...)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">size_t</span> Cap&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>() : <span class="built_in">data</span>(<span class="keyword">new</span> T[Cap]) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Queue</span>() &#123; <span class="keyword">delete</span>[] data; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp;val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> t = tail.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>(std::memory_order_acquire))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Producer: &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        data[t % Cap] = val;</span><br><span class="line">        tail.<span class="built_in">store</span>((t + <span class="number">1</span>) % Cap, std::memory_order_release);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T &amp;val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> h = head.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> (h == tail.<span class="built_in">load</span>(std::memory_order_acquire))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        val = data[h % Cap];</span><br><span class="line">        head.<span class="built_in">store</span>((h + <span class="number">1</span>) % Cap, std::memory_order_release);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *data;</span><br><span class="line">    std::atomic&lt;<span class="type">size_t</span>&gt; head&#123;<span class="number">0</span>&#125;, tail&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="type">int</span>, <span class="number">5</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Consumer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">pop</span>(val))</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Consumer: &quot;</span> &lt;&lt; val &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (!q.<span class="built_in">push</span>(num))</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">consumer</span><span class="params">(Consumer)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">producer</span><span class="params">(Producer)</span></span>;</span><br><span class="line">    consumer.<span class="built_in">join</span>();</span><br><span class="line">    producer.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CAS-操作">CAS 操作</h2><p><strong>CAS (compare and swap)</strong> 是一种原子操作, 在一个不可被中断的过程中执行比较和交换. C++ 的 <code>std::atomic</code> 中有两种 CAS 操作, <code>compare_exchange_weak</code> 和 <code>compare_exchange_strong</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> std::atomic&lt;T&gt;::<span class="built_in">compare_exchange_weak</span>(T &amp;expected, T desired);</span><br><span class="line"><span class="type">bool</span> std::atomic&lt;T&gt;::<span class="built_in">compare_exchange_strong</span>(T &amp;expected, T desired);</span><br></pre></td></tr></table></figure><p>这两种 CAS 操作基本上是相同的:</p><ul><li><p>如果原子变量与 <code>expected</code> 相等, 则将其赋值为 <code>desired</code> 并返回 <code>true</code>;</p></li><li><p>否则 <code>expected</code> 赋值成原子变量当前的值并返回 <code>false</code>.</p></li></ul><p>下面是 <code>compare_exchange_strong</code> 的一个伪实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">bool</span> atomic&lt;T&gt;::<span class="built_in">compare_exchange_strong</span>(T &amp;expected, T desired) &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(m_lock)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (m_val == expected)</span><br><span class="line">        <span class="keyword">return</span> m_val = desired, <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> expected = m_val, <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然实际的实现不可能是这样的.</p><p><code>compare_exchange_weak</code> 和 <code>compare_exchange_strong</code> 的区别在于, <code>compare_exchange_weak</code> 有可能在当前值与 <code>expected</code> 相等时仍然不执行交换并返回 <code>false</code>; <code>compare_exchange_strong</code> 则不会有这个问题. weak 版本能让编译器在一些平台下生成一些更优的代码, 在 x86 下是没区别的.</p><p><code>compare_exchange_*</code> 支持指定两个内存顺序: 成功时的内存顺序和失败时的内存顺序.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare_exchange_weak</span><span class="params">(T&amp; expected, T desired,</span></span></span><br><span class="line"><span class="params"><span class="function">                           std::memory_order success,</span></span></span><br><span class="line"><span class="params"><span class="function">                           std::memory_order failure)</span></span>;</span><br></pre></td></tr></table></figure><p>我们可以利用 CAS 操作实现很多无锁数据结构. 下面我们来看如何实现多写多读的队列.</p><h2 id="多写多读队列">多写多读队列</h2><p>前面单读单写能否用到执行多写多读呢？答案是不可以的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> spsc&lt;T, Cap&gt;::<span class="built_in">pop</span>(T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> h = head.<span class="built_in">load</span>(); <span class="comment">// (1)</span></span><br><span class="line">    <span class="keyword">if</span> (h == tail.<span class="built_in">load</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    val = std::<span class="built_in">move</span>(data[h]); <span class="comment">// (2)</span></span><br><span class="line">    allocator&lt;T&gt;::<span class="built_in">destroy</span>(data + h);</span><br><span class="line">    head.<span class="built_in">store</span>((h + <span class="number">1</span>) % Cap); <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有两个线程 a 和 b 同时调用 <code>pop</code>, 执行顺序是 a(1), b(1), b(2) a(2). 这种情况下, 线程 a 和线程 b 都读到相同的 <code>head</code> 指针, 存储在变量 <code>h</code> 中. 当 a(2) 尝试读取 <code>data[h]</code> 时, 其中的数据已经在 b(2) 中被 move 走了. 因此这样的队列不允许多个线程同时执行 pop 操作.</p><p>简单来说，就是2个线程都调用pop,但是只要一个data[h]可给val.</p><h3 id="解决抢占问题">解决抢占问题</h3><p>可以看到, 整个 <code>pop</code> 函数是一个非原子过程, 一旦这个过程别其他线程抢占, 就会出问题. 如何解决这个问题呢? 在无锁数据结构中, 一种常用的做法是<strong>不断重试</strong>. 具体的做法是, 在非原子过程的最后一步设计一个 CAS 操作, 如果过程被其他线程抢占, 则 CAS 操作失败, 并重新执行整个过程. 否则 CAS 操作成功, 完成整个过程的最后一步.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> spsc&lt;T, Cap&gt;::<span class="built_in">pop</span>(T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> h;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        h = head.<span class="built_in">load</span>(); <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">if</span> (h == tail.<span class="built_in">load</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        val = data[h]; <span class="comment">// (2)</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!head.<span class="built_in">compare_exchange_strong</span>(h, (h + <span class="number">1</span>) % Cap)); <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先注意到我们不再使用 <code>std::move</code> 和 <code>allocator::destroy</code>, 而是直接复制, 使得循环体内的操作不会修改队列本身. (3) 是整个过程的最后一步, 也是唯一会修改队列的一步, 我们使用了一个 CAS 操作. 只有当 <code>head</code> 的值等于第 (1) 步获取的值的时候, 才会移动 <code>head</code> 指针, 并且返回 <code>true</code> 跳出循环; 否则就不断重试.【简单来说，就是只能有一个pop，其他的需要进入循环等待.利用CAS进行暴力美学】</p><p>这样如果多个线程并发执行 <code>pop</code>, 则只有成功执行 (3) 的线程被视为成功执行了整个过程, 其它的线程都会因为被抢占, 导致执行 (3) 的时候 <code>head</code> 被修改, 因而与局部变量 <code>h</code> 不相等, 导致 CAS 操作失败. 这样它们就要重试整个过程.</p><p>类似的思路也可以用在 <code>push</code> 上. 看看如果我们用同样的方式修改 <code>push</code> 会怎样:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> spsc&lt;T, Cap&gt;::<span class="built_in">push</span>(<span class="type">const</span> T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> t;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        t = tail.<span class="built_in">load</span>(); <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        data[t] = val; <span class="comment">// (2)</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!tail.<span class="built_in">compare_exchange_strong</span>(t, (t + <span class="number">1</span>) % Cap)); <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 <code>pop</code> 操作不同, <code>push</code> 操作的第 (2) 步需要对 <code>data[t]</code> 赋值, 导致循环体内的操作会修改队列. 假设 a, b 两个线程的执行顺序是 a(1), a(2), b(1), b(2), a(3). a 可以成功执行到 (3), 但是入队的值却被 b(2) 覆盖掉了.【简单来说，就是2个线程push，但是可能后者线程会覆盖前者线程的值的这样的问题】</p><p>我们尝试将赋值操作 <code>data[t] = val</code> 移到循环的外面, 这样循环体内的操作就不会修改队列了. 当循环退出时, 能确保 <code>tail</code> 向后移动了一格, 且 <code>t</code> 指向 <code>tail</code> 移动前的位置. 这样并发的时候就不会有其他线程覆盖我们写入的值.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> spsc&lt;T, Cap&gt;::<span class="built_in">push</span>(<span class="type">const</span> T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> t;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        t = tail.<span class="built_in">load</span>(); <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!tail.<span class="built_in">compare_exchange_strong</span>(t, (t + <span class="number">1</span>) % Cap)); <span class="comment">// (2)</span></span><br><span class="line">    data[t] = val; <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样做的问题是, 我们先移动 <code>tail</code> 指针再对 <code>data[t]</code> 赋值, 会导致 <code>push</code> 与 <code>pop</code> 并发不正确. 回顾下 <code>pop</code> 的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> spsc&lt;T, Cap&gt;::<span class="built_in">pop</span>(T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> h;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        h = head.<span class="built_in">load</span>();</span><br><span class="line">        <span class="keyword">if</span> (h == tail.<span class="built_in">load</span>()) <span class="comment">// (4)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        val = data[h]; <span class="comment">// (5)</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!head.<span class="built_in">compare_exchange_strong</span>(h, (h + <span class="number">1</span>) % Cap));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样假设有两个线程 a 和 b. 假设队列初始为空</p><ul><li>线程 a 调用 <code>push</code> , 执行 a(1), a(2). <code>tail</code> 被更新, 然后切换到线程 b</li><li>线程 b 调用 <code>pop</code> , 执行 b(4). 因为 <code>tail</code> 被更新, 因此判断队列不为空</li><li>执行到 b(5), 会读取到无效的值</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240507205821012.png" alt="image-20240507205821012"></p><p>【简单来说，就是当满足pop条件，但是没有值的这样问题】</p><p>为了实现 <code>push</code> 与 <code>pop</code> 的并发, <code>push</code> 对 <code>data[t]</code> 的写入必须 “happens-before” <code>pop</code> 对 <code>data[h]</code> 的读取. 因此这就要求 <code>push</code> 操作先对 <code>data[t]</code> 赋值, 再移动 <code>tail</code> 指针. 可是前面为了实现 <code>push</code> 与 <code>push</code> 的并发我们又让 <code>push</code> 操作先移动 <code>tail</code> 再对 <code>data[t]</code> 赋值. 如何解决这一矛盾呢?</p><p>解决办法是引入一个新的指针 <code>write</code> , 用于 <code>push</code> 与 <code>pop</code> 同步. 它表示 <code>push</code> 操作<strong>写到了哪个位置</strong>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">size_t</span> Cap&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ring_buffer</span> &#123;</span><br><span class="line">    T data[Cap];</span><br><span class="line">    atomic&lt;<span class="type">size_t</span>&gt; head&#123;<span class="number">0</span>&#125;, tail&#123;<span class="number">0</span>&#125;, write&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ring_buffer</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">ring_buffer</span>(<span class="type">const</span> ring_buffer&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    ring_buffer &amp;<span class="keyword">operator</span>=(<span class="type">const</span> ring_buffer&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    ring_buffer &amp;<span class="keyword">operator</span>=(<span class="type">const</span> ring_buffer&amp;) <span class="keyword">volatile</span> = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp;val)</span> </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> t, w;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            t = tail.<span class="built_in">load</span>();</span><br><span class="line">            <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!tail.<span class="built_in">compare_exchange_weak</span>(t, (t + <span class="number">1</span>) % Cap)); <span class="comment">// (1)</span></span><br><span class="line">        data[t] = val; <span class="comment">// (2)</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            w = t;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!write.<span class="built_in">compare_exchange_weak</span>(w, (w + <span class="number">1</span>) % Cap)); <span class="comment">// (3), (3) synchronizes-with (4)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T &amp;val)</span> </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> h;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            h = head.<span class="built_in">load</span>();</span><br><span class="line">            <span class="keyword">if</span> (h == write.<span class="built_in">load</span>()) <span class="comment">// (4) 读 write 的值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            val = data[h]; <span class="comment">// (5)</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (!head.<span class="built_in">compare_exchange_strong</span>(h, (h + <span class="number">1</span>) % Cap));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还是暴力，多加个变量解决上述问题。</p><p><code>push</code> 操作的基本步骤是:</p><ol><li>移动 <code>tail</code>;</li><li>对 <code>data[t]</code> 赋值, <code>t</code> 等于 <code>tail</code> 移动前的位置;</li><li>移动 <code>write</code>. <code>write</code> 移动后等于 <code>tail</code>.</li></ol><p>而 <code>pop</code> 操作使用 <code>write</code> 指针判断队列中是否有元素. 因为有 (3) “synchronizes-with” (4), 所以 (2) “happens-before” (5), <code>pop</code> 能读到 <code>push</code> 写入的值. 在 <code>push</code> 函数中, 只有在当前的 <code>write</code> 等于 <code>t</code> 时才将 <code>write</code> 移动一格, 能确保最终 <code>write</code> 等于 <code>tail</code>.</p><p>这种多写多读的无锁队列的两种操作可以同时执行, 但是每种操作都有可能要重试, 因此属于 lock-free 结构.</p><h3 id="考虑内存顺序">考虑内存顺序</h3><p>前面例子使用默认的内存顺序, 也就是 memory_order_seq_cst . 为了优化性能, 可以使用更宽松的内存顺序. 而要考虑内存顺序, 就要找出其中的 happens-before 的关系.</p><p>前面分析了, <code>push</code> 中的赋值操作 <code>data[t] = val</code> 要 “happens-before” <code>pop</code> 中的读取操作 <code>val = data[h]</code>, 这是通过 <code>write</code> 原子变量实现的: <code>push</code> 中对 <code>write</code> 的修改要 “synchronizes-with” <code>pop</code> 中对 <code>write</code> 的读取. 因此 <code>push</code> 修改 <code>write</code> 的 CAS 操作应该使用 release, <code>pop</code> 读取 <code>write</code> 时则应使用 acquire.</p><p>同理, 当队列初始为满的时候, 先运行 <code>pop</code> 在运行 <code>push</code>, 要保证 <code>pop</code> 中的读取操作 <code>val = data[h]</code> “happens-before” <code>push</code> 中的赋值操作 <code>data[t] = val</code>. 这是通过 <code>head</code> 原子变量实现的: <code>pop</code> 中对 <code>head</code> 的修改要 “synchronizes-with” <code>push</code> 中对 <code>head</code> 的读取. 因此 <code>pop</code> 修改 <code>head</code> 的 CAS 操作应该使用 release, <code>push</code> 读取 <code>head</code> 时则应使用 acquire.</p><p>这部分和上面一样，就是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> ring_buffer&lt;T, Cap&gt;::<span class="built_in">push</span>(<span class="type">const</span> T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> t, w;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        t = tail.<span class="built_in">load</span>(memory_order_relaxed); <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>(memory_order_acquire)) <span class="comment">//(2)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!tail.<span class="built_in">compare_exchange_weak</span>(t, (t + <span class="number">1</span>) % Cap, memory_order_relaxed)); <span class="comment">// (3)</span></span><br><span class="line">    data[t] = val; <span class="comment">// (4), (4) happens-before (8)</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        w = t;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!write.<span class="built_in">compare_exchange_weak</span>(w, (w + <span class="number">1</span>) % Cap,</span><br><span class="line">              memory_order_release, memory_order_relaxed)); <span class="comment">// (5), (5) synchronizes-with (7)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> ring_buffer&lt;T, Cap&gt;::<span class="built_in">pop</span>(T &amp;val) &#123;</span><br><span class="line">    <span class="type">size_t</span> h;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        h = head.<span class="built_in">load</span>(memory_order_relaxed); <span class="comment">// (6)</span></span><br><span class="line">        <span class="keyword">if</span> (h == write.<span class="built_in">load</span>(memory_order_acquire)) <span class="comment">// (7)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        val = data[h]; <span class="comment">// (8), (8) happens-before (4)</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!head.<span class="built_in">compare_exchange_strong</span>(h, (h + <span class="number">1</span>) % Cap,</span><br><span class="line">              memory_order_release, memory_order_relaxed)); <span class="comment">// (9), (9) synchronizes-with (2)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>push</code> 与 <code>push</code> 并发移动 <code>tail</code> 指针的时候, 只影响到 <code>tail</code> 本身. 因此 (1) 和 (3) 对 <code>tail</code> 读写使用 relaxed 就可以了. 同样 <code>push</code> 与 <code>push</code> 并发移动 <code>write</code> 指针时, 也不需要利用它做同步, 因此 (5) 处的做法是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write.<span class="built_in">compare_exchange_weak</span>(w, (w + <span class="number">1</span>) % Cap,</span><br><span class="line">                            memory_order_release, memory_order_relaxed)</span><br></pre></td></tr></table></figure><p>成功时使用 release, 为了与 <code>pop</code> 同步; 而失败时使用 relaxed 就可以了.</p><p>同理, <code>pop</code> 与 <code>pop</code> 并发移动 <code>head</code> 时, 也影响到 <code>head</code> 本身. 因此 (6) 读取 <code>head</code> 使用 relaxed 即可. 而 (9) 处为了与 <code>push</code> 同步, 成功时要使用 release, 失败时使用 relaxed 即可.</p><p>最后，给出完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type __sync_val_compare_and_swap(type *ptr, type oldval type newval, ...)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">size_t</span> Cap&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>() : <span class="built_in">data</span>(<span class="keyword">new</span> T[Cap]) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Queue</span>() &#123; <span class="keyword">delete</span>[] data; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp;val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> t, w;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            t = tail.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">            <span class="keyword">if</span> ((t + <span class="number">1</span>) % Cap == head.<span class="built_in">load</span>(std::memory_order_acquire))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!tail.<span class="built_in">compare_exchange_strong</span>(t, (t + <span class="number">1</span>) % Cap, memory_order_relaxed));</span><br><span class="line">        data[t % Cap] = val;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&quot; data:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            w = t;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!write.<span class="built_in">compare_exchange_strong</span>(w, (w + <span class="number">1</span>) % Cap, memory_order_release, memory_order_relaxed));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T val;</span><br><span class="line">        <span class="type">size_t</span> h;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            h = head.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">            <span class="keyword">if</span> (h == write.<span class="built_in">load</span>(std::memory_order_acquire))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            val = data[h % Cap];</span><br><span class="line">        &#125; <span class="keyword">while</span> (!head.<span class="built_in">compare_exchange_strong</span>(h, (h + <span class="number">1</span>) % Cap,</span><br><span class="line">                                               memory_order_release, memory_order_relaxed));</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Comsumer:&quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&quot; data:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *data;</span><br><span class="line">    std::atomic&lt;<span class="type">size_t</span>&gt; head&#123;<span class="number">0</span>&#125;, tail&#123;<span class="number">0</span>&#125;, write&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="type">int</span>, <span class="number">5</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Consumer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!q.<span class="built_in">pop</span>())</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (!q.<span class="built_in">push</span>(num))</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;thread&gt; p, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p.<span class="built_in">emplace_back</span>(Producer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c.<span class="built_in">emplace_back</span>(Consumer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;ci : c)</span><br><span class="line">        ci.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;pi : p)</span><br><span class="line">        pi.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优劣势">优劣势</h2><h3 id="优势">优势</h3><ul><li>实现简单, 容易理解 (相比更复杂的链式结构)</li><li>无锁高并发. 虽然存在循环重试, 但是这只会在相同操作并发的时候出现. push 不会因为与 pop 并发而重试, 反之亦然.</li></ul><h3 id="缺陷">缺陷</h3><ul><li>这样队列只应该存储标量, 不应该存储对象 (但是可以存储指针), 原因有两点<ul><li>pop 中会循环执行 val = data[h] , 对象的拷贝会有性能开销</li><li>push 中执行 data[t] = val 类似, 如果拷贝时间过长, 可能会导致并发执行 push 的线程一直等待</li><li>如果 push 中 data[t] = val 抛出了异常, 可能会导致并发执行 push 的线程死锁</li></ul></li><li>不能存储智能指针. 因为出队后对象仍然在 data 数组里, 并没有销毁.</li><li>容量是固定的, 不能动态扩容.</li></ul><p>其中，简单的是直接使用boost库中的<code>boost::lockfree::queue</code>。这是一个线程安全的无锁队列，可以在多线程环境下使用。</p><p>本文学习自：<a href="https://luyuhuang.tech/2022/10/30/lock-free-queue.html#cas-%E6%93%8D%E4%BD%9C">C++ 实现无锁队列</a></p>]]></content>
    
    
    <summary type="html">Lock-Free Queue</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Cpp内存顺序</title>
    <link href="https://penge666.github.io/posts/4c8902bb.html"/>
    <id>https://penge666.github.io/posts/4c8902bb.html</id>
    <published>2024-05-07T03:31:55.000Z</published>
    <updated>2024-05-07T13:27:13.984Z</updated>
    
    <content type="html"><![CDATA[<p>C++11 将多线程纳入了标准. 一旦涉及到多线程, 就需要考虑<strong>并发</strong>, <strong>数据竞争 (date race)</strong>, <strong>线程同步</strong>等问题, 为此 C++ 提供了互斥锁 <code>std::mutex</code>, 原子变量 <code>std::atomic</code> 等标准库。</p><p>把博客中的例子理解清楚。</p><h2 id="1-原子变量">1. 原子变量</h2><p>我们不能在两个线程中同时访问修改一个变量, 这会导致数据竞争的问题. 程序的结果是未定义的. 从实现上来说, 我们不能保证读写操作是原子的, 例如 32 位机器上, 修改一个 64 位变量可能需要两条指令; 或者变量有可能只是在寄存器里, 对其的修改要在稍后才会写入内存. 解决数据竞争的方式除了使用 <code>std::mutex</code> 加锁, 还可以使用原子变量.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">int</span>&gt; a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子展示了原子变量最简单的用法. 使用原子变量不用担心数据竞争, 对它的操作都是原子的. <strong>除此之外, 原子变量的操作可以指定内存顺序, 帮助我们实现线程同步, 这也是本文的重点</strong>. 上面的代码中, 线程 1 将值写入原子变量 <code>a</code>, 线程 2 则读取 <code>a</code> 中的值. 这便是原子变量最基础的两种操作。</p><h3 id="1-1-原子变量的操作">1.1 原子变量的操作</h3><p>对原子变量的操作可以分为三种</p><ol><li>store. 将一个值存到原子变量中.</li><li>load. 读取原子变量中的值.</li><li>read-modify-write (RMW). 原子地执行读取, 修改和写入. 如自增操作 <code>fetch_add</code>, 交换操作 <code>exchange</code> (返回变量当前的值并写入指定值) 等.</li></ol><p>每个原子操作都需要指定一个<strong>内存顺序 (memory order)</strong>. 不同的内存顺序有不同的语义, 会实现不同的顺序模型 (order model), 性能也各不相同. C++ 中有六种内存顺序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">memory_order</span> &#123;</span><br><span class="line">    memory_order_relaxed,</span><br><span class="line">    memory_order_consume,</span><br><span class="line">    memory_order_acquire,</span><br><span class="line">    memory_order_release,</span><br><span class="line">    memory_order_acq_rel,</span><br><span class="line">    memory_order_seq_cst,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>这六种内存顺序相互组合可以实现三种顺序模型 (ordering model)</strong></p><ul><li><strong>Sequencial consistent ordering. 实现同步, 且保证全局顺序一致 (single total order) 的模型. 是一致性最强的模型, 也是默认的顺序模型.</strong></li><li><strong>Acquire-release ordering. 实现同步, 但不保证保证全局顺序一致的模型.</strong></li><li><strong>Relaxed ordering. 不能实现同步, 只保证原子性的模型.</strong></li></ul><p>稍后我们会详细讨论这六种内存顺序. <code>atomic::store</code> 和 <code>atomic::load</code> 函数都有一个内存顺序的参数, 默认为 <code>memory_order_seq_cst</code>. 它们的声明如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">store</span><span class="params">(T desired, std::memory_order order = std::memory_order_seq_cst)</span></span>;</span><br><span class="line"><span class="function">T <span class="title">load</span><span class="params">(std::memory_order order = std::memory_order_seq_cst)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p>此外 <code>std::atomic</code> 重载了运算符, 我们可以像使用普通变量一样读写原子变量. 例如上面代码中两个线程的读写操作分别调用的是 <code>std::atomic&lt;int&gt;::operator=(int)</code> 和 <code>std::atomic&lt;int&gt;::operator int()</code>. 此时会使用默认的内存顺序, 也就是 <code>memory_order_seq_cst</code>。</p><h2 id="2-基础概念">2. 基础概念</h2><p>在开始讲这六种内存顺序之前, 有必要先了解一下几个最基础的概念.</p><h3 id="2-1-修改顺序-Modification-orders">2.1 修改顺序 (Modification orders)</h3><p>对一个原子变量的所有修改操作总是存在一定的先后顺序, 且所有线程都认可这个顺序, 即使这些修改操作是在不同的线程中执行的. 这个所有线程一致同意的顺序就称为<strong>修改顺序 (modification order)</strong>. 这意味着</p><ul><li>两个修改操作不可能同时进行, 一定存在一个先后顺序. 这很容易理解, 因为这是原子操作必须保证的, 否则就有数据竞争的问题.</li><li>即使每次运行的修改顺序可能都不同, 但所有线程看到的修改顺序总是一致的. 如果线程 a 看到原子变量 x 由 1 变成 2, 那么线程 b 就不可能看到 x 由 2 变成 1.</li></ul><p>无论使用哪种内存顺序, 原子变量的操作总能满足修改顺序一致性, 即使是最松散的 <code>memory_order_relaxed</code>. 我们来看一个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">int</span>&gt; a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>)</span><br><span class="line">        a.<span class="built_in">store</span>(i, std::memory_order_relaxed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>)</span><br><span class="line">        a.<span class="built_in">store</span>(i, std::memory_order_relaxed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread3</span><span class="params">(vector&lt;<span class="type">int</span>&gt; *v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        v-&gt;<span class="built_in">push_back</span>(a.<span class="built_in">load</span>(std::memory_order_relaxed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread4</span><span class="params">(vector&lt;<span class="type">int</span>&gt; *v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        v-&gt;<span class="built_in">push_back</span>(a.<span class="built_in">load</span>(std::memory_order_relaxed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v3, v4;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(thread1)</span>, <span class="title">t2</span><span class="params">(thread2)</span>, <span class="title">t3</span><span class="params">(thread3, &amp;v3)</span>, <span class="title">t4</span><span class="params">(thread4, &amp;v4)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>(), t2.<span class="built_in">join</span>(), t3.<span class="built_in">join</span>(), t4.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : v3) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : v4) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码创建了 4 个线程. <code>thread1</code> 和 <code>thread2</code> 分别将偶数和奇数依次写入原子变量 <code>a</code>, <code>thread3</code> 和 <code>thread4</code> 则读取它们. 最后输出 <code>thread3</code> 和 <code>thread4</code> 每次读取到的值. 程序运行的结果可能是这样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./test-modification-order</span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">7</span> <span class="number">7</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">$ ./test-modification-order</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>虽然每次运行的修改顺序不同, 各个线程也不太可能看到每次修改的结果, 但是它们看到的修改顺序是一致的. 例如 <code>thread3</code> 看到 8 先于 9, <code>thread4</code> 也会看到 8 先于 9, 反之亦然.</p><h3 id="2-2-Happens-before">2.2 Happens-before</h3><p><strong>Happens-before</strong> 是一个非常重要的概念. 如果操作 a “happens-before” 操作 b, 则操作 a 的结果对于操作 b 可见. happens-before 的关系可以建立在用一个线程的两个操作之间, 也可以建立在不同的线程的两个操作之间.</p><h4 id="2-2-1-单线程的情况-sequenced-before">2.2.1 单线程的情况: sequenced-before</h4><p>单线程的情况很容易理解. 函数的语句按顺序依次执行, 前面的语句先执行, 后面的后执行. 正式地说, 前面的语句总是 <strong>“sequenced-before”</strong> 后面的语句. 显然, 根据定义, sequenced-before 具有传递性:</p><ul><li>如果操作 a “sequenced-before” 操作 k, 且操作 k “sequenced-before” 操作 b, 则操作 a “sequenced-before” 操作 b.</li></ul><p>Sequenced-before 可以直接构成 happens-before 的关系. 如果操作 a “sequenced-before” 操作 b, 则操作 a “happens-before” 操作 b. 例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">42</span>; <span class="comment">// (1)</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// (2)</span></span><br></pre></td></tr></table></figure><p>语句 (1) 在语句 (2) 的前面, 因此语句 (1) “sequenced-before” 语句 (2), 也就是 (1) “happens-before” 语句 (2). 所以 (2) 可以打印出 (1) 赋值的结果.</p><h4 id="2-2-2-多线程的情况-synchronizes-with-和-inter-thread-happens-before">2.2.2 多线程的情况: synchronizes-with 和 inter-thread happens-before</h4><p>多线程的情况就稍微复杂些. 一般来说多线程都是并发执行的, 如果没有正确的同步操作, 就无法保证两个操作之间有 happens-before 的关系. 如果我们通过一些手段, 让不同线程的两个操作同步, 我们称这两个操作之间有 <strong>synchronizes-with</strong> 的关系. 稍后我们会详细讨论如何组合使用 6 种内存顺序, 让两个操作达成 synchronizes-with 的关系.</p><p>如果线程 1 中的操作 a “synchronizes-with” 线程 2 中的操作 b, 则操作 a <strong>“inter-thread happens-before”</strong> 操作 b. 此外 synchronizes-with 还可以 “后接” 一个 sequenced-before 关系组合成 inter-thread happens-before 的关系:</p><ul><li>如果操作 a “synchronizes-with” 操作 k, 且操作 k “sequenced-before” 操作 b, 则操作 a “inter-thread happens-before” 操作 b.</li></ul><p>Inter-thread happens-before 关系则可以 “前接” 一个 sequenced-before 关系以延伸它的范围; 而且 inter-thread happens-before 关系具有传递性:</p><ul><li>如果操作 a “sequenced-before” 操作 k, 且操作 k “inter-thread happens-before” 操作 b, 则操作 a “inter-thread happens-before” 操作 b.</li><li>如果操作 a “inter-thread happens-before” 操作 k, 且操作 k “inter-thread happens-before” 操作 b, 则操作 a “inter-thread happens-before” 操作 b.</li></ul><p>正如它的名字暗示的, 如果操作 a “inter-thread happens-before” 操作 b, 则操作 a “happens-before” 操作 b. 下图展示了这几个概念之间的关系:</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240507143104191.png" alt=""></p><p>注意, 虽然 sequenced-before 和 inter-thread happens-before 都有传递性, 但是 <strong>happens-before 没有传递性</strong>. 后面我们会在 3.5 节中看到这个性质的重要性, 以及 C++ 为什么要定义这么多概念.</p><p>现在我们来看一个例子. 假设下面的代码中 <code>unlock()</code> 操作 “synchronizes-with” <code>lock()</code> 操作.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a += <span class="number">1</span> <span class="comment">// (1)</span></span><br><span class="line">    <span class="built_in">unlock</span>(); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>(); <span class="comment">// (3)</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设直到 <code>thread1</code> 执行到 (2) 之前, <code>thread2</code> 都会阻塞在 (3) 处的 <code>lock()</code> 中. 那么可以推导出:</p><ul><li>根据语句顺序, 有 (1) “sequenced-before” (2) 且 (3) “sequenced-before” (4);</li><li>因为 (2) “synchronizes-with” (3) 且 (3) “sequenced-before” (4), 所以 (2) “inter-thread happens-before” (4);</li><li>因为 (1) “sequenced-before” (2) 且 (2) “inter-thread happens-before” (4), 所以 (1) “inter-thread happens-before” (4); 所以 (1) “happens-before” (4).</li></ul><p>因此 (4) 可以读到 (1) 对变量 <code>a</code> 的修改.</p><h3 id="2-3-Happens-before-不代表指令实际的执行顺序">2.3 Happens-before 不代表指令实际的执行顺序</h3><p>需要说明的是, happens-before 是 C++ 语义层面的概念, 它并不代表指令在 CPU 中实际的执行顺序. 为了优化性能, 编译器会在不破坏语义的前提下对指令重排. 例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    b++;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然有 <code>a++;</code> “happens-before” <code>b++;</code>, 但编译器实际生成的指令可能是先加载 <code>a</code>, <code>b</code> 两个变量到寄存器, 接着分别执行 “加一” 操作, 然后再执行 <code>a + b</code>, 最后才将自增的结果写入内存.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add():</span><br><span class="line">    movl    a(%rip), %eax   # 将变量 a 加载到寄存器</span><br><span class="line">    movl    b(%rip), %ecx   # 将变量 b 加载到寄存器</span><br><span class="line">    addl    $1, %eax        # a 的值加一</span><br><span class="line">    leal    1(%rcx), %edx   # b 的值加一</span><br><span class="line">    movl    %eax, a(%rip)   # 将 a 加一的结果写入内存</span><br><span class="line">    addl    %edx, %eax      # a + b</span><br><span class="line">    movl    %edx, b(%rip)   # 将 b 加一的结果写入内存</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>上面展示了 x86-64 下的一种可能的编译结果. 可以看到 C++ 的一条语句可能产生多条指令, 这些指令都是交错执行的. 其实编译器甚至还有可能先自增 <code>b</code> 再自增 <code>a</code>. 这样的重排并不会影响语义, 两个自增操作的结果仍然对 <code>return a + b;</code> 可见.</p><h2 id="3-内存顺序">3. 内存顺序</h2><p>前面我们提到 C++ 的六种内存顺序相互组合可以实现三种顺序模型. 现在我们来具体看看如何使用这六种内存顺序, 以及怎样的组合可以实现 synchronizes-with 的关系.</p><h3 id="3-1-memory-order-seq-cst">3.1 memory_order_seq_cst</h3><p><code>memory_order_seq_cst</code> 可以用于 store, load 和 read-modify-write 操作, 实现 sequencial consistent 的顺序模型. 在这个模型下, 所有线程看到的所有操作都有一个一致的顺序, 即使这些操作可能针对不同的变量, 运行在不同的线程. 2.1 节中我们介绍了修改顺序 (modification order), 即单一变量的修改顺序在所有线程看来都是一致的. Sequencial consistent 则将这种一致性扩展到了所有变量. 例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">bool</span>&gt; x&#123;<span class="literal">false</span>&#125;, y&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_seq_cst); <span class="comment">// (1)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    y.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_seq_cst); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>thread1</code> 和 <code>thread2</code> 分别修改原子变量 <code>x</code> 和 <code>y</code>. 运行过程中, 有可能先执行 (1) 再执行 (2), 也有可能先执行 (2) 后执行 (1). 但无论如何, 所有线程中看到的顺序都是一致的. 因此如果我们这样测试这段代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">int</span>&gt; z&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_x_then_y</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!x.<span class="built_in">load</span>(std::memory_order_seq_cst)); <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">if</span> (y.<span class="built_in">load</span>(std::memory_order_seq_cst)) ++z; <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_y_then_x</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!y.<span class="built_in">load</span>(std::memory_order_seq_cst)); <span class="comment">// (5)</span></span><br><span class="line">    <span class="keyword">if</span> (x.<span class="built_in">load</span>(std::memory_order_seq_cst)) ++z; <span class="comment">// (6)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">a</span><span class="params">(thread1)</span>, <span class="title">b</span><span class="params">(thread2)</span>, <span class="title">c</span><span class="params">(read_x_then_y)</span>, <span class="title">d</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">    a.<span class="built_in">join</span>(), b.<span class="built_in">join</span>(), c.<span class="built_in">join</span>(), d.<span class="built_in">join</span>();</span><br><span class="line">    <span class="built_in">assert</span>(z.<span class="built_in">load</span>() != <span class="number">0</span>); <span class="comment">// (7)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7) 处的断言永远不会失败. <strong>因为 <code>x</code> 和 <code>y</code> 的修改顺序是全局一致的, 如果先执行 (1) 后执行 (2), 则 <code>read_y_then_x</code> 中循环 (5) 退出时, 能保证 <code>y</code> 为 <code>true</code>, 此时 <code>x</code> 也必然为 <code>true</code>, 因此 (6) 会被执行; 同理, 如果先执行 (2) 后执行 (1), 则循环 (3) 退出时 <code>y</code> 也必然为 <code>true</code>, 因此 (4) 会被执行. 无论如何, <code>z</code> 最终都不会等于 0.</strong></p><p>Sequencial consistent 可以实现 synchronizes-with 的关系. 如果一个 <code>memory_order_seq_cst</code> 的 load 操作在某个原子变量上读到了一个 <code>memory_order_seq_cst</code> 的 store 操作在这个原子变量中写入的值, 则 store 操作 “synchronizes-with” load 操作. 在上面的例子中, 有 (1) “synchronizes-with” (3) 和 (2) “synchronizes-with” (5).</p><p>实现 sequencial consistent 模型有一定的开销. 现代 CPU 通常有多核, 每个核心还有自己的缓存. 为了做到<strong>全局顺序一致</strong>, 每次写入操作都必须同步给其他核心. 为了减少性能开销, 如果不需要全局顺序一致, 我们应该考虑使用更加宽松的顺序模型.</p><h3 id="3-2-memory-order-relaxed">3.2 memory_order_relaxed</h3><p><code>memory_order_relaxed</code> 可以用于 store, load 和 read-modify-write 操作, 实现 relaxed 的顺序模型. 这种模型下, 只能保证操作的原子性和修改顺序 (modification order) 一致性, 无法实现 synchronizes-with 的关系. 例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">bool</span>&gt; x&#123;<span class="literal">false</span>&#125;, y&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_relaxed); <span class="comment">// (1)</span></span><br><span class="line">    y.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_relaxed); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>thread1</code> 对不同的变量执行 store 操作. 那么在某些线程看来, 有可能是 <code>x</code> 先变为 <code>true</code>, y 后变为 <code>true</code>; 另一些线程看来, 又有可能是 <code>y</code> 先变为 <code>true</code>, <code>x</code> 后变为 <code>true</code>. 如果这样测试这段代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!y.<span class="built_in">load</span>(std::memory_order_relaxed)); <span class="comment">// (3)</span></span><br><span class="line">    <span class="built_in">assert</span>(x.<span class="built_in">load</span>()); <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(4) 处的断言就有可能失败. 因为 (2) 与 (3) 之间没有 synchronizes-with 的关系, 所以就不能保证 (1) “happens-before” (4). 因此 (4) 就有可能读到 <code>false</code>.</strong> 至于 relaxed 顺序模型能保证的修改顺序一致性的例子, 2.1 节中已经讨论过了, 这里就不多赘述了.</p><p>Relaxed 顺序模型的开销很小. 在 x86 架构下, <code>memory_order_relaxed</code> 的操作不会产生任何其他的指令, 只会影响编译器优化, 确保操作是原子的. Relaxed 模型可以用在一些不需要线程同步的场景, 但是使用时要小心. 例如 <code>std::shared_ptr</code> 增加引用计数时用的就是 <code>memory_order_relaxed</code>, 因为不需要同步; 但是减小应用计数不能用它, 因为需要与析构操作同步.</p><h3 id="3-3-Acquire-release">3.3 Acquire-release</h3><p>在 acquire-release 模型中, 会使用 <code>memory_order_acquire</code>, <code>memory_order_release</code> 和 <code>memory_order_acq_rel</code> 这三种内存顺序. 它们的用法具体是这样的:</p><ul><li><p>对原子变量的 load 可以使用 <code>memory_order_acquire</code> 内存顺序. 这称为 <strong>acquire 操作</strong>.</p></li><li><p>对原子变量的 store 可以使用 <code>memory_order_release</code> 内存顺序. 这称为 <strong>release 操作</strong>.</p></li><li><p>read-modify-write 操作即读 (load) 又写 (store), 它可以使用 <code>memory_order_acquire</code>, <code>memory_order_release</code> 和 <code>memory_order_acq_rel</code>:</p><ul><li>如果使用 <code>memory_order_acquire</code>, 则作为 acquire 操作;</li><li>如果使用 <code>memory_order_release</code>, 则作为 release 操作;</li><li>如果使用 <code>memory_order_acq_rel</code>, 则同时为两者.</li></ul></li></ul><p>Acquire-release 可以实现 synchronizes-with 的关系. 如果一个 acquire 操作在同一个原子变量上读取到了一个 release 操作写入的值, 则这个 release 操作 “synchronizes-with” 这个 acquire 操作. 我们来看一个例子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">bool</span>&gt; x&#123;<span class="literal">false</span>&#125;, y&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_relaxed); <span class="comment">// (1)</span></span><br><span class="line">    y.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_release); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!y.<span class="built_in">load</span>(std::memory_order_acquire)); <span class="comment">// (3)</span></span><br><span class="line">    <span class="built_in">assert</span>(x.<span class="built_in">load</span>(std::memory_order_relaxed)); <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中, 语句 (2) 使用 <code>memory_order_release</code> 在 <code>y</code> 中写入 <code>true</code>, 语句 (3) 中使用 <code>memory_order_acquire</code> 从 <code>y</code> 中读取值. 循环 (3) 退出时, 它已经读取到了 <code>y</code> 的值为 <code>true</code>, 也就是读取到了操作 (2) 中写入的值. 因此有 (2) “synchronizes-with” (3). 根据 2.2 节介绍的规则我们可以推导出:</p><ul><li>因为 (2) “synchronizes-with” (3) 且 (3) “sequenced-before” (4), 所以 (2) “inter-thread happens-before” (4);</li><li>因为 (1) “sequenced-before” (2) 且 (2) “inter-thread happens-before” (4), 所以 (1) “inter-thread happens-before” (4);</li></ul><p>所以 (1) “happens-before” (4). 因此 (4) 能读取到 (1) 中写入的值, 断言永远不会失败. 即使 (1) 和 (4) 用的是 <code>memory_order_relaxed</code>.</p><p>3.1 节我们提到 sequencial consistent 模型可以实现 synchronizes-with 关系. 事实上, 内存顺序为 <code>memory_order_seq_cst</code> 的 load 操作和 store 操作可以分别视为 acquire 操作和 release 操作. 因此对于两个指定了 <code>memory_order_seq_cst</code> 的 store 操作和 load 操作, 如果后者读到了前者写入的值, 则前者 “synchronizes-with” 后者.</p><p>为了实现 synchronizes-with 关系, acquire 操作和 release 操作应该成对出现. 如果 <code>memory_order_acquire</code> 的 load 读到了 <code>memory_order_relaxed</code> 的 store 写入的值, 或者 <code>memory_order_relaxed</code> 的 load 读到了 <code>memory_order_release</code> 的 store 写入的值, 都不能实现 synchronizes-with 的关系.</p><p><strong>虽然 sequencial consistent 模型能够像 acquire-release 一样实现同步, 但是反过来 acquire-release 模型不能像 sequencial consistent 一样提供全局顺序一致性.</strong> 如果将 3.1 节的例子中的 <code>memory_order_seq_cst</code> 换成 <code>memory_order_acquire</code> 和 <code>memory_order_release</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_release); <span class="comment">// (1)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    y.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_release); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_x_then_y</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!x.<span class="built_in">load</span>(std::memory_order_acquire)); <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">if</span> (y.<span class="built_in">load</span>(std::memory_order_acquire)) ++z; <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_y_then_x</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!y.<span class="built_in">load</span>(std::memory_order_acquire)); <span class="comment">// (5)</span></span><br><span class="line">    <span class="keyword">if</span> (x.<span class="built_in">load</span>(std::memory_order_acquire)) ++z; <span class="comment">// (6)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则最终不能保证 <code>z</code> 不为 0. <strong>在同一次运行中, <code>read_x_then_y</code> 有可能看到先 (1) 后 (2), 而 <code>read_y_then_x</code> 有可能看到先 (2) 后 (1). 这样有可能 (4) 和 (6) 的 load 的结果都为 <code>false</code>, 导致最后 <code>z</code> 仍然为 0.</strong></p><p>Acquire-release 的开销比 sequencial consistent 小. 在 x86 架构下, <code>memory_order_acquire</code> 和 <code>memory_order_release</code> 的操作不会产生任何其他的指令, 只会影响编译器的优化: 任何指令都不能重排到 acquire 操作的前面, 且不能重排到 release 操作的后面; 否则会违反 acquire-release 的语义. 因此很多需要实现 synchronizes-with 关系的场景都会使用 acquire-release.</p><h3 id="3-4-Release-sequences">3.4* Release sequences</h3><p>到目前为止我们看到的, 无论是 sequencial consistent 还是 acquire-release, <strong>要想实现 synchronizes-with 的关系, acquire 操作必须在同一个原子变量上读到 release 操作的写入的值. 如果 acquire 操作没有读到 release 操作写入的值, 那么它俩之间通常没有 synchronizes-with 的关系</strong>. 例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;<span class="type">int</span>&gt; x&#123;<span class="number">0</span>&#125;, y&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x.<span class="built_in">store</span>(<span class="number">1</span>, std::memory_order_relaxed); <span class="comment">// (1)</span></span><br><span class="line">    y.<span class="built_in">store</span>(<span class="number">1</span>, std::memory_order_release); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    y.<span class="built_in">store</span>(<span class="number">2</span>, std::memory_order_release); <span class="comment">// (3)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!y.<span class="built_in">load</span>(std::memory_order_acquire)); <span class="comment">// (4)</span></span><br><span class="line">    <span class="built_in">assert</span>(x.<span class="built_in">load</span>(std::memory_order_relaxed) == <span class="number">1</span>); <span class="comment">// (5)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中, 只要 <code>y</code> 的值非 0 循环 (4) 就会退出. 当它退出时, 有可能读到 (2) 写入的值, 也有可能读到 (3) 写入的值. 如果是后者, 则只能保证 (3) “synchronizes-with” (4), 不能保证与 (2) 与 (4) 之间有同步关系. 因此 (5) 处的断言就有可能失败.</p><p>但并不是只有在 acquire 操作读取到 release 操作写入的值时才能构成 synchronizes-with 关系. 为了说这种情况, 我们需要引入 <strong>release sequence</strong> 这个概念.</p><p>针对一个原子变量 M 的 release 操作 A 完成后, 接下来 M 上可能还会有一连串的其他操作. <strong>如果这一连串操作是由</strong></p><ul><li><strong>同一线程上的写操作, 或者</strong></li><li><strong>任意线程上的 read-modify-write 操作</strong></li></ul><p>这两种构成的, 则称这一连串的操作为<strong>以 release 操作 A 为首的 release sequence</strong>. 这里的写操作和 read-modify-write 操作可以使用任意内存顺序.</p><p>如果一个 acquire 操作在同一个原子变量上读到了一个 release 操作写入的值, 或者读到了以这个 release 操作为首的 release sequence 写入的值, 那么这个 release 操作 “synchronizes-with” 这个 acquire 操作. 我们来看个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; data;</span><br><span class="line">std::atomic&lt;<span class="type">int</span>&gt; flag&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    data.<span class="built_in">push_back</span>(<span class="number">42</span>); <span class="comment">// (1)</span></span><br><span class="line">    flag.<span class="built_in">store</span>(<span class="number">1</span>, std::memory_order_release); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> expected = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!flag.<span class="built_in">compare_exchange_strong</span>(expected, <span class="number">2</span>, std::memory_order_relaxed)) <span class="comment">// (3)</span></span><br><span class="line">        expected = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag.<span class="built_in">load</span>(std::memory_order_acquire) &lt; <span class="number">2</span>); <span class="comment">// (4)</span></span><br><span class="line">    <span class="built_in">assert</span>(data.<span class="built_in">at</span>(<span class="number">0</span>) == <span class="number">42</span>); <span class="comment">// (5)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中, (3) 处的 <code>compare_exchange_strong</code> 是一种 read-modify-write 操作, 它判断原子变量的值是否与期望的值 (第一个参数) 相等, 如果相等则将原子变量设置成目标值 (第二个参数) 并返回 <code>true</code>, 否则将第一个参数 (引用传递) 设置成原子变量当前值并返回 <code>false</code>. 操作 (3) 会一直循环检查, 当 <code>flag</code> 当值为 1 时, 将其替换成 2. 所以 (3) 属于 (2) 的 release sequence. 而循环 (4) 退出时, 它已经读到了 (3) 写入的值, 也就是 release 操作 (2) 为首的 release sequence 写入的值. 所以有 (2) “synchronizes-with” (4). 因此 (1) “happens-before” (5), (5) 处的断言不会失败.</p><p>注意 (3) 处的 <code>compare_exchange_strong</code> 的内存顺序是 <code>memory_order_relaxed</code>, 所以 (2) 与 (3) 并不构成 synchronizes-with 的关系. 也就是说, 当循环 (3) 退出时, 并不能保证 <code>thread2</code> 能读到 <code>data.at(0)</code> 为 42. 但是 (3) 属于 (2) 的 release sequence, 当 (4) 以 <code>memory_order_acquire</code> 的内存顺序读到 (2) 的 release sequence 写入的值时, 可以与 (2) 构成 synchronizes-with 的关系.</p><h3 id="3-5-memory-order-consume">3.5* memory_order_consume</h3><p><code>memory_order_consume</code> 其实是 acquire-release 模型的一部分, 但是它比较特殊, 它涉及到数据间相互依赖的关系. 为此我们又要提出两个新概念: <strong>carries dependency</strong> 和 <strong>dependency-ordered before</strong>.</p><p>如果操作 a “sequenced-before” b, 且 b 依赖 a 的数据, 则 a “carries a dependency into” b. 一般来说, 如果 a 的值用作 b 的一个操作数, 或者 b 读取到了 a 写入的值, 都可以称为 b 依赖于 a. 例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p++;  <span class="comment">// (1)</span></span><br><span class="line">i++;  <span class="comment">// (2)</span></span><br><span class="line">p[i]; <span class="comment">// (3)</span></span><br></pre></td></tr></table></figure><p>有 (1) “sequenced-before” (2) “sequenced-before” (3); (1) 和 (2) 的值作为 (3) 的下标运算符 <code>[]</code> 的操作数, 所以有 (1) “carries a dependency into” (3) 和 (2) “carries a dependency into” (3). 但是 (1) 和 (2) 并没有相互依赖, 它们之间没有 carries dependency 的关系. 类似于 sequenced-before, carries dependency 关系具有传递性.</p><p><code>memory_order_consume</code> 可以用于 load 操作. 使用 <code>memory_order_consume</code> 的 load 称为 consume 操作. 如果一个 consume 操作在同一个原子变量上读到了一个 release 操作写入的值, 或以其为首的 release sequence 写入的值, 则这个 release 操作 “dependency-ordered before” 这个 consume 操作.</p><p>Dependency-ordered before 可以 “后接” 一个 carries dependency 的关系以延伸它的范围: 如果 a “dependency-ordered before” k 且 k “carries a dependency into” b, 则 a “dependency-ordered before” b. Dependency-ordered before 可以直接构成 inter-thread happens-before 的关系: 如果 a “dependency-ordered before” b 则 a “inter-thread happens-before” b.</p><p>概念很复杂, 但是基本思路是:</p><ul><li>release 操作和 acquire 操作构成的 synchronizes-with 可以后接 sequenced-before 构成 inter-thread happens-before 的关系;</li><li>release 操作和 consume 操作构成的 dependency-ordered before 则只能后接 carries dependency 构成 inter-thread happens-before 的关系.</li><li>无论 inter-thread happens-before 是怎么构成的, 都可以前接 sequenced-before 以延伸其范围.</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240507150744160.png" alt="image-20240507150744160"></p><p>我们来看一个例子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;std::string*&gt; ptr;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string* p  = <span class="keyword">new</span> std::<span class="built_in">string</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// (1)</span></span><br><span class="line">    data = <span class="number">42</span>; <span class="comment">// (2)</span></span><br><span class="line">    ptr.<span class="built_in">store</span>(p, std::memory_order_release); <span class="comment">// (3)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string* p2;</span><br><span class="line">    <span class="keyword">while</span> (!(p2 = ptr.<span class="built_in">load</span>(std::memory_order_consume))); <span class="comment">// (4)</span></span><br><span class="line">    <span class="built_in">assert</span>(*p2 == <span class="string">&quot;Hello&quot;</span>); <span class="comment">// (5)</span></span><br><span class="line">    <span class="built_in">assert</span>(data == <span class="number">42</span>); <span class="comment">// (6)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 处的循环退出时, consume 操作 (4) 读取到 release 操作 (3) 写入的值, 因此 (3) “dependency-ordered before” (4). 由此可以推导出:</p><ul><li><code>p2</code> 的值作为 (5) 的操作数, 因此 (4) “carries a dependency into” (5);</li><li>因为 (3) “dependency-ordered before” (4) 且 (4) “carries a dependency into” (5), 所以 (3) “inter-thread happens-before” (5);</li><li>因为 (1) “sequenced-before” (3) 且 (3) “inter-thread happens-before” (5), 所以 (1) “inter-thread happens-before” (5);</li></ul><p>所以 (1) “happens-before” (5). 因此 (5) 可以读到 (1) 写入的值, 断言 (5) 不会失败. 但是操作 (6) 并不依赖于 (4), 所以 (3) 和 (6) 之间没有 inter-thread happens-before 的关系, 因此断言 (6) 就有可能失败. 回想 2.2 节强调过的, happens-before 没有传递性. 所以不能说因为 (3) “happens-before” (4) 且 (4) “happens-before” (6) 所以 (2) “happens-before” (6).</p><p>与 acquire-release 类似, 在 x86 下使用 <code>memory_order_consume</code> 的操作不会产生任何其他的指令, 只会影响编译器优化. 与 consume 操作有依赖关系的指令都不会重排到 consume 操作前面. 它对重排的限制比 acquire 宽松些, acquire 要求所有的指令都不能重排到它的前面, 而 consume 只要求有依赖关系的指令不能重排到它的前面. 因此在某些情况下, consume 的性能可能会高一些.</p><h2 id="4-例子">4. 例子</h2><blockquote><p><strong>自旋锁</strong></p></blockquote><p>在一些场景下, 如果锁被占用的时间很短, 我们会选择自旋锁, 以减少上下文切换的开销. 锁一般用来保护临界数据的读写, 我们希望同一时间只有一个线程能获取到锁, 且获取到锁后, 被锁保护的数据总是最新的. 前者通过原子操作即可保证, 而后者就需要考虑内存顺序了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">std::deque&lt;<span class="type">int</span>&gt; queue;</span><br><span class="line">spinlock mu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">while</span> ((val = <span class="built_in">read_from_remote</span>())) &#123;</span><br><span class="line">        mu.<span class="built_in">lock</span>(); <span class="comment">// (1)</span></span><br><span class="line">        queue.<span class="built_in">push_back</span>(val); <span class="comment">// (2)</span></span><br><span class="line">        mu.<span class="built_in">unlock</span>(); <span class="comment">// (3)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        mu.<span class="built_in">lock</span>(); <span class="comment">// (4)</span></span><br><span class="line">        cout &lt;&lt; queue.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">        queue.<span class="built_in">pop_front</span>(); <span class="comment">// (5)</span></span><br><span class="line">        mu.<span class="built_in">unlock</span>(); <span class="comment">// (6)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程并发运行, <code>thread1</code> 往队列里写入数据, <code>thread2</code> 从队列里读出数据. 入队操作 (2) 可能需要复制数据, 移动指针, 甚至 resize 队列, 因此我们要保证获取到锁时, 这些操作的结果完全可见. 出队操作也是同理. 所以自旋锁要保证 unlock 操作 “synchronizes-with” lock 操作, 保证锁保护的数据是完整的.</p><p>我们可以用 acquire-release 模型实现自旋锁. 下面是一个简单的实现:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">spinlock</span> &#123;</span><br><span class="line">    std::atomic&lt;<span class="type">bool</span>&gt; flag&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag.<span class="built_in">exchange</span>(<span class="literal">true</span>, std::memory_order_acquire)); <span class="comment">// (1)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag.<span class="built_in">store</span>(<span class="literal">false</span>, std::memory_order_release); <span class="comment">// (2)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的实现中, (1) 处加锁用到的 <code>exchange</code> 是一种 read-modify-write 操作, 它将目标值 (第一个参数) 写入原子变量, 并返回写入前的值. 在这个实现中, 锁被占用时 <code>flag</code> 为 <code>true</code>. 如果锁被占用, (1) 处的 exchange 操作会一直返回 <code>true</code>, 线程阻塞在循环中; 直到锁被释放, <code>flag</code> 为 <code>false</code>, exchange 操作将 <code>flag</code> 重新置为 <code>true</code> 以抢占锁, 并且返回其原来的值 <code>false</code>, 循环退出, 加锁成功. 解锁则很简单, 将 <code>flag</code> 置为 <code>false</code> 即可.</p><p>由于解锁操作使用 <code>memory_order_release</code> 且加锁操作使用 <code>memory_order_acquire</code>, 所以能保证加锁成功时与上一次解锁操作构成 “synchronizes-with” 的关系, 也就是 unlock 操作 “synchronizes-with” lock 操作.</p><p>加锁时的 exchange 操作是一个 read-modify-write 操作, 它既读又写. 当它使用 <code>memory_order_acquire</code> 时, 只能保证它读的部分是一个 acquire 操作. 如果有两个线程抢占同一个锁</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spinlock mu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some operations</span></span><br><span class="line">    mu.<span class="built_in">lock</span>(); <span class="comment">// (1)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mu.<span class="built_in">lock</span>(); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) 和 (2) 之间没有任何同步关系, 假设先执行操作 (1) 后执行操作 (2), 那么 <code>thread1</code> 中 (1) 之前的操作结果不一定对 <code>thread2</code> 可见. 但能确定的是, 只会有一个线程得到锁, 这是由原子变量的修改顺序 (modification order) 所保证的. 要么 <code>thread1</code> 先将 <code>flag</code> 置为 <code>true</code>, 要么 <code>thread2</code> 先将 <code>flag</code> 置为 <code>true</code>, 这个顺序是全局一致的.</p><h2 id="5-总结">5. 总结</h2><p>总结一下这几种内存顺序模型:</p><ul><li><code>memory_order_relaxed</code>: 最宽松的内存顺序, 只保证操作的<strong>原子性</strong>和<strong>修改顺序 (modification order)</strong>.</li><li><code>memory_order_acquire</code>, <code>memory_order_release</code> 和 <code>memory_order_acq_rel</code>: 实现 <strong>acquire 操作</strong>和 <strong>release 操作</strong>, 如果 acquire 操作读到了 release 操作写入的值, 或其 release sequence 写入的值, 则构成 <strong>synchronizes-with 关系</strong>, 进而可以推导出 <strong>happens-before 的关系</strong>.</li><li><code>memory_order_consume</code>: 实现 <strong>consume 操作</strong>, 能实现数据依赖相关的同步关系. 如果 consume 操作读到了 release 操作写入的值, 或其 release sequence 写入的值, 则构成 <strong>dependency-ordered before 的关系</strong>, 对于有数据依赖的操作可以进而推导出 <strong>happens-before 的关系</strong>.</li><li><code>memory_order_seq_cst</code>: 加强版的 acquire-release 模型, 除了可以实现 <strong>synchronizes-with 关系</strong>, 还保证<strong>全局顺序一致</strong>.</li></ul><h2 id="6-资料">6. 资料</h2><ul><li><a href="https://nj.gitbooks.io/c/content/">《C++并发编程实战》</a></li><li><a href="https://www.zhihu.com/question/24301047">内存模型</a></li></ul><p>本文转载自：<a href="https://luyuhuang.tech/2022/06/25/cpp-memory-order.html#%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F">谈谈 C++ 中的内存顺序 (Memory Order)</a></p><p>参考资料：</p><ul><li><a href="https://blog.51cto.com/quantfabric/2588193">C++性能优化（十三）——无锁队列</a></li><li><a href="%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">无锁队列的几种实现及其性能对比</a></li><li><a href="https://blog.csdn.net/xin_hen/article/details/108142403">C++11实现基于循环数组的无锁队列LockFreeArrayQueue</a></li><li><a href="https://zhuanlan.zhihu.com/p/638443455">揭秘C++无锁队列的几种实现及性能对比</a></li><li><a href="https://zhuanlan.zhihu.com/p/678154776">C++性能优化——无锁队列的原理与实现</a></li></ul>]]></content>
    
    
    <summary type="html">Memory Order</summary>
    
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>CMake快速上手</title>
    <link href="https://penge666.github.io/posts/48ea1a6e.html"/>
    <id>https://penge666.github.io/posts/48ea1a6e.html</id>
    <published>2024-05-06T14:38:59.000Z</published>
    <updated>2024-05-06T15:23:10.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>CMake 不再使你在构建项目时郁闷地想自杀了。</p><p>插曲：之前在研究所做项目的时候，刘总总是暴力的使用sh脚本编译[狗头保命一波]，狠狠的暴力美学。但是，这对写lab的我有点难泵，于是乎，全给重写CMakeLists.txt文件的形式编译。</p><p>好了，基本文件的CMakeList.txt学习清楚后，就应该学习实际项目中CMakeLists.txt是如何规范书写，到实践中学习。</p><h2 id="介绍">介绍</h2><h3 id="跨平台设计原理">跨平台设计原理</h3><p>在大型C/C++项目中，跨平台设计是一个重要的考虑因素。跨平台设计的目标是使得源代码能够在多种操作系统和硬件架构上编译和运行，而无需进行大量的修改。这样可以大大提高代码的可移植性和复用性，降低维护成本。</p><p>CMake（Cross-platform Make）是一个开源的、跨平台的自动化建构系统，它允许开发者编写一份通用的CMakeList.txt文件来控制编译过程，而不需要修改特定平台下的编译配置，从而实现真正意义上的跨平台编译。</p><p>CMake支持多种编译器，包括GCC，Clang，Visual Studio等，并且可以生成各种类型的项目文件，如Makefile，Ninja，Visual Studio解决方案等。这使得CMake成为了跨平台C/C++项目的首选构建工具。</p><p>在CMake中，跨平台设计的实现主要依赖于以下几个原理：</p><ol><li><strong>抽象层</strong>：CMake为各种操作系统和编译器提供了一套抽象层，开发者只需要关注源代码和依赖库，而无需关心具体的编译器和操作系统。这是通过在CMakeList.txt文件中设置目标（target）和属性（property）来实现的。</li><li><strong>模块系统</strong>：CMake提供了一套模块系统，用于查找库和包，检查编译器和系统特性，以及管理测试等。这些模块大大简化了跨平台开发的复杂性。</li><li><strong>生成器</strong>：CMake通过生成器（generator）将CMakeList.txt文件转换为特定平台下的构建文件。生成器根据目标系统的特性，自动处理平台相关的编译和链接问题。</li><li><strong>变量和条件</strong>：CMake支持变量和条件语句，使得开发者可以根据不同的平台和编译器，选择不同的源文件和编译选项。</li></ol><p>以上就是CMake实现跨平台设计的基本原理，接下来我们将深入探讨CMake在跨平台设计中的应用。</p><h3 id="跨平台设计">跨平台设计</h3><p>在大型C/C++项目中，跨平台设计是必不可少的一环。这主要涉及到如何使用CMake来配置和管理不同平台的编译环境。</p><p><strong>CMake的跨平台特性</strong></p><p>CMake本身就是一个跨平台的构建工具，它可以在Windows、Linux、Mac等多种操作系统上运行。CMake通过生成平台相关的构建文件（如Unix的Makefile，Windows的nmake文件或Visual Studio项目文件等）来实现跨平台构建。这意味着，我们可以编写一套CMake构建脚本，然后在不同的平台上生成相应的构建文件，从而实现跨平台构建。</p><p><strong>使用CMake进行跨编译</strong></p><p>跨编译是指在一个平台上生成另一个平台的可执行代码。例如，我们可能需要在Linux平台上编译出运行在嵌入式设备上的ARM架构的代码。CMake支持跨编译，我们可以通过设置CMake的工具链文件（Toolchain File）来指定交叉编译器和相关的编译选项。</p><p>在CMake的工具链文件中，我们可以设置如下变量：</p><ul><li><code>CMAKE_SYSTEM_NAME</code>：目标系统的名称，如Linux、Windows、Android等。</li><li><code>CMAKE_SYSTEM_PROCESSOR</code>：目标系统的处理器架构，如x86、arm等。</li><li><code>CMAKE_C_COMPILER</code>、<code>CMAKE_CXX_COMPILER</code>：C和C++的交叉编译器的路径。</li><li><code>CMAKE_FIND_ROOT_PATH</code>：在查找库和头文件时，CMake应该查找的路径。</li></ul><p>通过设置这些变量，我们可以告诉CMake我们要编译的目标平台是什么，以及应该使用哪些工具进行编译。</p><p><strong>处理平台相关的代码</strong></p><p>在大型C/C++项目中，通常会有一些平台相关的代码。例如，Windows平台和Linux平台的系统调用是不同的，处理文件路径的方式也是不同的。我们需要在CMake构建脚本中检测目标平台，然后根据目标平台来决定编译哪些源文件。</p><p>CMake提供了<code>if</code>命令来进行条件判断。我们可以使用<code>CMAKE_SYSTEM_NAME</code>变量来判断目标平台。例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(CMAKE_SYSTEM_NAME <span class="keyword">STREQUAL</span> <span class="string">&quot;Linux&quot;</span>)</span><br><span class="line">    <span class="comment"># 编译Linux平台的源文件</span></span><br><span class="line">    <span class="keyword">add_library</span>(mylib linux_specific_code.c)</span><br><span class="line"><span class="keyword">elseif</span>(CMAKE_SYSTEM_NAME <span class="keyword">STREQUAL</span> <span class="string">&quot;Windows&quot;</span>)</span><br><span class="line">    <span class="comment"># 编译Windows平台的源文件</span></span><br></pre></td></tr></table></figure><p>以下是跨平台设计的流程图：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240506230531403.png" alt="image-20240506230531403"></p><p>在大型C/C++项目中，我们需要考虑到跨平台设计。这主要涉及到如何使用CMake来配置和管理不同平台的编译环境。CMake本身就是一个跨平台的构建工具，它可以在Windows、Linux、Mac等多种操作系统上运行。CMake通过生成平台相关的构建文件（如Unix的Makefile，Windows的nmake文件或Visual Studio项目文件等）来实现跨平台构建。</p><p>跨编译是指在一个平台上生成另一个平台的可执行代码。例如，我们可能需要在Linux平台上编译出运行在嵌入式设备上的ARM架构的代码。CMake支持跨编译，我们可以通过设置CMake的工具链文件（Toolchain File）来指定交叉编译器和相关的编译选项。</p><p>在大型C/C++项目中，通常会有一些平台相关的代码。例如，Windows平台和Linux平台的系统调用是不同的，处理文件路径的方式也是不同的。我们需要在CMake构建脚本中检测目标平台，然后根据目标平台来决定编译哪些源文件。CMake提供了<code>if</code>命令来进行条件判断。我们可以使用<code>CMAKE_SYSTEM_NAME</code>变量来判断目标平台。</p><h3 id="跨平台设计案例">跨平台设计案例</h3><p>在实践中，跨平台设计是一个复杂的过程，需要考虑到各种因素。以下是一些实践和案例，帮助我们更好地理解跨平台设计的过程和挑战。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240506230621696.png" alt="image-20240506230621696"></p><p>首先，我们需要理解平台差异（Understanding Platform Differences）。不同的操作系统和硬件平台有不同的特性和限制。例如，Windows和Linux在文件系统、线程管理和网络编程等方面有显著的差异。理解这些差异是设计跨平台应用的第一步。</p><p>其次，选择合适的工具和库（Choosing Appropriate Tools and Libraries）也是非常重要的。有些工具和库是跨平台的，可以在多种操作系统和硬件平台上运行。例如，CMake就是一个跨平台的构建工具，可以在Windows、Linux和MacOS上使用。使用这些工具和库可以大大简化跨平台设计的复杂性。</p><p>然后，编写可移植的代码（Writing Portable Code）是另一个关键步骤。可移植的代码是指可以在多种平台上编译和运行的代码。为了实现代码的可移植性，我们需要避免使用特定平台的特性和API，或者使用预处理器指令来处理平台差异。</p><p>最后，进行全面的测试（Comprehensive Testing）是确保跨平台应用正确运行的重要步骤。我们需要在所有目标平台上测试应用，确保它在各种环境中都能正常工作。</p><p>以上就是跨平台设计的一些基本步骤和实践。在实际的项目中，我们可能还需要考虑到其他的因素，如性能、安全性和用户体验等。但是，只要我们遵循这些基本原则，我们就可以设计出高质量的跨平台应用。</p><h2 id="基本使用">基本使用</h2><h3 id="常用命令">常用命令</h3><p><strong>1. 指定 cmake 的最小版本</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这行命令是可选的，当然可以不写这句话，但在有些情况下，如果 CMakeLists.txt 文件中使用了一些高版本 cmake 特有的一些命令的时候，就需要加上这样一行，提醒用户升级到该版本之后再执行 cmake。</p><p><strong>2. 设置项目名称</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">project</span>(demo)</span><br></pre></td></tr></table></figure><p>这个命令不是强制性的，但最好都加上。它会引入两个变量 demo_BINARY_DIR 和 demo_SOURCE_DIR，同时，cmake 自动定义了两个等价的变量 PROJECT_BINARY_DIR 和 PROJECT_SOURCE_DIR。</p><p><strong>3. 设置编译类型</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add_executable</span>(demo demo.cpp) # 生成可执行文件</span><br><span class="line"><span class="built_in">add_library</span>(common STATIC util.cpp) # 生成静态库</span><br><span class="line"><span class="built_in">add_library</span>(common SHARED util.cpp) # 生成动态库或共享库</span><br></pre></td></tr></table></figure><p>add_library 默认生成是静态库，通过以上命令生成文件名字，</p><ul><li>在 Linux 下是：<br>demo<br>libcommon.a<br><a href="http://libcommon.so">libcommon.so</a></li><li>在 Windows 下是：<br>demo.exe<br>common.lib<br>common.dll</li></ul><p><strong>4. 指定编译包含的源文件</strong></p><p>4.1 明确指定包含哪些源文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add_library</span>(demo demo.cpp test.cpp util.cpp)</span><br></pre></td></tr></table></figure><p>4.2 搜索所有的 cpp 文件</p><p>aux_source_directory(dir VAR) 发现一个目录下所有的源代码文件并将列表存储在一个变量中。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">aux_source_directory</span>(. SRC_LIST) # 搜索当前目录下的所有<span class="selector-class">.cpp</span>文件</span><br><span class="line"><span class="built_in">add_library</span>(demo $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure><p>4.3 自定义搜索规则</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">file</span>(GLOB SRC_LIST &quot;*.cpp&quot; &quot;protocol/*.cpp&quot;)</span><br><span class="line"><span class="built_in">add_library</span>(demo $&#123;SRC_LIST&#125;)</span><br><span class="line"># 或者</span><br><span class="line"><span class="built_in">file</span>(GLOB SRC_LIST &quot;*.cpp&quot;)</span><br><span class="line"><span class="built_in">file</span>(GLOB SRC_PROTOCOL_LIST &quot;protocol/*.cpp&quot;)</span><br><span class="line"><span class="built_in">add_library</span>(demo $&#123;SRC_LIST&#125; $&#123;SRC_PROTOCOL_LIST&#125;)</span><br><span class="line"># 或者</span><br><span class="line"><span class="built_in">file</span>(GLOB_RECURSE SRC_LIST &quot;*.cpp&quot;) #递归搜索</span><br><span class="line"><span class="built_in">FILE</span>(GLOB SRC_PROTOCOL RELATIVE &quot;protocol&quot; &quot;*.cpp&quot;) # 相对protocol目录下搜索</span><br><span class="line"><span class="built_in">add_library</span>(demo $&#123;SRC_LIST&#125; $&#123;SRC_PROTOCOL_LIST&#125;)</span><br><span class="line"># 或者</span><br><span class="line"><span class="built_in">aux_source_directory</span>(. SRC_LIST)</span><br><span class="line"><span class="built_in">aux_source_directory</span>(protocol SRC_PROTOCOL_LIST)</span><br><span class="line"><span class="built_in">add_library</span>(demo $&#123;SRC_LIST&#125; $&#123;SRC_PROTOCOL_LIST&#125;)</span><br></pre></td></tr></table></figure><p><strong>5. 查找指定的库文件</strong></p><p>find_library(VAR name path)查找到指定的预编译库，并将它的路径存储在变量中。<br>默认的搜索路径为 cmake 包含的系统库，因此如果是 NDK 的公共库只需要指定库的 name 即可。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              <span class="keyword">log</span>-lib</span><br><span class="line"> </span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              <span class="keyword">log</span> )</span><br></pre></td></tr></table></figure><p>类似的命令还有 find_file()、find_path()、find_program()、find_package()。</p><p><strong>6. 设置包含的目录</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">include_directories</span>(</span><br><span class="line">    $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span><br><span class="line">    $&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span><br><span class="line">    $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Linux 下还可以通过如下方式设置包含的目录</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -I$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&quot;)</span><br></pre></td></tr></table></figure><p><strong>7. 设置链接库搜索目录</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">link_directories</span>(</span><br><span class="line">    $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/libs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Linux 下还可以通过如下方式设置包含的目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -L$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/libs&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>8. 设置 target 需要链接的库</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">target_link_libraries</span>( # 目标库</span><br><span class="line">                       demo</span><br><span class="line"> </span><br><span class="line">                       # 目标库需要链接的库</span><br><span class="line">                       # log-lib 是上面 find_library 指定的变量名</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure><p>在 Windows 下，系统会根据链接库目录，搜索xxx.lib 文件，Linux 下会搜索 <a href="http://xxx.so">xxx.so</a> 或者 xxx.a 文件，如果都存在会优先链接动态库（so 后缀）。</p><p>8.1 指定链接动态库或静态库</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">target_link_libraries</span>(demo libface.a) # 链接libface.<span class="function">a</span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(demo libface.so)</span> # 链接libface.so</span></span><br></pre></td></tr></table></figure><p>8.2 指定全路径</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">target_link_libraries</span>(demo $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/libs/libface.a)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(demo $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/libs/libface.so)</span><br></pre></td></tr></table></figure><p>8.3 指定链接多个库</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">target_link_libraries</span>(demo</span><br><span class="line">    $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/libs/libface.a</span><br><span class="line">    boost_system.a</span><br><span class="line">    boost_thread</span><br><span class="line">    pthread)</span><br></pre></td></tr></table></figure><p><strong>9. 设置变量</strong></p><p>9.1 set 直接设置变量的值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(SRC_LIST main.cpp test.cpp)</span><br><span class="line"><span class="built_in">add_executable</span>(demo $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure><p>9.2 set 追加设置变量的值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(SRC_LIST main.cpp)</span><br><span class="line"><span class="built_in">set</span>(SRC_LIST $&#123;SRC_LIST&#125; test.cpp)</span><br><span class="line"><span class="built_in">add_executable</span>(demo $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure><p>9.3 list 追加或者删除变量的值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(SRC_LIST main.cpp)</span><br><span class="line"><span class="built_in">list</span>(APPEND SRC_LIST test.cpp)</span><br><span class="line"><span class="built_in">list</span>(REMOVE_ITEM SRC_LIST main.cpp)</span><br><span class="line"><span class="built_in">add_executable</span>(demo $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure><p><strong>10. 条件控制</strong></p><p>10.1 if…elseif…else…endif</p><p>逻辑判断和比较：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (expression)：expression 不为空（<span class="number">0</span>,N,NO,OFF,FALSE,NOTFOUND）时为真</span><br><span class="line">if (not exp)：与上面相反</span><br><span class="line">if (var1 AND var2)</span><br><span class="line">if (var1 OR var2)</span><br><span class="line">if (COMMAND cmd)：如果 cmd 确实是命令并可调用为真</span><br><span class="line">if (EXISTS dir) if (EXISTS file)：如果目录或文件存在为真</span><br><span class="line">if (file1 IS_NEWER_THAN file2)：当 file1 比 file2 新，或 file1/file2 中有一个不存在时为真，文件名需使用全路径</span><br><span class="line">if (IS_DIRECTORY dir)：当 dir 是目录时为真</span><br><span class="line">if (DEFINED var)：如果变量被定义为真</span><br><span class="line">if (var MATCHES regex)：给定的变量或者字符串能够匹配正则表达式 regex 时为真，此处 <span class="selector-tag">var</span> 可以用 <span class="selector-tag">var</span> 名，也可以用 $&#123;<span class="selector-tag">var</span>&#125;</span><br><span class="line">if (string MATCHES regex)</span><br></pre></td></tr></table></figure><p>数字比较：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (variable LESS number)：LESS 小于</span><br><span class="line">if (string LESS number)</span><br><span class="line">if (variable GREATER number)：GREATER 大于</span><br><span class="line">if (string GREATER number)</span><br><span class="line">if (variable EQUAL number)：EQUAL 等于</span><br><span class="line">if (string EQUAL number)</span><br></pre></td></tr></table></figure><p>字母表顺序比较：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (variable STRLESS string)</span><br><span class="line">if (string STRLESS string)</span><br><span class="line">if (variable STRGREATER string)</span><br><span class="line">if (string STRGREATER string)</span><br><span class="line">if (variable STREQUAL string)</span><br><span class="line">if (string STREQUAL string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if(MSVC)</span><br><span class="line">    set(LINK_LIBS common)</span><br><span class="line">else()</span><br><span class="line">    set(boost_thread boost_log.a boost_system.a)</span><br><span class="line">endif()</span><br><span class="line">target_link_libraries(demo $&#123;LINK_LIBS&#125;)</span><br><span class="line"># 或者</span><br><span class="line">if(UNIX)</span><br><span class="line">    set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11 -fpermissive -g&quot;)</span><br><span class="line">else()</span><br><span class="line">    add_definitions(-D_SCL_SECURE_NO_WARNINGS</span><br><span class="line">    D_CRT_SECURE_NO_WARNINGS</span><br><span class="line">    -D_WIN32_WINNT=0x601</span><br><span class="line">    -D_WINSOCK_DEPRECATED_NO_WARNINGS)</span><br><span class="line">endif()</span><br><span class="line"> </span><br><span class="line">if($&#123;CMAKE_BUILD_TYPE&#125; MATCHES &quot;debug&quot;)</span><br><span class="line">    ...</span><br><span class="line">else()</span><br><span class="line">    ...</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><p>10.2 while…endwhile</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">while</span>(condition)</span><br><span class="line">    ...</span><br><span class="line"><span class="built_in">endwhile</span>()</span><br></pre></td></tr></table></figure><p>10.3 foreach…endforeach</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">foreach</span>(loop_var RANGE start stop [step])</span><br><span class="line">    ...</span><br><span class="line"><span class="built_in">endforeach</span>(loop_var)</span><br></pre></td></tr></table></figure><p>start 表示起始数，stop 表示终止数，step 表示步长，示例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">foreach</span>(i RANGE <span class="number">1</span> <span class="number">9</span> <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">message</span>($&#123;i&#125;)</span><br><span class="line"><span class="built_in">endforeach</span>(i)</span><br><span class="line"># 输出：<span class="number">13579</span></span><br></pre></td></tr></table></figure><p><strong>11. 打印信息</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">message</span>($&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"><span class="built_in">message</span>(&quot;build with debug mode&quot;)</span><br><span class="line"><span class="built_in">message</span>(WARNING &quot;this is warnning message&quot;)</span><br><span class="line"><span class="built_in">message</span>(FATAL_ERROR &quot;this build has many error&quot;) # FATAL_ERROR 会导致编译失败</span><br></pre></td></tr></table></figure><p><strong>12. 包含其它 cmake 文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">include</span>(./common.cmake) # 指定包含文件的全路径</span><br><span class="line"><span class="built_in">include</span>(def) # 在搜索路径中搜索def<span class="selector-class">.cmake</span>文件</span><br><span class="line"><span class="built_in">set</span>(CMAKE_MODULE_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/cmake) # 设置include的搜索路径</span><br></pre></td></tr></table></figure><h3 id="常用信息">常用信息</h3><p><strong>1.预定义变量</strong></p><ul><li>PROJECT_SOURCE_DIR：工程的根目录</li><li>PROJECT_BINARY_DIR：运行 cmake 命令的目录，通常是 ${PROJECT_SOURCE_DIR}/build</li><li>PROJECT_NAME：返回通过 project 命令定义的项目名称</li><li>CMAKE_CURRENT_SOURCE_DIR：当前处理的 CMakeLists.txt 所在的路径</li><li>CMAKE_CURRENT_BINARY_DIR：target 编译目录</li><li>CMAKE_CURRENT_LIST_DIR：CMakeLists.txt 的完整路径</li><li>CMAKE_CURRENT_LIST_LINE：当前所在的行</li><li>CMAKE_MODULE_PATH：定义自己的 cmake 模块所在的路径，SET(CMAKE_MODULE_PATH</li><li>${PROJECT_SOURCE_DIR}/cmake)，然后可以用INCLUDE命令来调用自己的模块</li><li>EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置</li><li>LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置</li></ul><p><strong>2. 环境变量</strong></p><p>使用环境变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ENV</span>&#123;Name&#125;</span><br></pre></td></tr></table></figure><p>写入环境变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(ENV&#123;Name&#125; <span class="keyword">value</span>) <span class="meta"># 这里没有“$”符号</span></span><br></pre></td></tr></table></figure><p>3.系统信息</p><ul><li>CMAKE_MAJOR_VERSION：cmake 主版本号，比如 3.4.1 中的 3</li><li>CMAKE_MINOR_VERSION：cmake 次版本号，比如 3.4.1 中的 4</li><li>CMAKE_PATCH_VERSION：cmake 补丁等级，比如 3.4.1 中的 1</li><li>CMAKE_SYSTEM：系统名称，比如 Linux-­2.6.22­</li><li>CMAKE_SYSTEM_NAME：不包含版本的系统名，比如 Linux­</li><li>CMAKE_SYSTEM_VERSION：系统版本，比如 2.6.22</li><li>CMAKE_SYSTEM_PROCESSOR：处理器名称，比如 i686</li><li>UNIX：在所有的类 UNIX 平台下该值为 TRUE，包括 OS X 和 cygwin</li><li>WIN32：在所有的 win32 平台下该值为 TRUE，包括 cygwin</li></ul><p>4.主要开关选项</p><ul><li>BUILD_SHARED_LIBS：这个开关用来控制默认的库编译方式，如果不进行设置，使用 add_library 又没有指定库类型的情况下，默认编译生成的库都是静态库。如果 set(BUILD_SHARED_LIBS ON) 后，默认生成的为动态库</li><li>CMAKE_C_FLAGS：设置 C 编译选项，也可以通过指令 add_definitions() 添加</li><li>CMAKE_CXX_FLAGS：设置 C++ 编译选项，也可以通过指令 add_definitions() 添加</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_definitions</span>(-DENABLE_DEBUG -DABC) <span class="comment"># 参数之间用空格分隔</span></span><br></pre></td></tr></table></figure><h2 id="实战">实战</h2><p>在实践之前，先看份去年写的CMakeList.txt，截取部分。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 打印CMake模块路径</span><br><span class="line"><span class="built_in">message</span>(&quot;CMake module path: $&#123;CMAKE_MODULE_PATH&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 设置CMake的最低版本要求为<span class="number">2.8</span></span><br><span class="line"><span class="built_in">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"></span><br><span class="line"># 设置C++编译器的标志，启用C++<span class="number">11</span>标准</span><br><span class="line"><span class="built_in">SET</span>(CMAKE_CXX_FLAGS &quot;-std=c++<span class="number">11</span>&quot;)</span><br><span class="line"></span><br><span class="line"># 添加编译选项，启用-Wformat警告</span><br><span class="line"><span class="built_in">add_compile_options</span>(-Wformat)</span><br><span class="line"></span><br><span class="line"># 设置项目名称为&quot;task&quot;</span><br><span class="line"><span class="built_in">project</span>(task)</span><br><span class="line"></span><br><span class="line"># 设置OpenCV的路径，并查找OpenCV库</span><br><span class="line"><span class="built_in">set</span>(OpenCV_DIR &quot;/usr/local/include/opencv2&quot;)</span><br><span class="line"><span class="built_in">find_package</span>( OpenCV <span class="number">2</span>  REQUIRED )</span><br><span class="line"></span><br><span class="line"># 将OpenCV的头文件目录添加到包含目录中</span><br><span class="line"><span class="built_in">include_directories</span>($&#123;OpenCV_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"># 查找libtiff库，并将其头文件目录添加到包含目录中</span><br><span class="line"><span class="built_in">find_package</span>(TIFF REQUIRED)</span><br><span class="line"><span class="built_in">include_directories</span>($&#123;TIFF_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"># 设置libgdal库的路径，并将其头文件目录添加到包含目录中</span><br><span class="line"><span class="built_in">set</span>(LIBGDAL_INCLUDE_DIR &quot;/usr/local/include&quot;)</span><br><span class="line"><span class="built_in">set</span>(LIBGDAL_LIBRARY &quot;/usr/local/lib64/libgdal.so&quot;)</span><br><span class="line"><span class="built_in">include_directories</span>($&#123;LIBGDAL_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"># 将libgdal库添加到链接库中</span><br><span class="line"><span class="built_in">link_libraries</span>($&#123;LIBGDAL_LIBRARY&#125;)</span><br><span class="line"></span><br><span class="line"># 添加一个名为&quot;task&quot;的可执行文件目标，设置其源文件</span><br><span class="line"><span class="built_in">add_executable</span>( </span><br><span class="line">    task </span><br><span class="line">    src/main.cpp</span><br><span class="line">    include/XmlParse/tinyxml.cpp</span><br><span class="line">    include/XmlParse/tinyxmlparser.cpp</span><br><span class="line">    include/XmlParse/tinyxmlerror.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 将OpenCV库、libtiff库和libraw库添加到&quot;task&quot;目标的链接库中</span><br><span class="line"><span class="built_in">target_link_libraries</span>(task  $&#123;OpenCV_LIBS&#125; $&#123;TIFF_LIBRARIES&#125; $&#123;LIBRAW_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"># 将pthread库添加到&quot;task&quot;目标的链接库中</span><br><span class="line"><span class="built_in">target_link_libraries</span>(task  -lpthread)</span><br><span class="line"></span><br><span class="line"># 将openmp库添加到&quot;task&quot;目标的链接库中</span><br><span class="line"><span class="built_in">target_link_libraries</span>(task  -fopenmp)</span><br></pre></td></tr></table></figure><h3 id="单个源文件">单个源文件</h3><p>(源代码所在目录：Demo1)</p><p>假设现在我们的项目中只有一个源文件<a href="https://link.zhihu.com/?target=http%3A//main.cc">http://main.cc</a>，该程序的用途是计算一个数的指数幂。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * power - Calculate the power of number.</span><br><span class="line"> * @param base: Base value.</span><br><span class="line"> * @param exponent: Exponent value.</span><br><span class="line"> *</span><br><span class="line"> * @return base raised to the power exponent.</span><br><span class="line"> */</span><br><span class="line">double power(double base, int exponent)</span><br><span class="line">&#123;</span><br><span class="line">    int result = base;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    if (exponent == 0) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(i = 1; i &lt; exponent; ++i)&#123;</span><br><span class="line">        result = result * base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if (argc &lt; 3)&#123;</span><br><span class="line">        printf(&quot;Usage: %s base exponent \n&quot;, argv[0]);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    double base = atof(argv[1]);</span><br><span class="line">    int exponent = atoi(argv[2]);</span><br><span class="line">    double result = power(base, exponent);</span><br><span class="line">    printf(&quot;%g ^ %d is %g\n&quot;, base, exponent, result);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先编写 CMakeLists.txt 文件，并保存在与<a href="https://link.zhihu.com/?target=http%3A//mian.cc">http://mian.cc</a>源文件同个目录下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"></span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo1)</span><br><span class="line"></span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo main.cc)</span><br></pre></td></tr></table></figure><p>CMakeLists.txt 的语法比较简单，由命令、注释和空格组成，其中命令是不区分大小写的。符号 <code>#</code> 后面的内容被认为是注释。命令由命令名称、小括号和参数组成，参数之间使用空格进行间隔。</p><p>对于上面的 CMakeLists.txt 文件，依次出现了几个命令：</p><ol><li><code>cmake_minimum_required</code>：指定运行此配置文件所需的 CMake 的最低版本；</li><li><code>project</code>：参数值是 <code>Demo1</code>，该命令表示项目的名称是 <code>Demo1</code> 。</li><li><code>add_executable</code>： 将名为 <a href="http://main.cc">main.cc</a> 的源文件编译成一个名称为 Demo 的可执行文件。</li></ol><p>之后，在当前目录执行<code>cmake .</code>，得到 Makefile 后再使用<code>make</code>命令编译得到 Demo1 可执行文件。</p><h3 id="多个源文件">多个源文件</h3><p>(源代码所在目录Demo2)</p><p>上面的例子只有单个源文件。现在假如把<code>power</code>函数单独写进一个名为<code>MathFunctions.c</code>的源文件里，使得这个工程变成如下的形式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Demo2</span><br><span class="line">    |</span><br><span class="line">    +--- main.cc</span><br><span class="line">    |</span><br><span class="line">    +--- MathFunctions.cc</span><br><span class="line">    |</span><br><span class="line">    +--- MathFunctions.h</span><br></pre></td></tr></table></figure><p>这个时候，CMakeLists.txt 可以改成如下的形式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"></span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo2)</span><br><span class="line"></span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo main.cc MathFunctions.cc)</span><br></pre></td></tr></table></figure><p>唯一的改动只是在<code>add_executable</code>命令中增加了一个<code>MathFunctions.cc</code>源文件。这样写当然没什么问题，但是如果源文件很多，把所有源文件的名字都加进去将是一件烦人的工作。更省事的方法是使用<code>aux_source_directory</code>命令，该命令会查找指定目录下的所有源文件，然后将结果存进指定变量名。其语法如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</span><br></pre></td></tr></table></figure><p>因此，可以修改 CMakeLists.txt 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"></span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo2)</span><br><span class="line"></span><br><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo $&#123;DIR_SRCS&#125;)</span><br></pre></td></tr></table></figure><p>这样，CMake 会将当前目录所有源文件的文件名赋值给变量<code>DIR_SRCS</code>，再指示变量<code>DIR_SRCS</code>中的源文件需要编译成一个名称为 Demo 的可执行文件。</p><h3 id="多个目录，多个源文件">多个目录，多个源文件</h3><p>(源代码所在目录Demo3)</p><p>现在进一步将 MathFunctions.h 和<a href="https://link.zhihu.com/?target=http%3A//MathFunctions.cc">http://MathFunctions.cc</a>文件移动到 math 目录下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./Demo3</span><br><span class="line">    |</span><br><span class="line">    +--- main.cc</span><br><span class="line">    |</span><br><span class="line">    +--- math/</span><br><span class="line">          |</span><br><span class="line">          +--- MathFunctions.cc</span><br><span class="line">          |</span><br><span class="line">          +--- MathFunctions.h</span><br></pre></td></tr></table></figure><p>对于这种情况，需要分别在项目根目录 Demo3 和 math 目录里各编写一个 CMakeLists.txt 文件。为了方便，我们可以先将 math 目录里的文件编译成静态库再由 main 函数调用。</p><p>根目录中的 CMakeLists.txt ：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"></span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo3)</span><br><span class="line"></span><br><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"># 添加 math 子目录</span><br><span class="line">add_subdirectory(math)</span><br><span class="line"></span><br><span class="line"># 指定生成目标 </span><br><span class="line">add_executable(Demo $&#123;DIR_SRCS&#125;)</span><br><span class="line"></span><br><span class="line"># 添加链接库</span><br><span class="line">target_link_libraries(Demo MathFunctions)</span><br></pre></td></tr></table></figure><p>该文件添加了下面的内容: 第3行，使用命令 <code>add_subdirectory</code> 指明本项目包含一个子目录 math，这样 math 目录下的 CMakeLists.txt 文件和源代码也会被处理 。第6行，使用命令 <code>target_link_libraries</code> 指明可执行文件 main 需要连接一个名为 MathFunctions 的链接库 。</p><p>子目录中的 CMakeLists.txt：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_LIB_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line"># 生成链接库</span><br><span class="line">add_library (MathFunctions $&#123;DIR_LIB_SRCS&#125;)</span><br></pre></td></tr></table></figure><p>在该文件中使用命令<code>add_library</code>将 src 目录中的源文件编译为静态链接库。</p><h2 id="资料">资料</h2><ul><li><a href="https://gavinliu6.github.io/CMake-Practice-zh-CN/#/acquaintance">cmake实战</a></li><li><a href="https://zhuanlan.zhihu.com/p/661284252">CMake构建大型C_C++项目：跨平台设计与高级应用</a></li><li><a href="https://blog.csdn.net/afei__/article/details/81201039">CMakeLists.txt 语法介绍与实例演练</a></li></ul>]]></content>
    
    
    <summary type="html">CMake快速上手</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者模型</title>
    <link href="https://penge666.github.io/posts/161dcf21.html"/>
    <id>https://penge666.github.io/posts/161dcf21.html</id>
    <published>2024-05-06T13:47:26.000Z</published>
    <updated>2024-05-06T13:49:06.703Z</updated>
    
    <content type="html"><![CDATA[<p>这个仓库主记录了生产者和消费者模式中经典的案例。</p><h1 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式</h1><p>完整代码见仓库：<a href="https://github.com/Penge666/Producer-Consumer-Pattern">https://github.com/Penge666/Producer-Consumer-Pattern</a></p><p><strong>1.CPU轮询等待版单生产者单消费者：</strong>（basic.cpp）</p><p>该版本使用了简单的轮询机制，生产者不断地检查消费者是否已经消费完数据。这种模式简单直接，但效率较低，因为生产者在没有数据时仍然在忙等待。</p><p><strong>实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Consumer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">           data_ = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">           cout &lt;&lt; <span class="string">&quot;生产data:&quot;</span> &lt;&lt; data_ &lt;&lt; endl;</span><br><span class="line">           ready_ = <span class="literal">true</span>;</span><br><span class="line">           lock.<span class="built_in">unlock</span>();</span><br><span class="line">           <span class="keyword">while</span> (ready_)</span><br><span class="line">           &#123;</span><br><span class="line">               this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">while</span> (!ready_)</span><br><span class="line">           &#123;</span><br><span class="line">               this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">           cout &lt;&lt; <span class="string">&quot;消费data:&quot;</span> &lt;&lt; data_ &lt;&lt; endl;</span><br><span class="line">           ready_ = <span class="literal">false</span>;</span><br><span class="line">           lock.<span class="built_in">unlock</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>2.等待通知版单生产者单消费者：</strong>（single.cpp）</p><p>该版本引入了等待通知机制，生产者在没有数据时会等待消费者的通知。这种模式避免了忙等待，提高了效率，同时减少了资源消耗。</p><p><strong>实现</strong></p><p>在这个版本我们借助condition_variable，完成多线程之间的同步操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::condition_variable cv_;</span><br><span class="line"><span class="type">bool</span> ready_&#123;<span class="literal">false</span>&#125;;</span><br></pre></td></tr></table></figure><p>生产者会不断生成一个随机数并将其存储在 data<em> 变量中，然后将 ready</em> 标志设置为 true，表示有可用的数据。接着，它通知等待的消费者线程，然后自己等待消费者线程处理完数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv_.<span class="built_in">wait</span>(ul, [<span class="keyword">this</span>]() &#123; <span class="keyword">return</span> !ready_; &#125;);</span><br></pre></td></tr></table></figure><p>消费者将会在一个无限循环中等待生产者通知数据的可用性。当 ready<em> 标志为 true 时，它会从 data</em> 变量中获取数据并进行处理，然后将 ready_ 标志设置为 false，表示数据已经被消费。接着，它通知生产者线程，然后自己等待生产者线程生成新的数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv_.<span class="built_in">wait</span>(ul, [<span class="keyword">this</span>]() &#123; <span class="keyword">return</span> ready_; &#125;);</span><br></pre></td></tr></table></figure><p><strong>3.等待通知版单生产者多消费者：</strong>（mutiple.cpp）</p><p>在这个版本中，引入了多个消费者，它们共享生产者的数据。生产者在产生数据后，通知所有消费者进行处理。</p><p><strong>实现</strong></p><p>前面的版本中，我们还是单生产，单个消费者，如何做到多个消费者抢占消费？</p><p>此时需要引入队列，我们将任务丢到队列中去，随后多个消费者进行消费即可，与上述等待条件不同点在于队列的状态。</p><p>对于生产者：如果队列大小未达到 max<em>queue_size</em> 的限制，如果队列已满，则生产者线程将等待消费者线程从队列中取走一些数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv_.<span class="built_in">wait</span>(ul, [<span class="keyword">this</span>]() &#123; <span class="keyword">return</span> queue_.<span class="built_in">size</span>() &lt; max_queue_size_; &#125;); </span><br></pre></td></tr></table></figure><p>对于消费者：队列有数据就消费，否则等待。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv_.<span class="built_in">wait</span>(ul, [<span class="keyword">this</span>]() &#123; <span class="keyword">return</span> !queue_.<span class="built_in">empty</span>(); &#125;);</span><br></pre></td></tr></table></figure><p><strong>4.等待通知版多生产者多消费者：</strong>（mutiple_mutiple.cpp）</p><p>这个版本支持多个生产者和多个消费者，生产者之间和消费者之间共享数据。生产者在产生数据后，通知所有消费者进行处理。</p><p><strong>实现</strong></p><p>对于这个版本比较简单，基于第三个版本继续优化，创建n个生产者线程即可。</p><p><strong>5.单生产者多消费者并行版：</strong>（mutiple_sync.cpp）</p><p>在这个版本中，引入了并行处理机制，多个消费者可以同时处理数据。生产者产生数据后，多个消费者并行处理，提高了整体处理速度。</p><p><strong>实现</strong></p><p>对于以上版本有个比较大的问题，当生产者生产的数据到达上限时，消费者此时在消费，而生产者并没有动起来，它在等待消费者消费完才能进行，如何让生产者与消费者同时运转呢？</p><p>改进点在于使用多个cv，来回切换通知。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::condition_variable cv_producer_;</span><br><span class="line">std::condition_variable cv_consumer_;</span><br></pre></td></tr></table></figure><p><strong>6.多生产者多消费者并行版：</strong>（mutiple_mutiple_sync.cpp）</p><p>这个版本支持多个生产者和多个消费者，并且允许并行处理。多个生产者并行产生数据，多个消费者并行处理数据，提高了整体并发能力。</p><p><strong>实现</strong></p><p>基于5进行改造，支持多个生产者即可。</p><p><strong>7.支持Lambda回调的优雅停止版：</strong>（mutiple_mutiple_stop.cpp）</p><p>在这个版本中，引入了Lambda回调函数，用于优雅地停止并发处理。可以通过调用回调函数来停止生产者和消费者的处理，并进行清理工作。</p><p><strong>实现</strong></p><p>简单来说，就是加回调函数</p><p>最后运行【比较简朴~】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++  mutiple_mutiple_stop.cpp -o mutiple_mutiple_stop -lpthread</span><br></pre></td></tr></table></figure><p>本文字学习自：<a href="https://github.com/LHCyGan/Concurrent_Programming">https://github.com/LHCyGan/Concurrent_Programming</a></p>]]></content>
    
    
    <summary type="html">Producer-Consumer Pattern</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Mutex</title>
    <link href="https://penge666.github.io/posts/c07087b4.html"/>
    <id>https://penge666.github.io/posts/c07087b4.html</id>
    <published>2024-05-06T11:45:59.000Z</published>
    <updated>2024-05-06T12:06:06.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>互斥锁在并发编程中经常碰到，因此对其需要有个更加深入的理解。这篇博客将使用信号量实现的互斥锁。</p><p>简易互斥锁（SimpleMutex）是一个基于原子变量和信号量的互斥锁实现，用于保护并管理多线程环境下的共享资源访问。它提供了一种简单而有效的方式来确保在多线程并发访问时，只有一个线程可以同时访问受保护的资源，从而避免数据竞争和不一致性。基于 POSIX 标准的信号量库实现，包含 Catch2 单元测试，附带了基于 Catch2 框架的单元测试，用于验证互斥锁的正确性和稳定性，使用bazel编译，google编码规范。</p><p>其中涉及C++知识（RAII、信号量、lock_guard、线程安全编程）</p><h2 id="前置知识">前置知识</h2><blockquote><p><strong>信号量API</strong></p></blockquote><ul><li><p>信号量的类型：<code>sem_t</code></p></li><li><p><code>int sem_init(sem_t *sem, int pshared, unsigned int value);</code></p><ul><li>功能：初始化信号量</li><li>参数<ul><li><code>sem</code>：信号量变量的地址</li><li><code>pshared</code>：0 用在线程间 ，非0 用在进程间</li><li><code>value </code>：信号量中的值，代表容器大小</li></ul></li></ul></li><li><p><code>int sem_destroy(sem_t *sem);</code></p></li><li><p>功能：释放资源</p></li><li><p><code>int sem_wait(sem_t *sem);</code></p></li><li><p>功能：对信号量加锁，调用一次对信号量的值-1，如果值为0，就阻塞</p></li><li><p><code>int sem_trywait(sem_t *sem);</code></p></li><li><p><code>int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);</code></p></li><li><p>int sem_post(sem_t *sem);</p><ul><li>功能：对信号量解锁，调用一次对信号量的值+1</li></ul></li><li><p><code>int sem_getvalue(sem_t *sem, int *sval);</code></p></li></ul><h2 id="核心逻辑">核心逻辑</h2><blockquote><p><strong>Semaphore类</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Semaphore</span>(<span class="type">int</span> init_count = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(init_count &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sem_init</span>(&amp;sema_, <span class="number">0</span>, init_count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        rc = <span class="built_in">sem_wait</span>(&amp;sema_);</span><br><span class="line">    &#125; <span class="keyword">while</span> (rc == <span class="number">1</span> &amp;&amp; errno == EINTR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sem_post</span>(&amp;sema_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较核心就是以上函数，需要注意的是，这里信号量初始化设置成0是因为只处理需要等待的线程。</p><p>当需要等待的线程进入到wait函数中，sem_wait函数将检查sema是否大于0，如果没有，则等待，等待时该线程为阻塞状态。当其他线程调用post增强sem的值的时候,即大于0的时候，线程将解除阻塞， 解除阻塞后sem值会减去1。</p><p>sem_post 则是 用来增加信号量的值。</p><blockquote><p><strong>SimpleMutex 类</strong></p></blockquote><p><strong>lock() 和 unlock()</strong></p><p>SimpleMutex 类包含一个名为 count_ 的 std::atomic 变量和一个名为 sema_ 的 Semaphore 对象。</p><p>在构造函数中，count_ 被初始化为 0。</p><ul><li>lock() 函数用于获取互斥锁。它使用 fetch_add 操作和 std::memory_order_acquire 参数对 count_ 进行原子增加，并获取锁。 如果在增加之前 count_ 的值大于 0，说明互斥锁已经被其他线程锁定。在这种情况下，函数调用 sema_.wait() 来阻塞当前线程，直到信号量被发信号，表示互斥锁可用。</li><li>unlock() 函数用于释放互斥锁。它使用 fetch_sub 操作和 std::memory_order_release 参数对 count_ 进行原子减少，并释放锁。 如果减少之前的 count_ 值仍大于 1，说明其他线程正在等待互斥锁。在这种情况下，函数调用 sema_.signal() 发信号给信号量，允许一个等待的线程获取互斥锁。</li></ul><p>通过结合原子变量 count_ 和信号量 sema_，该实现确保等待获取互斥锁的线程能够高效地阻塞，直到当前持有者释放锁。</p><p>Note:</p><h2 id="代码">代码</h2><p>代码仓库：<a href="https://github.com/Penge666/Mutex.git">https://github.com/Penge666/Mutex.git</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ src/mutex/test.cpp -std=c++11 -Ithird/catch2/ -o <span class="built_in">test</span> -lpthread</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">基于信号量实现的互斥锁</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>muduo网络库</title>
    <link href="https://penge666.github.io/posts/d0543761.html"/>
    <id>https://penge666.github.io/posts/d0543761.html</id>
    <published>2024-05-03T05:14:14.000Z</published>
    <updated>2024-05-04T03:42:31.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>网络编程是一个比较难码的模块，也是相对其他编程进阶的模块，特别是各种回调函数的理解调用以及其中会遇到各式各样难以解决的Bug。</p><p>借着学习陈硕大神muduo库的机会阅读了这本经典的网络编程教材《Linux多线程服务端编程》，这本也是这学期一直想学习的一本书，PS：就像研一下一直想学习Mit6.824一样。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240502214205866.png" alt="image-20240502214205866"></p><p>开始整体部分！</p><p>muduo网络库是Multi-Reactor架构，具体可以分为3个部分：</p><ul><li>网络相关模块：如Socket、InetAddress、TcpConnection、Acceptor、TcpServer等</li><li>事件循环相关模块：如EventLoop、Channel、Poller、EPollPoller等</li><li>线程相关模块：如Thread、EventLoopThread、EventLoopThreadPool等</li><li>基础模块：如用户态缓冲区Buffer、时间戳Timestamp、日志类Logger等</li></ul><p>本文参考自：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/495016351">万字长文梳理Muduo库核心代码及优秀编程细节思想剖析</a></li><li><a href="https://www.cnblogs.com/S1mpleBug/p/16712003.html#231-%E5%85%A8%E5%B1%80%E6%A6%82%E8%A7%88pollerchannel%E5%92%8Ceventloop%E5%9C%A8%E6%95%B4%E4%B8%AAmulti-reactor%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2">长文梳理muduo网络库核心代码、剖析优秀编程细节</a></li><li><a href="https://www.cnblogs.com/fortunely/p/15998209.html">muduo笔记</a></li></ul><h2 id="原理篇">原理篇</h2><h3 id="Multi-Reactor">Multi-Reactor</h3><p>Muduo库是基于Reactor模式实现的TCP网络编程库。</p><p>Multi-Reactor模型如下所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240502220126199.png" alt="image-20240502220126199"></p><h3 id="事件循环模块">事件循环模块</h3><p>muduo库基于三个关键组件来实现一个reactor，这个reactor可以持续地监听一组文件描述符（fd），并根据每个fd上发生的事件来调用相应的处理函数。这三个核心组件包括Channel类、Poller/EpollPoller类以及EventLoop类。</p><p>可以先看下整体的架构，先有个整体的了解。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240502224744115.png" alt="image-20240502224744115"></p><h4 id="Channel类">Channel类</h4><blockquote><p><strong>概述</strong></p></blockquote><p>在TCP网络编程中，要想使用IO多路复用来监听某个文件描述符（fd），需要通过epoll_ctl将这个fd及其关心的事件注册到IO多路复用模块（也可以称之为事件监听器）上。当事件监听器检测到该fd发生了某个事件时，它会返回一个包含发生事件的fd集合，以及每个fd都发生了什么事件。</p><p>Channel类就是这样一个封装，它包含了一个文件描述符（fd），这个fd关心的事件，以及事件监听器实际检测到的事件。除此之外，Channel类还提供了一些方法，允许你设置这个fd的关心的事件，将这个fd及其关心的事件注册到事件监听器中或者从事件监听器中移除，以及保存这个fd的每种事件所对应的处理函数。</p><blockquote><p><strong>成员变量</strong></p></blockquote><ul><li>int fd_：Channel对象关心的文件描述符。</li><li>int events_：fd感兴趣的事件类型集合。</li><li>int revents_：代表事件监听器实际监听到该fd发生的事件类型集合。当事件监听器监听到一个fd发生了什么事件，通过Channel::set_revents()函数来设置revents值。</li><li>EventLoop* loop：表示当前的Channel是在哪个loop中。</li><li>read_callback_ 、write_callback_、close_callback_、error_callback_：这些是std::function类型，代表着这个Channel为这个文件描述符保存的各事件类型发生时的处理函数。比如这个fd发生了可读事件，需要执行可读事件处理函数，Channel类都替你保管好了这些可调用函数。</li></ul><blockquote><p><strong>成员函数</strong></p></blockquote><p>成员函数的设计是根据成员变量和这个类的功能设计，在设计之前我们自己也可以先想想作者为什么这么设计。</p><ul><li><p>向Channel对象注册各类事件的处理函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setReadCallback</span><span class="params">(ReadEventCallback cb)</span> </span>&#123;read_callback_ = std::<span class="built_in">move</span>(cb);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWriteCallback</span><span class="params">(Eventcallback cb)</span> </span>&#123;write_callback_ = std::<span class="built_in">move</span>(cb);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCloseCallback</span><span class="params">(EventCallback cb)</span> </span>&#123;close_callback_ = std::<span class="built_in">move</span>(cb);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setErrorCallback</span><span class="params">(EventCallback cb)</span> </span>&#123;error_callback_ = std::<span class="built_in">move</span>(cb);&#125; </span><br></pre></td></tr></table></figure><p>简单来说，就是事件监听器监听到描述符发生的事件的时候，相应的处理函数来处理。处理函数保存在Channel类中，这样调用也比较方便。第二点所示。</p></li><li><p>根据poller通知的channel发生的具体事件， 由channel负责调用具体的回调操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Channel::handleEventWithGuard</span><span class="params">(Timestamp receiveTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">LOG_INFO</span>(<span class="string">&quot;channel handleEvent revents:%d\n&quot;</span>, revents_);</span><br><span class="line">    <span class="keyword">if</span> ((revents_ &amp; EPOLLHUP) &amp;&amp; !(revents_ &amp; EPOLLIN))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeCallback_)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">closeCallback_</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用epoll_wait()后，可以得知事件监听器上哪些Channel（文件描述符）发生了哪些事件，事件发生后自然就要调用这些Channel对应的处理函数。</p></li><li><p>将这个文件描述符实际发生的事件封装进这个Channel中</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">set_revents</span><span class="params">(<span class="type">int</span> revt)</span> </span>&#123;revents_ = revt;&#125;</span><br></pre></td></tr></table></figure><p>这个函数是在EPollPoller::fillActiveChannels调用，即获取活跃的连接的时候设置给Channel。</p></li><li><p>将Channel中的文件描述符及其感兴趣事件注册事件监听器上或从事件监听器上移除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置完成后会跟新epoll中的fd为当前需要监听[设置]的事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enableReading</span><span class="params">()</span> </span>&#123;events_ |= kReadEvent; <span class="built_in">upadte</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disableReading</span><span class="params">()</span> </span>&#123;events_ &amp;= ~kReadEvent; <span class="built_in">update</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enableWriting</span><span class="params">()</span> </span>&#123;events_ |= kWriteEvent; <span class="built_in">update</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disableWriting</span><span class="params">()</span> </span>&#123;events_ &amp;= ~kWriteEvent; <span class="built_in">update</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disableAll</span><span class="params">()</span> </span>&#123;events_ |= kNonEvent; <span class="built_in">update</span>();&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void Channel::update()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    // 通过channel所属的EventLoop，调用poller的相应方法，注册fd的events事件</span></span><br><span class="line"><span class="comment">    loop_-&gt;updateChannel(this);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这个update的调用过程是Channel=&gt;EventLoop=&gt;Poller。update本质上就是调用了epoll_ctl()。</p></li></ul><h4 id="EpollPoller类">EpollPoller类</h4><blockquote><p><strong>概述</strong></p></blockquote><p>负责监听文件描述符事件是否触发以及返回发生事件的文件描述符以及具体事件的模块就是Poller。一个Poller对象对应一个事件监听器。其中，1个reactor中有1个Poller，也就是说有多少reactor就有多少Poller。</p><p>目前，项目中muduo库只支持epoll。</p><p>Poller是个抽象虚类，由EpollPoller和PollPoller继承实现，与监听文件描述符和返回监听结果的具体方法也基本上是在这两个派生类中实现。EpollPoller就是封装了用epoll方法实现的与事件监听有关的各种方法，PollPoller就是封装了poll方法实现的与事件监听有关的各种方法。</p><blockquote><p><strong>成员变量</strong></p></blockquote><p>这里将Poller/EpollPoller成员变量放在一起。</p><ul><li>epollfd_：用epoll_create方法返回的epoll句柄。</li><li>channels_：这个变量是std::unordered_map&lt;int, Channel*&gt;类型，负责记录 文件描述符 —&gt; Channel的映射，也帮忙保管所有注册在这个Poller上的Channel。</li><li>ownerLoop_：表示当前epollfd在哪个loop。</li></ul><blockquote><p><strong>成员函数</strong></p></blockquote><ul><li><p>获取监听发生事件的描述符的Channel集合</p><p>核心是以下2个函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TimeStamp <span class="title">poll</span><span class="params">(<span class="type">int</span> timeoutMs, ChannelList *activeChannels)</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fillActiveChannels</span><span class="params">(<span class="type">int</span> numEvents, ChannelList *activeChannels)</span></span></span><br></pre></td></tr></table></figure><p>具体代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Timestamp <span class="title">EPollPoller::poll</span><span class="params">(<span class="type">int</span> timeoutMs, ChannelList *activeChannels)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// events_每次传入都是初始化过的，也就说里面没有数据，等待epoll_wait获取数据。</span></span><br><span class="line">    <span class="type">int</span> numEvents = ::<span class="built_in">epoll_wait</span>(epollfd_, &amp;*events_.<span class="built_in">begin</span>(), <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(events_.<span class="built_in">size</span>()), timeoutMs);</span><br><span class="line">    <span class="built_in">fillActiveChannels</span>(numEvents, activeChannels);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 填写活跃的连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EPollPoller::fillActiveChannels</span><span class="params">(<span class="type">int</span> numEvents, ChannelList *activeChannels)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numEvents; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Channel *channel = <span class="built_in">static_cast</span>&lt;Channel *&gt;(events_[i].data.ptr);</span><br><span class="line">        channel-&gt;<span class="built_in">set_revents</span>(events_[i].events);</span><br><span class="line">        activeChannels-&gt;<span class="built_in">push_back</span>(channel); <span class="comment">// EventLoop就拿到了它的poller给它返回的所有发生事件的channel列表了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个问题：fillActiveChannels中遍历numEvents为什么就能得到channel对象？</p><p>这是因为在将EPollPoller::update中（也就是在将文件描述符交给epoll监听的时候，将channel对象也放进去便于传递方便后期使用）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> <span class="title class_">epoll_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *ptr;</span><br><span class="line">  <span class="type">int</span> fd;</span><br><span class="line">  <span class="type">uint32_t</span> u32;</span><br><span class="line">  <span class="type">uint64_t</span> u64;</span><br><span class="line">&#125; <span class="type">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">epoll_event</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> events;<span class="comment">/* Epoll events */</span></span><br><span class="line">  <span class="type">epoll_data_t</span> data;<span class="comment">/* User data variable */</span></span><br><span class="line">&#125; __EPOLL_PACKED;</span><br></pre></td></tr></table></figure></li><li><p>更新文件描述符监听的事件</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateChannel</span><span class="params">(Channel *channel)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeChannel</span><span class="params">(Channel *channel)</span> <span class="keyword">override</span></span>;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关系：channel update remove =&gt; EventLoop updateChannel removeChannel =&gt; Poller updateChannel removeChannel</span></span><br><span class="line"><span class="comment">// update</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EPollPoller::updateChannel</span><span class="params">(Channel *channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> index = channel-&gt;<span class="built_in">index</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == kNew || index == kDeleted)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == kNew)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> fd = channel-&gt;<span class="built_in">fd</span>();</span><br><span class="line">            channels_[fd] = channel;</span><br><span class="line">        &#125;</span><br><span class="line">        channel-&gt;<span class="built_in">set_index</span>(kAdded);</span><br><span class="line">        <span class="built_in">update</span>(EPOLL_CTL_ADD, channel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// channel已经在poller上注册过了</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新channel通道 epoll_ctl add/mod/del</span></span><br><span class="line"><span class="type">void</span> EPollPoller::<span class="built_in">update</span>(<span class="type">int</span> operation, Channel *channel)</span><br><span class="line">&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;event, <span class="keyword">sizeof</span> event);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = channel-&gt;<span class="built_in">fd</span>();</span><br><span class="line"></span><br><span class="line">    event.events = channel-&gt;<span class="built_in">events</span>();</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.data.ptr = channel;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (::<span class="built_in">epoll_ctl</span>(epollfd_, operation, fd, &amp;event) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的代码比较清楚了，调用updateChannel其中再调用update。本质还是调用epoll_ctl，只不过层层封装适合框架。</p></li></ul><h4 id="EventLoop类">EventLoop类</h4><p>EventLoop类就是将Channel类和EpollPoller类进行统一管理。</p><p>EventLoop就是负责实现**“循环”<strong>，负责驱动</strong>“循环”**的重要模块。</p><p>这里循环也就是while循环不断检测是否存在监听事件的发生，然后使用传入的回调函数处理对应的事件。</p><p>可以看下下面这张图</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240502224744115.png" alt="image-20240502224744115"></p><ul><li><p>开启事件循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    looping_ = <span class="literal">true</span>;</span><br><span class="line">    quit_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!quit_)</span><br><span class="line">    &#123;</span><br><span class="line">        activeChannels_.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="comment">// 监听两类fd   一种是client的fd，一种wakeupfd</span></span><br><span class="line">        pollReturnTime_ = poller_-&gt;<span class="built_in">poll</span>(kPollTimeMs, &amp;activeChannels_);</span><br><span class="line">        <span class="keyword">for</span> (Channel *channel : activeChannels_)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Poller监听哪些channel发生事件了，然后上报给EventLoop，通知channel处理相应的事件</span></span><br><span class="line">            channel-&gt;<span class="built_in">handleEvent</span>(pollReturnTime_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行当前EventLoop事件循环需要处理的回调操作</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * IO线程 mainLoop accept fd《=channel subloop</span></span><br><span class="line"><span class="comment">         * mainLoop 事先注册一个回调cb（需要subloop来执行）    wakeup subloop后，执行下面的方法，执行之前mainloop注册的cb操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">doPendingFunctors</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    looping_ = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------执行回调----------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::doPendingFunctors</span><span class="params">()</span> <span class="comment">// 执行回调</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;Functor&gt; functors;</span><br><span class="line">    callingPendingFunctors_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        functors.<span class="built_in">swap</span>(pendingFunctors_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Functor &amp;functor : functors)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">functor</span>(); <span class="comment">// 执行当前loop需要执行的回调操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    callingPendingFunctors_ = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，刚开始的时候对应为什么还会执行doPendingFunctors有点迷惑？这里给出我的理解：用于loop之间通信使用，比如：mainloop要将客户端交给一个loop处理请求。</p></li><li><p>子loop唤醒</p><p>接着上面的问题，当主loop要将连接的客户端交给一个subloop子loop监听处理，但是子loop怎么唤醒呢？</p><p>这里muduo库是先创建一个wakeup描述符，专门用于唤醒描述符，加入到epoll中监听。那么对于唤醒子loop的方法只用往wakeup写入即可，当epoll监听到写事件的时候，就会调用wakeup之前设置的事件发生处理函数进行处理（也就将写事件写入的读出来）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::handleRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> one = <span class="number">1</span>;</span><br><span class="line">    <span class="type">ssize_t</span> n = <span class="built_in">read</span>(wakeupFd_, &amp;one, <span class="keyword">sizeof</span> one);</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="keyword">sizeof</span> one)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;EventLoop::handleRead() reads %lu bytes instead of 8&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来唤醒loop所在的线程的  向wakeupfd_写一个数据，wakeupChannel就发生读事件，当前loop线程就会被唤醒</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> one = <span class="number">1</span>;</span><br><span class="line">    <span class="type">ssize_t</span> n = <span class="built_in">write</span>(wakeupFd_, &amp;one, <span class="keyword">sizeof</span> one);</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="keyword">sizeof</span> one)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;EventLoop::wakeup() writes %lu bytes instead of 8 \n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当多线程的情况如何正确调用函数呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::quit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    quit_ = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 如果是在其它线程中，调用的quit   在一个subloop(woker)中，调用了mainLoop(IO)的quit</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isInLoopThread</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">wakeup</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在当前loop中执行cb</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::runInLoop</span><span class="params">(Functor cb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isInLoopThread</span>()) <span class="comment">// 在当前的loop线程中，执行cb</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 在非当前loop线程中执行cb , 就需要唤醒loop所在线程，执行cb</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queueInLoop</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>简单来说，1.loop在自己的线程中调用quit  2.在非loop的线程中，调用loop的quit。</p><ul><li><p>小注意点·</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在当前loop中执行cb</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::runInLoop</span><span class="params">(Functor cb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isInLoopThread</span>()) <span class="comment">// 在当前的loop线程中，执行cb</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 在非当前loop线程中执行cb , 就需要唤醒loop所在线程，执行cb</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queueInLoop</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把cb放入队列中，唤醒loop所在的线程，执行cb</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::queueInLoop</span><span class="params">(Functor cb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        pendingFunctors_.<span class="built_in">emplace_back</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唤醒相应的，需要执行上面回调操作的loop的线程了</span></span><br><span class="line">    <span class="comment">// || callingPendingFunctors_的意思是：当前loop正在执行回调，但是loop又有了新的回调</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isInLoopThread</span>() || callingPendingFunctors_)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">wakeup</span>(); <span class="comment">// 唤醒loop所在线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前的线程直接执行回调函数，但是如果不在的就需要唤醒下。</p><p>这里2个注意点：</p><p>1.怎么判断线程是否是当前线程？</p><p>isInLoopThread() const { return threadId_ ==  CurrentThread::tid(); }</p><p>muduo库设计中使用了这条语句判断。我们只要使用这个函数进行判断。【这个深入的话有点抽象】</p><p>2.(!isInLoopThread() || callingPendingFunctors_)</p><p>如果不在当前线程，唤醒比较好理解。还有一种情况需要唤醒是正在执行回调函数，如果不唤醒，那么这个回调函数就不知道要什么时候才能执行，也可能不执行。因此需要唤醒一下。</p></li><li><p>其他</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventLoop的方法 =》 Poller的方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::updateChannel</span><span class="params">(Channel *channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    poller_-&gt;<span class="built_in">updateChannel</span>(channel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoop::removeChannel</span><span class="params">(Channel *channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    poller_-&gt;<span class="built_in">removeChannel</span>(channel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EventLoop::hasChannel</span><span class="params">(Channel *channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> poller_-&gt;<span class="built_in">hasChannel</span>(channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个点在Channel调用过程中已经说明。</p></li></ul><h3 id="线程模块">线程模块</h3><p>这部分体现了One loop one thread的思想，也是muduo的核心！</p><h4 id="Thread类">Thread类</h4><p>Thread类主要是创建线程，然后执行相应的回调函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> : noncopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> ThreadFunc = std::function&lt;<span class="built_in">void</span>()&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Thread</span><span class="params">(ThreadFunc, <span class="type">const</span> std::string &amp;name = std::string())</span></span>;</span><br><span class="line">    ~<span class="built_in">Thread</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">started</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> started_; &#125;</span><br><span class="line">    <span class="function"><span class="type">pid_t</span> <span class="title">tid</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> tid_; &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string &amp;<span class="title">name</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> name_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">numCreated</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> numCreated_; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDefaultName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> started_;</span><br><span class="line">    <span class="type">bool</span> joined_;</span><br><span class="line">    std::shared_ptr&lt;std::thread&gt; thread_;</span><br><span class="line">    <span class="type">pid_t</span> tid_;</span><br><span class="line">    ThreadFunc func_;</span><br><span class="line">    std::string name_;</span><br><span class="line">    <span class="type">static</span> std::atomic_int numCreated_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="EventLoopThread类">EventLoopThread类</h4><p>这个类体现了One loop one thread的思想，就是一个线程负责一个loop循环。</p><p>这个类主要的工作是将eventloop和thread封装，正好一个loop一个线程。</p><blockquote><p><strong>成员函数</strong></p></blockquote><ul><li>EventLoop *loop_：对应的loop。</li><li>_ bool exiting_：是否退出。</li><li>Thread thread_：线程类。</li><li>std::mutex mutex_：互斥锁。</li><li><em>std::condition_variable cond</em>：条件变量。</li><li>ThreadInitCallback callback_：线程初始化回调函数。</li></ul><blockquote><p><strong>成员函数</strong></p></blockquote><ul><li>开启loop</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EventLoop *<span class="title">EventLoopThread::startLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    thread_.<span class="built_in">start</span>(); <span class="comment">// 启动底层的新线程</span></span><br><span class="line"></span><br><span class="line">    EventLoop *loop = <span class="literal">nullptr</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (loop_ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cond_.<span class="built_in">wait</span>(lock);</span><br><span class="line">        &#125;</span><br><span class="line">        loop = loop_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这个方法，实在单独的新线程里面运行的</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoopThread::threadFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 创建一个独立的eventloop，和上面的线程是一一对应的，one loop per thread</span></span><br><span class="line">    EventLoop loop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback_)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">callback_</span>(&amp;loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        loop_ = &amp;loop;</span><br><span class="line">        cond_.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loop.<span class="built_in">loop</span>(); <span class="comment">// EventLoop loop  =&gt; Poller.poll</span></span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    loop_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是创建loop，然后线程中不断的loop循环。</p><h4 id="EventLoopPoolThread类">EventLoopPoolThread类</h4><p>eventloop池，从最开始的架构图就可以知道，muduo有主Loop和若干个子loop。这些loop就是这个类产生的。</p><blockquote><p><strong>成员变量</strong></p></blockquote><ul><li>EventLoop *baseLoop_：这是主EventLoop，通常在主线程中运行。</li><li><em>std::string name</em>： EventLoopThreadPool的名称。</li><li>bool started _ ：表示EventLoopThreadPool是否已经启动。</li><li>int numThreads _ ： 线程池中线程的数量。</li><li>int next _ ： 下一个要被处理的线程的索引。</li><li>std::vector&lt; std::unique_ptr&lt; EventLoopThread&gt; &gt; threads_： 存储线程池中所有线程的容器，使用unique_ptr管理每个线程的生命周期。</li><li>_std::vector&lt;EventLoop *&gt; loops： 存储所有EventLoop的指针的容器，用于分发任务。</li></ul><blockquote><p><strong>成员函数</strong></p></blockquote><ul><li><p>启动线程池，并且在每个线程中创建并启动一个EventLoop。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoopThreadPool::start</span><span class="params">(<span class="type">const</span> ThreadInitCallback &amp;cb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    started_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numThreads_; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buf[name_.<span class="built_in">size</span>() + <span class="number">32</span>];</span><br><span class="line">        <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span> buf, <span class="string">&quot;%s%d&quot;</span>, name_.<span class="built_in">c_str</span>(), i);</span><br><span class="line">        EventLoopThread *t = <span class="keyword">new</span> <span class="built_in">EventLoopThread</span>(cb, buf);</span><br><span class="line">        threads_.<span class="built_in">push_back</span>(std::<span class="built_in">unique_ptr</span>&lt;EventLoopThread&gt;(t));</span><br><span class="line">        loops_.<span class="built_in">push_back</span>(t-&gt;<span class="built_in">startLoop</span>()); <span class="comment">// 底层创建线程，绑定一个新的EventLoop，并返回该loop的地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整个服务端只有一个线程，运行着baseloop</span></span><br><span class="line">    <span class="keyword">if</span> (numThreads_ == <span class="number">0</span> &amp;&amp; cb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cb</span>(baseLoop_);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主Loop_默认以轮询的方式分配channel给子loop，通过轮询挑选出一个子loop</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EventLoop* <span class="title">EventLoopThreadPool::getNextLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EventLoop *loop = baseLoop_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!loops_.<span class="built_in">empty</span>()) <span class="comment">// 通过轮询获取下一个处理事件的loop</span></span><br><span class="line">    &#123;</span><br><span class="line">        loop = loops_[next_];</span><br><span class="line">        ++next_;</span><br><span class="line">        <span class="keyword">if</span> (next_ &gt;= loops_.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            next_ = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="网络模块">网络模块</h3><h4 id="Acceptor类">Acceptor类</h4><blockquote><p><strong>概述</strong></p></blockquote><p>Accetpor封装了服务器专门用于监听是否有客户端连接的套接字fd以及相关处理方法。主要是对其他类的方法调用进行封装。</p><blockquote><p><strong>成员变量</strong></p></blockquote><ul><li>acceptSocket_：这个是服务器监听套接字的文件描述符。</li><li>acceptChannel_：这是个Channel类，把acceptSocket _ 及其感兴趣事件和事件对应的处理函数都封装进去。</li><li>EventLoop *loop：监听套接字的fd由哪个EventLoop负责循环监听以及处理相应事件，其实这个EventLoop就是main EventLoop。</li><li>newConnectionCallback_: TcpServer构造函数中将TcpServer::newConnection( )函数注册给了这个成员变量。这个TcpServer::newConnection函数的功能是公平的选择一个subEventLoop，并把已经接受的连接分发给这个subEventLoop。</li></ul><blockquote><p><strong>成员函数</strong></p></blockquote><ul><li><p>开启链接监听</p><p>listen( )：该函数底层调用了linux的函数listen( )，开启对acceptSocket _ 的监听同时将acceptChannel及其感兴趣事件（可读事件）注册到main EventLoop 的事件监听器上。换言之就是让main EventLoop事件监听器去监听acceptSocket_。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Acceptor::listen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listenning_ = <span class="literal">true</span>;</span><br><span class="line">    acceptSocket_.<span class="built_in">listen</span>(); <span class="comment">// listen</span></span><br><span class="line">    acceptChannel_.<span class="built_in">enableReading</span>(); <span class="comment">// acceptChannel_ =&gt; Poller</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>处理新用户连接</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Acceptor::<span class="built_in">Acceptor</span>(EventLoop *loop, <span class="type">const</span> InetAddress &amp;listenAddr, <span class="type">bool</span> reuseport)</span><br><span class="line">    : <span class="built_in">loop_</span>(loop)</span><br><span class="line">    , <span class="built_in">acceptSocket_</span>(<span class="built_in">createNonblocking</span>()) <span class="comment">// socket</span></span><br><span class="line">    , <span class="built_in">acceptChannel_</span>(loop, acceptSocket_.<span class="built_in">fd</span>())</span><br><span class="line">    , <span class="built_in">listenning_</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    acceptSocket_.<span class="built_in">setReuseAddr</span>(<span class="literal">true</span>);</span><br><span class="line">    acceptSocket_.<span class="built_in">setReusePort</span>(<span class="literal">true</span>);</span><br><span class="line">    acceptSocket_.<span class="built_in">bindAddress</span>(listenAddr); <span class="comment">// bind</span></span><br><span class="line">    <span class="comment">// TcpServer::start() Acceptor.listen  有新用户的连接，要执行一个回调（connfd=》channel=》subloop）</span></span><br><span class="line">    <span class="comment">// baseLoop =&gt; acceptChannel_(listenfd) =&gt; </span></span><br><span class="line">    acceptChannel_.<span class="built_in">setReadCallback</span>(std::<span class="built_in">bind</span>(&amp;Acceptor::handleRead, <span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// listenfd有事件发生了，就是有新用户连接了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Acceptor::handleRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InetAddress peerAddr;</span><br><span class="line">    <span class="type">int</span> connfd = acceptSocket_.<span class="built_in">accept</span>(&amp;peerAddr);</span><br><span class="line">    <span class="keyword">if</span> (connfd &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (newConnectionCallback_)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">newConnectionCallback_</span>(connfd, peerAddr); <span class="comment">// 轮询找到subLoop，唤醒，分发当前的新客户端的Channel</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ::<span class="built_in">close</span>(connfd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleRead( )：这是一个私有成员方法，这个方法是要注册到acceptChannel_ 上的，在构造accept对象的时候设置给acceptchannel对象， 同时handleRead( )方法内部还调用了成员变量newConnectionCallback_保存的函数。当main EventLoop监听到acceptChannel _ 上发生了可读事件时（新用户连接事件），就是调用这个handleRead( )方法。</p></li></ul><h4 id="Buffer类">Buffer类</h4><blockquote><p><strong>概述</strong></p></blockquote><p>Buffer类其实是封装了一个用户缓冲区，以及向这个缓冲区写数据读数据等一系列控制方法。</p><blockquote><p><strong>算法</strong></p></blockquote><p>这张图已经可以很好的说明这个类的具体功能。</p><p>可以和CS144 TCP协议中的buffer进行比对下。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240502231632156.png" alt="image-20240502231632156"></p><blockquote><p><strong>成员方法</strong></p></blockquote><ul><li>ssize_t Buffer::readFd(int fd, int* saveErrno);：客户端发来数据，readFd从该TCP接收缓冲区中将数据读出来并放到Buffer中。</li><li>ssize_t Buffer::writeFd(int fd, int* saveErrno);：服务端要向这条TCP连接发送数据，通过该方法将Buffer中的数据拷贝到TCP发送缓冲区中。</li></ul><p>巧妙的设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从fd上读取数据  Poller工作在LT模式</span></span><br><span class="line"><span class="comment"> * Buffer缓冲区是有大小的！ 但是从fd上读数据的时候，却不知道tcp数据最终的大小</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">Buffer::readFd</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span>* saveErrno)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> extrabuf[<span class="number">65536</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈上的内存空间  64K</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">iovec</span> vec[<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> writable = <span class="built_in">writableBytes</span>(); <span class="comment">// 这是Buffer底层缓冲区剩余的可写空间大小</span></span><br><span class="line">    vec[<span class="number">0</span>].iov_base = <span class="built_in">begin</span>() + writerIndex_;</span><br><span class="line">    vec[<span class="number">0</span>].iov_len = writable;</span><br><span class="line"></span><br><span class="line">    vec[<span class="number">1</span>].iov_base = extrabuf;</span><br><span class="line">    vec[<span class="number">1</span>].iov_len = <span class="keyword">sizeof</span> extrabuf;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> iovcnt = (writable &lt; <span class="keyword">sizeof</span> extrabuf) ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">ssize_t</span> n = ::<span class="built_in">readv</span>(fd, vec, iovcnt);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *saveErrno = errno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= writable) <span class="comment">// Buffer的可写缓冲区已经够存储读出来的数据了</span></span><br><span class="line">    &#123;</span><br><span class="line">        writerIndex_ += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// extrabuf里面也写入了数据 </span></span><br><span class="line">    &#123;</span><br><span class="line">        writerIndex_ = buffer_.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">append</span>(extrabuf, n - writable);  <span class="comment">// writerIndex_开始写 n - writable大小的数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：可以让用户一次性把所有TCP接收缓冲区的所有数据全部都读出来并放到用户自定义的缓冲区Buffer中。用户自定义缓冲区Buffer是有大小限制的，我们一开始不知道TCP接收缓冲区中的数据量有多少，如果一次性读出来会不会导致Buffer装不下而溢出。所以在readFd( )函数中会在栈上创建一个临时空间extrabuf，然后使用readv的分散读特性，将TCP缓冲区中的数据先拷贝到Buffer中，如果Buffer容量不够，就把剩余的数据都拷贝到extrabuf中，然后再调整Buffer的容量(动态扩容)，再把extrabuf的数据拷贝到Buffer中。当这个函数结束后，extrabuf也会被释放。另外extrabuf是在栈上开辟的空间，速度比在堆上开辟还要快。</p><h4 id="TcpConnection-TcpServer类">TcpConnection/TcpServer类</h4><p>这个类是集大成的类，需要清楚的知道具体的回调函数的调用。</p><p>TCP网络编程的本质是处理下面这几个事件：</p><ul><li>连接的建立。</li><li>连接的断开。（包括主动断开和被动断开）</li><li>消息到达，客户端连接文件描述符可读。</li><li>消息发送，向客户端连接文件描述符写数据。</li></ul><p>先来看看整体的图示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240503110725342.png" alt=""></p><h5 id="使用示例">使用示例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mymuduo/TcpServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mymuduo/Logger.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EchoServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">EchoServer</span>(EventLoop *loop,</span><br><span class="line">            <span class="type">const</span> InetAddress &amp;addr, </span><br><span class="line">            <span class="type">const</span> std::string &amp;name)</span><br><span class="line">        : <span class="built_in">server_</span>(loop, addr, name)</span><br><span class="line">        , <span class="built_in">loop_</span>(loop)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册回调函数</span></span><br><span class="line">        server_.<span class="built_in">setConnectionCallback</span>(</span><br><span class="line">            std::<span class="built_in">bind</span>(&amp;EchoServer::onConnection, <span class="keyword">this</span>, std::placeholders::_1)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        server_.<span class="built_in">setMessageCallback</span>(</span><br><span class="line">            std::<span class="built_in">bind</span>(&amp;EchoServer::onMessage, <span class="keyword">this</span>,</span><br><span class="line">                std::placeholders::_1, std::placeholders::_2, std::placeholders::_3)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置合适的loop线程数量 loopthread</span></span><br><span class="line">        server_.<span class="built_in">setThreadNum</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        server_.<span class="built_in">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 连接建立或者断开的回调</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn-&gt;<span class="built_in">connected</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_INFO</span>(<span class="string">&quot;Connection UP : %s&quot;</span>, conn-&gt;<span class="built_in">peerAddress</span>().<span class="built_in">toIpPort</span>().<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_INFO</span>(<span class="string">&quot;Connection DOWN : %s&quot;</span>, conn-&gt;<span class="built_in">peerAddress</span>().<span class="built_in">toIpPort</span>().<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可读写事件回调</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn,</span></span></span><br><span class="line"><span class="params"><span class="function">                Buffer *buf,</span></span></span><br><span class="line"><span class="params"><span class="function">                Timestamp time)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::string msg = buf-&gt;<span class="built_in">retrieveAllAsString</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(msg);</span><br><span class="line">        conn-&gt;<span class="built_in">shutdown</span>(); <span class="comment">// 写端   EPOLLHUP =》 closeCallback_</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EventLoop *loop_;</span><br><span class="line">    TcpServer server_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EventLoop loop;</span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(<span class="number">8000</span>)</span></span>;</span><br><span class="line">    <span class="function">EchoServer <span class="title">server</span><span class="params">(&amp;loop, addr, <span class="string">&quot;EchoServer-01&quot;</span>)</span></span>; <span class="comment">// Acceptor non-blocking listenfd  create bind </span></span><br><span class="line">    server.<span class="built_in">start</span>(); <span class="comment">// listen  loopthread  listenfd =&gt; acceptChannel =&gt; mainLoop =&gt;</span></span><br><span class="line">    loop.<span class="built_in">loop</span>(); <span class="comment">// 启动mainLoop的底层Poller</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note：using TcpConnectionPtr = std::shared_ptr&lt; TcpConnection &gt; ;</p><h5 id="连接建立">连接建立</h5><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240503105422549.png" alt="image-20240503105422549"></p><p>大体的整个流程如上图所示：</p><ul><li><p>TcpServer::TcpServer()<br>当我们创建一个TcpServer对象，即执行代码TcpServer server(&amp;loop, listenAddr);调用了TcpServer的构造函数，TcpServer构造函数最主要的就是类的内部实例化了一个Acceptor对象，并往这个Acceptor对象注册了一个回调函数TcpServer::newConnection()。</p></li><li><p>Acceptor::Acceptor()<br>当我们在TcpServer构造函数实例化Acceptor对象时，Acceptor的构造函数中实例化了一个Channel对象，即acceptChannel _ ，该Channel对象封装了服务器监听套接字文件描述符（尚未注册到main EventLoop的事件监听器上）。接着Acceptor构造函数将Acceptor::handleRead()方法注册进acceptChannel_ 中，这也意味着，日后如果事件监听器监听到acceptChannel_发生可读事件，将会调用Acceptor::handleRead()函数。</p><p>至此，TcpServer对象创建完毕，用户调用TcpServer::start()方法，开启TcpServer。主要就是调用Acceptor::listen()函数（底层是调用了linux的函数listen()）监听服务器套接字，以及将acceptChannel_注册到main EventLoop的事件监听器上监听它的可读事件（新用户连接事件）接着用户调用loop.loop()，即调用了EventLoop::loop()函数，该函数就会循环的获取事件监听器的监听结果，并且根据监听结果调用注册在事件监听器上的Channel对象的事件处理函数。</p></li><li><p>Acceptor::handleRead()<br>当程序如果执行到了这个函数里面，说明acceptChannel_ 发生可读事件，程序处理新客户连接请求。该函数首先调用了Linux的函数accept()接受新客户连接。接着调用了TcpServer::newConnection()函数，这个函数是在步骤1中注册给Acceptor并由成员变量newConnectionCallback_保存。</p></li><li><p>TcpServer::newConnection()<br>该函数的主要功能就是将建立好的连接进行封装（封装成TcpConnection对象），并使用选择算法公平的选择一个sub EventLoop，并调用TcpConnection::connectEstablished()将TcpConnection::channel_注册到刚刚选择的sub EventLoop上。</p></li></ul><h5 id="消息处理">消息处理</h5><p>SubEventLoop中的EventLoop::loop()函数内部会<strong>循环的执行</strong>上图中的步骤1和步骤2。步骤1就是调用Poller::poll()方法获取事件监听结果，这个事件监听结果是一个Channel集合，每一个Channel封装着 [一个fd] 及 [fd感兴趣的事件] 和 [事件监听器监听到该fd实际发生的事件]。步骤2就是调用每一个Channel的Channel::HandlerEvent方法。该方法会根据每一个Channel的感兴趣事件以及实际发生的事件调用提前注册在Channel内的对应的事件处理函数（readCallback_、writeCallback_、closeCallback_、errorCallback _  )。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240503105957775.png" alt="image-20240503105957775"></p><blockquote><p><strong>消息读取</strong></p></blockquote><p>readCallback_保存的函数其实是TcpConnection::handleRead( )，<strong>消息读取的处理逻辑也就是由这个函数提供的</strong>，我们稍微剖析一下这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> savedErrno = <span class="number">0</span>; </span><br><span class="line">    <span class="type">ssize_t</span> n = inputBuffer_.<span class="built_in">readFd</span>(channel_-&gt;<span class="built_in">fd</span>(), &amp;savedErrno);</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">0</span>) <span class="comment">//从fd读到了数据，并且放在了inputBuffer_上</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">messageCallback_</span>(<span class="built_in">shared_from_this</span>(), &amp;inputBuffer_, receiveTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">handleClose</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        errno = savedErrno;</span><br><span class="line">        <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;TcpConnection::handleRead&quot;</span>);</span><br><span class="line">        <span class="built_in">handleError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TcpConnection::handleRead( )函数首先调用Buffer_.readFd(channel_-&gt;fd(), &amp;saveErrno)，该函数底层调用Linux的函数readv( )，将Tcp接收缓冲区数据拷贝到用户定义的缓冲区中（inputBuffer_）。如果在读取拷贝的过程中发生了什么错误，这个错误信息就会保存在savedErrno中。</p><ul><li>当readFd( )返回值大于0，说明从接收缓冲区中读取到了数据，那么会接着调用messageCallback_中保存的用户自定义的读取消息后的处理函数。</li><li>readFd( )返回值等于0，说明客户端连接关闭，这时候应该调用TcpConnection::handleClose( )来处理连接关闭事件</li><li>readFd( )返回值等于-1，说明发生了错误，调用TcpConnection::handleError( )来处理savedErrno的错误事件。Moduo库只支持LT模式，所以读事件不会出现EAGAIN的错误，所以一旦出现错误，说明肯定是比较不好的非正常错误了。而EAGAIN错误只不过是非阻塞IO调用时的一种常见错误而已。</li></ul><blockquote><p><strong>消息发送</strong></p></blockquote><p>当用户调用了TcpConnetion::send(buf)函数时，相当于要求muduo库把数据buf发送给该Tcp连接的客户端。此时该TcpConnection注册在事件监听器上的感兴趣事件中是没有可写事件的。TcpConnection::send(buf)函数内部其实是调用了Linux的函数write( )</p><p>如果TCP发送缓冲区内不能一次性容纳buf：</p><ul><li>这时候write( )函数buf数据尽可能地拷贝到TCP发送缓冲区中，并且将errno设置为EWOULDBLOCK。</li><li>剩余未拷贝到TCP发送缓冲区中的buf数据会被存放在TcpConnection::outputBuffer_中。并且向事件监听器上注册该TcpConnection::channel_的可写事件。</li><li>事件监听器监听到该Tcp连接可写事件，就会调用TcpConnection::handleWrite( )函数把TcpConnection::outputBuffer_中剩余的数据发送出去。_<ul><li>在TcpConnection::handleWrite( )函数中，通过调用Buffer::writeFd()函数将outputBuffer_的数据写入到Tcp发送缓冲区，如果Tcp发送缓冲区能容纳全部剩余的未发送数据，那最好不过了。如果Tcp发送缓冲区依旧没法容纳剩余的未发送数据，那就尽可能地将数据拷贝到Tcp发送缓冲区中，继续保持可写事件的监听。</li></ul></li><li>当数据全部拷贝到Tcp发送缓冲区之后，就会调用用户自定义的【写完后的事件处理函数】，并且移除该TcpConnection在事件监听器上的可写事件。（移除可写事件是为了提高效率，不会让epoll_wait() 毫无意义的频繁触发可写事件。因为大多数时候是没有数据需要发送的，频繁触发可写事件但又没有数据可写。）</li></ul><p><strong>TcpConnection::send和TcpConnection::handleWrite的区别：</strong></p><ul><li>sendInLoop 的目的是尝试立即将数据写入内核空间。如果一次就能写完，那么就没问题。但如果写入操作被阻塞，或者只写入了部分数据，那么剩下的数据就会被放到 outputBuffer_ 中，然后通过注册写事件 enableWriting()，在有空间可写的时候，再继续写入剩下的数据。这个函数的调用通常是在应用程序想要发送数据的时候。</li><li>handleWrite 则是在内核通知应用程序可以写入数据的时候调用的，即当套接字的发送缓冲区有足够的空间可以接收更多数据时。这个函数的目的是尽可能地将 outputBuffer_ 中的数据写入到内核空间，直到写入全部数据或者内核空间无法接收更多数据为止。然后，如果 outputBuffer_ 中的数据全部写入完成，那么就取消对写事件的关注 disableWriting()，因为此时不需要再写数据了。</li><li>总的来说，sendInLoop 是应用程序主动发送数据，handleWrite 是在收到内核的可写通知后尝试写入数据。这两个函数共同实现了数据的异步写入：sendInLoop 负责将应用程序的数据放入 outputBuffer_ ，并尝试写入内核；handleWrite 负责在内核准备好接收数据时，将 outputBuffer_ 中的数据写入内核。</li></ul><p>在阅读源码的时候，有个疑问？也就是之前在学习buffer设计的时候，buffer既支持写也支持读，而且缓冲区的设计就有readerIndex_ 和writerIndex_，那为什么之后TcpConnnection中又放2个缓冲区buffer呢？</p><p>GPT回答：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在muduo网络库中，接收数据的缓冲区inputBuffer_和发送数据的缓冲区outputBuffer_ 都是独立的，这是因为在网络编程中，接收和发送数据的操作通常是异步的，也就是说，它们可以在不同的时间、以不同的速度发生，因此，它们需要各自的缓冲区来维护它们的状态。</span><br><span class="line"></span><br><span class="line">具体来说，inputBuffer_被用来存储从网络中接收到的数据，直到应用程序准备好处理这些数据为止。同样，outputBuffer_ 被用来存储应用程序准备发送到网络中的数据，直到这些数据被实际发送为止。</span><br><span class="line"></span><br><span class="line">虽然你提到的一个缓冲区可以处理读写操作，但这只适用于单一的读写操作。在网络编程中，接收和发送数据的操作是分离的，并且经常需要在不同的时间进行。因此，使用两个独立的缓冲区可以使得接收和发送数据的操作更加灵活和高效。</span><br></pre></td></tr></table></figure><h5 id="连接断开">连接断开</h5><blockquote><p><strong>连接被动断开</strong></p></blockquote><p>服务端TcpConnection::handleRead()中感知到客户端把连接断开了。<br>TcpConnection::handleRead( )函数内部调用了Linux的函数readv( )，当readv( )返回0的时候，服务端就知道客户端断开连接了。然后就接着调用TcpConnection::handleClose( )。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240503111746345.png" alt="image-20240503111746345"></p><ol><li>在执行TcpConnection::handle_Close()的时候，该函数还是在SubEventLoop线程中运行的，接着调用closeCallback_(connPtr)回调函数，该函数保存的其实是TcpServer::removeConnection( )函数</li><li>TcpServer::removeConnection( )函数调用了remvoveConnectionInLoop( )函数，该函数的运行是在MainEventLoop线程中执行的，这里涉及到线程切换技术。</li><li>removeConnectionInLoop( )函数：TcpServer对象中有一个connections_ 成员变量，这是一个unordered_map，负责保存【string --&gt; TcpConnection】的映射，其实就是保存着Tcp连接的名字到TcpConnection对象的映射。因为这个Tcp连接要关闭了，所以也要把这个TcpConnection对象从connections_中删掉。然后再调用TcpConnection::connectDestroyed函数。<br>另外为什么removeConnectionInLoop()要在MainEventLoop中运行，因为该函数主要是从TcpServer对象中删除某条数据。而TcpServer对象是属于MainEventLoop的。这也是贯彻了One Loop Per Thread的理念。</li><li>TcpConnection::connectDestroyed( )函数的执行是又跳回到了subEventLoop线程中。该函数就是将Tcp连接的监听描述符从事件监听器中移除。另外SubEventLoop中的Poller类对象还保存着这条Tcp连接的channel_，所以调用channel_.remove( )将这个Tcp连接的channel对象从Poller内的数据结构中删除。</li></ol><blockquote><p><strong>连接主动断开</strong></p></blockquote><p>服务器主动关闭导致连接断开。当服务器主动关闭时，调用TcpServer::~TcpServer()析构函数。</p><p>这里在提示一下EventLoop::runInLoop()函数的意义，假如你有一个EventLoop对象 loop_，当你调用了loop_-&gt;runInLoop(function)函数时，这个function函数的执行会在这个loop_绑定的线程上运行！<br>所以我们画了下面这幅图，在创建TcpConnection对象时，Acceptor都要将这个对象分发给一个SubEventLoop来管理。这个TcpConnection对象的一切函数执行都要在其管理的SubEventLoop线程中运行。再一次贯彻One Loop Per Thread的设计模式。比如要想彻底删除一个TcpConnection对象，就必须要调用这个对象的connecDestroyed()方法，这个方法执行完后才能释放这个对象的堆内存。每个TcpConnection对象的connectDestroyed()方法都必须在这个TcpConnection对象所属的SubEventLoop绑定的线程中执行。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240503110725342.png" alt=""></p><p>所有上面的TcpServer::~TcpServer()函数就是干这事儿的，不断循环的让这个TcpConnection对象所属的SubEventLoop线程执行TcpConnection::connectDestroyed()函数，同时在MainEventLoop的TcpServer::~TcpServer()函数中调用item.second.reset()释放保管TcpConnection对象的共享智能指针，以达到释放TcpConnection对象的堆内存空间的目的。<br>但是这里面其实有一个问题需要解决，TcpConnection::connectDestroyed()函数的执行以及这个TcpConnection对象的堆内存释放操作不在同一个线程中运行，所以要考虑怎么保证一个TcpConnectino对象的堆内存释放操作是在TcpConnection::connectDestroyed()调用完后。<br>这个析构函数巧妙利用了共享智能指针的特点，当没有共享智能指针指向这个TcpConnection对象时（引用计数为0），这个TcpConnection对象就会被析构删除（堆内存释放）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TcpServer::~<span class="built_in">TcpServer</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//connections类型为std::unordered_map&lt;std::string, TcpConnectionPtr&gt;;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;item : connections_)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">TcpConnectionPtr <span class="title">conn</span><span class="params">(item.second)</span></span>;</span><br><span class="line">        item.second.<span class="built_in">reset</span>(); </span><br><span class="line">        conn-&gt;<span class="built_in">getLoop</span>()-&gt;<span class="built_in">runInLoop</span>(<span class="built_in">bind</span>(&amp;TcpConnection::connectDestroyed, conn));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先TcpServer::connections_是一个unordered_map&lt;string, TcpConnectionPtr&gt;，其中TcpConnectionPtr的含义是指向TcpConnection的shared_ptr。</li><li>在一开始，每一个TcpConnection对象都被一个共享智能指针TcpConnetionPtr持有，当执行了TcpConnectionPtr conn(item.second)时，这个TcpConnetion对象就被conn和这个item.second共同持有，但是这个conn的生存周期很短，只要离开了当前的这一次for循环，conn就会被释放。</li><li>紧接着调用item.second.reset()释放掉TcpServer中保存的该TcpConnectino对象的智能指针。此时在当前情况下，只剩下conn还持有这个TcpConnection对象，因此当前TcpConnection对象还不会被析构。</li><li>接着调用了conn-&gt;getLoop()-&gt;runInLoop(bind(&amp;TcpConnection::connectDestroyed, conn));<br>这句话的含义是让SubEventLoop线程去执行TcpConnection::connectDestroyed()函数。当你把这个conn的成员函数传进去的时候，conn所指向的资源的引用计数会加1。因为传给runInLoop的不只有函数，还有这个函数所属的对象conn。</li><li>SubEventLoop线程开始运行TcpConnection::connectDestroyed()</li><li>MainEventLoop线程当前这一轮for循环跑完，共享智能指针conn离开代码块，因此被析构，但是TcpConnection对象还不会被释放，因为还有一个共享智能指针指向这个TcpConnection对象，而且这个智能指针在TcpConnection::connectDestroyed()中，只不过这个智能指针你看不到，它在这个函数中是一个隐式的this的存在。当这个函数执行完后，智能指针就真的被释放了。到此，就没有任何智能指针指向这个TcpConnection对象了。TcpConnection对象就彻底被析构删除了。</li></ul>]]></content>
    
    
    <summary type="html">深入剖析muduo网络库</summary>
    
    
    
    <category term="网络编程" scheme="https://penge666.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
    <category term="网络编程" scheme="https://penge666.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>时间函数</title>
    <link href="https://penge666.github.io/posts/83c8f10.html"/>
    <id>https://penge666.github.io/posts/83c8f10.html</id>
    <published>2024-04-30T09:05:22.000Z</published>
    <updated>2024-04-30T11:17:17.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在C++日志系统中，打印时间是必不可少的一个操作。</p><p>在 Linux C 语言编程中，有两种时间表示方式：</p><ul><li><p>一种是日历时间（calendar time），用于表示自纪元（Epoch）以来的秒数，他可以转换成我们日常看到的时间。</p></li><li><p>一种是处理器时间（processor time），用于表示程序在 CPU 上执行的时间。本文主要关注日历时间的处理。</p></li></ul><blockquote><p><strong>时间戳的概念</strong></p></blockquote><p>时间戳是一种用数字表示时间的方式。它是一个简单的计数器，记录了某个特定事件发生时的时间和日期。</p><p>你可以把时间戳看作一个独一无二的数字标记，表示了某个时刻的时间。这个数字通常是从某个参考点（通常是纪元）开始不断增加的。</p><p>时间戳可以精确到秒、毫秒甚至更小的单位，取决于使用的系统和编程语言。使用时间戳，我们可以轻松地对事件按照时间顺序进行排序和比较，而不用担心日期格式、时区等复杂的问题。</p><p>时间戳在计算机科学和软件开发中非常有用。它可以用来记录事件发生的顺序、计算时间差、创建时间戳序列、做数据分析等等。许多操作系统和编程语言都提供了用于获取和处理时间戳的函数和工具，使我们可以方便地使用它们。</p><p>简而言之，<strong>时间戳就是用数字来表示特定时刻的时间和日期，方便我们在计算机中处理和比较时间</strong>。</p><h2 id="时间函数">时间函数</h2><h3 id="time">time()</h3><p>time()函数是 C 和 C++ 中最基本的时间函数，它返回自 1970 年 1 月 1 日起的秒数。其函数原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">time_t</span> <span class="title">time</span><span class="params">(<span class="type">time_t</span> *tloc)</span></span>;</span><br></pre></td></tr></table></figure><p>参数的作用：</p><ul><li>当参数为NULL时：time_t这个整型值通过返回值返回。</li><li>当参数不为NULL时：time_t我们需要的这个整型值通过参数指针得到。</li></ul><p>time_t类型</p><ul><li><strong>time_t</strong>是一个用于表示时间的数据类型，它在 C 语言中广泛使用。可以把它看作是一个整数类型，<strong>用于存储时间戳</strong>。</li></ul><p>使用示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">time_t</span> current_time;</span><br><span class="line">    <span class="built_in">time</span>(&amp;current_time);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前时间为: %lld\n&quot;</span>, (<span class="type">long</span> <span class="type">long</span>)current_time);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面也是可以的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">time_t</span> current_time;</span><br><span class="line">    current_time=<span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前时间为: %lld\n&quot;</span>, (<span class="type">long</span> <span class="type">long</span>)current_time);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gettimeofday">gettimeofday()</h3><p>gettimeofday() 这个函数在 Unix 和 Linux 系统中常用，它可以获取到微秒级别的时间，更加精确。</p><p>函数原型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval *tv, <span class="keyword">struct</span> timezone *tz)</span></span>;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tv_sec: %d\n&quot;</span>, tv.tv_sec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tv_usec: %d\n&quot;</span>, tv.tv_usec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="localtime">localtime()</h3><p>localtime() 函数的功能是将 time_t 类型的时间转换为一个 tm 结构体类型的时间。</p><p>localtime() 函数的原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span>* <span class="built_in">localtime</span>(<span class="type">const</span> <span class="type">time_t</span>* timer);</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><p>timer：要转换的时间。</p><ul><li>返回值</li></ul><p>返回一个指向 tm 结构体变量的指针，该变量存储了当前时间的各个组成部分。</p><p>tm结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tm_sec;   <span class="comment">/* Seconds (0-60) */</span></span><br><span class="line">    <span class="type">int</span> tm_min;   <span class="comment">/* Minutes (0-59) */</span></span><br><span class="line">    <span class="type">int</span> tm_hour;  <span class="comment">/* Hours (0-23) */</span></span><br><span class="line">    <span class="type">int</span> tm_mday;  <span class="comment">/* Day of the month (1-31) */</span></span><br><span class="line">    <span class="type">int</span> tm_mon;   <span class="comment">/* Month (0-11) */</span></span><br><span class="line">    <span class="type">int</span> tm_year;  <span class="comment">/* Year - 1900 */</span></span><br><span class="line">    <span class="type">int</span> tm_wday;  <span class="comment">/* Day of the week (0-6, Sunday = 0) */</span></span><br><span class="line">    <span class="type">int</span> tm_yday;  <span class="comment">/* Day in the year (0-365, 1 Jan = 0) */</span></span><br><span class="line">    <span class="type">int</span> tm_isdst; <span class="comment">/* Daylight saving time */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">time_t</span> current_time;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">tm</span>* local_time;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前时间</span></span><br><span class="line">  current_time = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换为本地时间结构体</span></span><br><span class="line">  local_time = <span class="built_in">localtime</span>(&amp;current_time);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查是否转换成功</span></span><br><span class="line">  <span class="keyword">if</span> (local_time != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%04d-%02d-%02d %02d:%02d:%02d\n&quot;</span>,</span><br><span class="line">             local_time-&gt;tm_year + <span class="number">1900</span>, <span class="comment">// 年份</span></span><br><span class="line">             local_time-&gt;tm_mon + <span class="number">1</span>,     <span class="comment">// 月份</span></span><br><span class="line">             local_time-&gt;tm_mday,        <span class="comment">// 日</span></span><br><span class="line">             local_time-&gt;tm_hour,        <span class="comment">// 小时</span></span><br><span class="line">             local_time-&gt;tm_min,         <span class="comment">// 分钟</span></span><br><span class="line">             local_time-&gt;tm_sec          <span class="comment">// 秒</span></span><br><span class="line">      );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;时间转换失败\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-04-30 18:54:30</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>localtime函数不是线程安全的。在多线程应用里面，应该用localtime_r函数替代localtime函数，因为localtime_r是线程安全的。</p><h3 id="gmtime">gmtime()</h3><p>类似 localtime()，但返回的是格林尼治标准时间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前系统时间</span></span><br><span class="line">    std::<span class="type">time_t</span> current_time = std::<span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 gmtime 转换为格林尼治标准时间</span></span><br><span class="line">    std::tm* gm_time = std::<span class="built_in">gmtime</span>(&amp;current_time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出时间</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;UTC time: &quot;</span> &lt;&lt; gm_time-&gt;tm_hour &lt;&lt; <span class="string">&quot;:&quot;</span></span><br><span class="line">              &lt;&lt; gm_time-&gt;tm_min &lt;&lt; <span class="string">&quot;:&quot;</span></span><br><span class="line">              &lt;&lt; gm_time-&gt;tm_sec &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strftime">strftime()</h3><p>strftime() 函数的作用是按照指定的格式将时间结构体转换为字符串表示。</p><p>函数原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">strftime</span><span class="params">(<span class="type">char</span> *s, <span class="type">size_t</span> maxsize, <span class="type">const</span> <span class="type">char</span> *format, <span class="type">const</span> <span class="keyword">struct</span> tm *timeptr)</span></span>;</span><br></pre></td></tr></table></figure><p>strftime参数解析：</p><ul><li><p>s：一个指向字符数组的指针，用于存储格式化后的时间字符串。这个字符数组必须具有足够的空间来存储生成的字符串。</p></li><li><p>maxsize：表示存储时间字符串的字符数组的最大长度。这是为了避免溢出。</p></li><li><p>format：一个指向格式化字符串的指针，用于定义时间字符串的输出格式。格式字符串包含特定的格式占位符，如 %Y 表示年份，%m 表示月份等。</p></li><li><p>timeptr：一个指向 struct tm 结构体的指针，其中包含了要格式化的时间信息。这个结构体存储了年、月、日、时、分、秒等时间字段的值。</p></li></ul><p>strftime返回值解析</p><ul><li>函数 strftime() 的返回值是一个 size_t 类型的整数，表示成功写入目标字符串 s 的字符数（不包括末尾的空字符）。</li></ul><p>使用示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">time_t</span> current_time;</span><br><span class="line">    <span class="built_in">time</span>(&amp;current_time);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *<span class="type">local_t</span> = <span class="built_in">localtime</span>(&amp;current_time);</span><br><span class="line">    <span class="type">char</span> time_str[<span class="number">64</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">strftime</span>(time_str, <span class="built_in">sizeof</span>(time_str), <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class="type">local_t</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前时间为: %s\n&quot;</span>, time_str);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时间为: 2024-04-30 19:05:43</span><br></pre></td></tr></table></figure><h3 id="chrono库">chrono库</h3><p>这是 C++11 中引入的新的时间库，可以方便地获取高精度时间，并进行时间的算术运算。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/679451085">C++ std::chrono库使用指南 (实现C++ 获取日期,时间戳,计时等功能)</a></li><li><a href="https://zhuanlan.zhihu.com/p/662738124">再也不被时间束缚：C++ stdchrono时间库全面解析</a></li></ul><h2 id="参考资料">参考资料</h2><ul><li><p><a href="https://developer.aliyun.com/article/1350147">Linux C语言之时间函数精讲</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/679451085">C++ std::chrono库使用指南 (实现C++ 获取日期,时间戳,计时等功能)</a></p></li></ul>]]></content>
    
    
    <summary type="html">走进时间函数的世界</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Linux惊群效应</title>
    <link href="https://penge666.github.io/posts/e5c92e8d.html"/>
    <id>https://penge666.github.io/posts/e5c92e8d.html</id>
    <published>2024-04-30T02:36:29.000Z</published>
    <updated>2024-04-30T03:08:41.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本博客主要介绍什么是惊群，惊群在线程和进程中的具体表现，惊群的系统消耗和惊群的处理方法。</p><h2 id="介绍">介绍</h2><p>惊群效应也有人叫做雷鸣群体效应，不过叫什么，简言之，惊群现象就是多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），如果等待的这个事件发生，那么他就会唤醒等待的所有进程（或者线程），但是最终却只可能有一个进程（线程）获得这个时间的“控制权”，对该事件进行处理，而其他进程（线程）获取“控制权”失败，只能重新进入休眠状态，这种现象和性能浪费就叫做惊群。</p><p>这里打个有趣的比方，就像在学校的湖里面用面包🍞喂天鹅，当你往一群天鹅中间扔一撮面包🍞，所有的天鹅各自都被惊动前来抢夺这可口的食物，但是最终注定只有一个天鹅抢到食物，没有抢到的天鹅只好回去继续等待。</p><blockquote><p><strong>惊群效应存在的问题</strong></p></blockquote><p>（1）系统对用户进程/线程频繁地做无效的调度，上下文切换系统性能大打折扣。</p><p>（2）为了确保只有一个线程得到资源，用户必须对资源操作进行加锁保护，进一步加大了系统开销。</p><h2 id="惊群效应示例">惊群效应示例</h2><h3 id="accept">accept</h3><p>场景：主进程创建了socket、bind、listen之后，fork()出来多个进程，每个子进程都开始循环处理（accept）这个listen_fd。每个进程都阻塞在accept上，当一个新的连接到来时候，所有的进程都会被唤醒，但是其中只有一个进程会接受成功，其余皆失败，重新休眠。</p><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROCESS_NUM 10</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> connfd;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> sendbuff[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serveraddr;</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    serveraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    serveraddr.sin_port = <span class="built_in">htons</span>(<span class="number">1234</span>);</span><br><span class="line">    <span class="built_in">bind</span>(fd, (<span class="keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="built_in">sizeof</span>(serveraddr));</span><br><span class="line">    <span class="built_in">listen</span>(fd, <span class="number">1024</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PROCESS_NUM; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                connfd = <span class="built_in">accept</span>(fd, (<span class="keyword">struct</span> sockaddr *)<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (connfd == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">snprintf</span>(sendbuff, <span class="built_in">sizeof</span>(sendbuff), <span class="string">&quot;接收到accept事件的进程PID = %d\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">send</span>(connfd, sendbuff, <span class="built_in">strlen</span>(sendbuff) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;process %d accept success\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">                    <span class="built_in">close</span>(connfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;process %d accept a connection failed: %s\n&quot;</span>, <span class="built_in">getpid</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">                    <span class="built_in">close</span>(connfd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int status;</span></span><br><span class="line">    <span class="built_in">wait</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">penge@penge-virtual-machine  ~/Desktop/MordenCpp/test  g++ main.cpp -o main -pthread</span><br><span class="line">penge@penge-virtual-machine  ~/Desktop/MordenCpp/test  strace -f ./main</span><br></pre></td></tr></table></figure><ul><li><a href="https://zhuanlan.zhihu.com/p/180053751">Linux神器strace的使用方法及实践</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[pid 171338] set_robust_list(0x7fc56358fa20, 24 &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171338] &lt;... set_robust_list resumed&gt;) = 0</span><br><span class="line">[pid 171338] accept(3, NULL, NULLstrace: Process 171339 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171339</span><br><span class="line">[pid 171339] set_robust_list(0x7fc56358fa20, 24 &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171339] &lt;... set_robust_list resumed&gt;) = 0</span><br><span class="line">[pid 171339] accept(3, NULL, NULLstrace: Process 171340 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171340</span><br><span class="line">[pid 171340] set_robust_list(0x7fc56358fa20, 24 &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171340] &lt;... set_robust_list resumed&gt;) = 0</span><br><span class="line">[pid 171340] accept(3, NULL, NULLstrace: Process 171341 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171341</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171341] set_robust_list(0x7fc56358fa20, 24) = 0</span><br><span class="line">strace: Process 171342 attached</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171342</span><br><span class="line">[pid 171341] accept(3, NULL, NULL &lt;unfinished ...&gt;</span><br><span class="line">[pid 171342] set_robust_list(0x7fc56358fa20, 24 &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171342] &lt;... set_robust_list resumed&gt;) = 0</span><br><span class="line">[pid 171342] accept(3, NULL, NULLstrace: Process 171343 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171343</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171343] set_robust_list(0x7fc56358fa20, 24) = 0</span><br><span class="line">[pid 171343] accept(3, NULL, NULLstrace: Process 171344 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171344</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171344] set_robust_list(0x7fc56358fa20, 24) = 0</span><br><span class="line">[pid 171344] accept(3, NULL, NULLstrace: Process 171345 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171345</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171345] set_robust_list(0x7fc56358fa20, 24) = 0</span><br><span class="line">strace: Process 171346 attached</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171346</span><br><span class="line">[pid 171345] accept(3, NULL, NULL &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD &lt;unfinished ...&gt;</span><br><span class="line">[pid 171346] set_robust_list(0x7fc56358fa20, 24) = 0</span><br><span class="line">[pid 171346] accept(3, NULL, NULLstrace: Process 171347 attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] &lt;... <span class="built_in">clone</span> resumed&gt;, child_tidptr=0x7fc56358fa10) = 171347</span><br><span class="line">[pid 171347] set_robust_list(0x7fc56358fa20, 24 &lt;unfinished ...&gt;</span><br><span class="line">[pid 171337] wait4(-1,  &lt;unfinished ...&gt;</span><br><span class="line">[pid 171347] &lt;... set_robust_list resumed&gt;) = 0</span><br><span class="line">[pid 171347] accept(3, NULL, NULL &lt;unfinished ...&gt;</span><br></pre></td></tr></table></figure><p>之后，在启用一个终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 1234</span><br></pre></td></tr></table></figure><p>看看发生了什么变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[pid 172089] fstat(1, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x9), ...&#125;) = 0</span><br><span class="line">[pid 172089] brk(NULL)                  = 0x55f621f04000</span><br><span class="line">[pid 172089] brk(0x55f621f25000)        = 0x55f621f25000</span><br><span class="line">[pid 172089] write(1, <span class="string">&quot;process 172089 accept a connecti&quot;</span>..., 51process 172089 accept a connection failed: Success</span><br><span class="line">) = 51</span><br><span class="line">[pid 172089] close(4)                   = 0</span><br><span class="line">[pid 172089] accept(3, NULL, NULL^C &lt;unfinished ...&gt;</span><br><span class="line">[pid 172098] &lt;... accept resumed&gt;)      = ? ERESTARTSYS (To be restarted <span class="keyword">if</span> SA_RESTART is <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><p>很明显当telnet连接的时候只有一个进程accept成功，也就说明了这里并没有发生惊群。</p><p>其实在linux2.6版本以后，linux内核已经解决了accept（）函数的“惊群”现象，大概的处理方式就是，当内核接收到一个客户连接后，只会唤醒等待队列上的第一个进程（线程）,所以如果服务器采用accept阻塞调用方式，在最新的linux系统中已经没有“惊群效应”了</p><h3 id="epoll">epoll</h3><p>场景：如果多个进程/线程阻塞在监听同一个监听socket fd的epoll_wait上，当有一个新的连接到来时，所有的进程都会被唤醒。</p><p>主进程创建socket，bind，listen后，将该socket加入到epoll中，然后fork出多个子进程，每个进程都阻塞在epoll_wait上，如果有事件到来，则判断该事件是否是该socket上的事件如果是，说明有新的连接到来了，则进行接受操作。为了简化处理，忽略后续的读写以及对接受返回的新的套接字的处理，直接断开连接。<br>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROCESS_NUM 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"><span class="comment">// socket创建和绑定</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sock_creat_bind</span><span class="params">(<span class="type">char</span> *port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock_fd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serveraddr;</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    serveraddr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(port));</span><br><span class="line">    serveraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bind</span>(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="built_in">sizeof</span>(serveraddr));</span><br><span class="line">    <span class="keyword">return</span> sock_fd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用fcntl设置文件或者函数调用的状态标志</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">make_nonblocking</span><span class="params">(<span class="type">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="built_in">fcntl</span>(fd, F_GETFL);</span><br><span class="line">    val |= O_NONBLOCK;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fcntl</span>(fd, F_SETFL, val) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl set&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock_fd, epoll_fd;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> event;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> *events;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage: [port] %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((sock_fd = <span class="built_in">sock_creat_bind</span>(argv[<span class="number">1</span>])) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket and bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">make_nonblocking</span>(sock_fd) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;make non blocking&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(sock_fd, SOMAXCONN) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((epoll_fd = <span class="built_in">epoll_create</span>(MAXEVENTS)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll_create&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    event.data.fd = sock_fd;</span><br><span class="line">    event.events = EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">epoll_ctl</span>(epoll_fd, EPOLL_CTL_ADD, sock_fd, &amp;event) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*buffer where events are returned*/</span></span><br><span class="line">    events = <span class="built_in">static_cast</span>&lt;epoll_event *&gt;(<span class="built_in">calloc</span>(MAXEVENTS, <span class="built_in">sizeof</span>(event)));</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PROCESS_NUM; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> num, j;</span><br><span class="line">                num = <span class="built_in">epoll_wait</span>(epoll_fd, events, MAXEVENTS, <span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;process %d returnt from epoll_wait\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">                <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp; EPOLLIN)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;epoll error\n&quot;</span>);</span><br><span class="line">                        <span class="built_in">close</span>(events[i].data.fd);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sock_fd == events[i].data.fd)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 收到关于监听套接字的通知，意味着一盒或者多个传入连接</span></span><br><span class="line">                        <span class="keyword">struct</span> sockaddr in_addr;</span><br><span class="line">                        <span class="type">socklen_t</span> in_len = <span class="built_in">sizeof</span>(in_addr);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">accept</span>(sock_fd, &amp;in_addr, &amp;in_len) &lt; <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;process %d accept failed!\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;process %d accept successful!\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">wait</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(events);</span><br><span class="line">    <span class="built_in">close</span>(sock_fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> ✘ penge@penge-virtual-machine  ~/Desktop/MordenCpp/test  ./main 1234  </span><br><span class="line">process 173413 returnt from epoll_wait</span><br><span class="line">process 173412 returnt from epoll_wait</span><br><span class="line">process 173411 returnt from epoll_wait</span><br><span class="line">process 173410 returnt from epoll_wait</span><br><span class="line">process 173409 returnt from epoll_wait</span><br><span class="line">process 173408 returnt from epoll_wait</span><br><span class="line">process 173407 returnt from epoll_wait</span><br><span class="line">process 173406 returnt from epoll_wait</span><br><span class="line">process 173405 returnt from epoll_wait</span><br><span class="line">process 173404 returnt from epoll_wait</span><br><span class="line">process 173407 accept successful!</span><br><span class="line">process 173409 accept failed!</span><br><span class="line">process 173410 accept failed!</span><br><span class="line">process 173411 accept failed!</span><br><span class="line">process 173412 accept failed!</span><br><span class="line">process 173406 accept failed!</span><br><span class="line">process 173404 accept failed!</span><br><span class="line">process 173413 accept failed!</span><br><span class="line">process 173405 accept failed!</span><br><span class="line">process 173408 accept failed!</span><br></pre></td></tr></table></figure><p>显然，发生了惊群效应。</p><blockquote><p>怎么判断发生了惊群呢？</p></blockquote><p>我们根据strace的返回信息可以确定:</p><p>(1) 系统只会让一个进程真正的接受这个连接，而剩余的进程会获得一个EAGAIN信号。</p><p>(2）通过返回结果和进程执行的系统调用判断。</p><blockquote><p>为什么内核处理了accept的惊群，却不处理epoll_wait的惊群呢？</p></blockquote><p>accept确实应该只能被一个进程调用成功，内核很清楚这一点。但epoll不一样，他监听的文件描述符，除了可能后续被accept调用外，还有可能是其他网络IO事件的，而其他IO事件是否只能由一个进程处理，是不一定的，内核不能保证这一点，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对epoll的惊群，内核则不予处理。</p><h2 id="解决方法">解决方法</h2><p>解决方式一共有三种</p><ol><li>accept_mutex（应用层的解决方案）</li><li>EPOLLEXCLUSIVE（内核层的解决方案）</li><li>SO_REUSEPORT（内核层的解决方案）</li></ol><h3 id="accept-mutex">accept_mutex</h3><p>看到 mutex 可能你就知道了，锁嘛！这也是对于高并发处理的 ”基操“ 遇事不决加锁，没错，加锁肯定能解决问题。</p><p>感兴趣的可以看看这部分的<a href="https://github.com/nginx/nginx/blob/b489ba83e9be446923facfe1a2fe392be3095d1f/src/event/ngx_event_accept.c#L328">代码实现</a>。</p><h3 id="EPOLLEXCLUSIVE">EPOLLEXCLUSIVE</h3><p>EPOLLEXCLUSIVE 是 2016 年 4.5+ 内核新添加的一个 epoll 的标识。它降低了多个进程/线程通过 epoll_ctl 添加共享 fd 引发的惊群概率，使得一个事件发生时，只唤醒一个正在 epoll_wait 阻塞等待唤醒的进程（而不是全部唤醒）。</p><p>关键是：每次内核只唤醒一个睡眠的进程处理资源。</p><h3 id="SO-REUSEPORT">SO_REUSEPORT</h3><p>Linux内核的3.9版本带来了SO_REUSEPORT特性，该特性支持多个进程或者线程绑定到同一端口，提高服务器程序的性能，允许多个套接字bind()以及listen()同一个TCP或UDP端口，并且在内核层面实现负载均衡。</p><ul><li>在未开启SO_REUSEPORT的时候，由一个监听socket将新接收的连接请求交给各个工作者处理，看图示：<ul><li><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240430110045200.png" alt="image-20240430110045200"></li></ul></li><li>在使用SO_REUSEPORT后，多个进程可以同时监听同一个IP：端口，然后由内核决定将新链接发送给哪个进程，显然会降低每个工人接收新链接时锁竞争。<ul><li><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240430110103466.png" alt="image-20240430110103466"></li></ul></li></ul><blockquote><p><strong>SO_REUSEPORT解决了什么问题</strong></p></blockquote><p>（1）允许多个套接字bind()/listen()同一个tcp/udp端口。每一个线程拥有自己的服务器套接字，在服务器套接字上没有锁的竞争。</p><p>（2）内核层面实现负载均衡</p><p>（3）安全层面，监听同一个端口的套接字只能位于同一个用户下面。</p><p>（4）处理新建连接时，查找listener的时候，能够支持在监听相同IP和端口的多个sock之间均衡选择。</p><blockquote><p><strong>当一个连接到来的时候，系统到底是怎么决定那个套接字来处理它？</strong></p></blockquote><p>对于不同内核，存在两种模式，这两种模式并不共存，一种叫做热备份模式，另一种叫做负载均衡模式，3.9内核以后，全部改为负载均衡模式。</p><ul><li>热备份模式：一般而言，会将所有的reuseport同一个IP地址/端口的套接字挂在一个链表上，取第一个即可，工作的只有一个，其他的作为备份存在，如果该套接字挂了，它会被从链表删除，然后第二个便会成为第一个。</li><li>负载均衡模式：和热备份模式一样，所有reuseport同一个IP地址/端口的套接字会挂在一个链表上，你也可以认为是一个数组，这样会更加方便，当有连接到来时，用数据包的源IP/源端口作为一个HASH函数的输入，将结果对reuseport套接字数量取模，得到一个索引，该索引指示的数组位置对应的套接字便是工作套接字。这样就可以达到负载均衡的目的，从而降低某个服务的压力。</li></ul><h2 id="参考资料">参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/666017070">Nginx 是如何解决惊群效应的？</a></li><li><a href="https://blog.csdn.net/lyztyycode/article/details/78648798">Linux惊群效应详解</a></li></ul>]]></content>
    
    
    <summary type="html">一篇让我想起在学校喂天鹅的故事</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
    <category term="操作系统" scheme="https://penge666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://penge666.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>HTTP学习笔记</title>
    <link href="https://penge666.github.io/posts/f5ef6bcf.html"/>
    <id>https://penge666.github.io/posts/f5ef6bcf.html</id>
    <published>2024-04-29T14:56:09.000Z</published>
    <updated>2024-04-30T03:06:38.483Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>TCP协议</title>
    <link href="https://penge666.github.io/posts/51aeee82.html"/>
    <id>https://penge666.github.io/posts/51aeee82.html</id>
    <published>2024-04-27T08:57:46.000Z</published>
    <updated>2024-04-27T13:16:30.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>计算机网络基础，是一名计算机学生必须牢牢掌握的基本功。</p><p>这里安利下斯坦福大学开设的CS144课程，给想进一步了解TCP协议具体实现的小伙伴。</p><p>课程🔗：<a href="https://cs144.github.io/">https://cs144.github.io/</a></p><p>这门课将带你从0到1实现一个属于自己的能在网络上通信的 TCP/IP 协议栈。</p><p>好了，开始基本的知识点梳理~</p><h2 id="TCP和UDP的区别">TCP和UDP的区别</h2><p><strong>UDP头部</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427173840722.png" alt="image-20240427173840722"></p><p>字段含义</p><ul><li><p>端口：长度16位，指定发送方所使用的端口号，若不需要对方回发消息，则可全置为0。</p></li><li><p>目的端口：长度16位，指定接收方所使用的端口号。</p></li><li><p>UDP总长度：长度16位，指定了UDP数据报的总长度。</p></li><li><p>校验和：长度16位，用于UDP的差错检测，防止UDP报文出错，同时伪首部参与计算，避免UDP用户数据报传送到错误的目的地。UDP的首部，数据部分，伪首部都会参与检验和的计算，各字段是按照16比特为单位进行计算的，因此数据部分是要保证是16比特的倍数，不够用0填充。</p></li></ul><p><strong>TCP头部</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427173903612.png" alt="image-20240427173903612"></p><p>字段含义</p><ul><li><p>16位端口号：源端口号，主机该报文段是来自哪里；目标端口号，要传给哪个上层协议或应用程序。</p></li><li><p>32位序号：一次TCP通信（从TCP连接建立到断开）过程中某一个传输方向上的字节流的每个字节的编号。</p></li><li><p>32位确认号：用作对另一方发送的tcp报文段的响应。其值是收到的TCP报文段的序号值加1。</p></li><li><p>4位头部长度：表示tcp头部有多少个32bit字（4字节）。因为4位最大能标识15，所以TCP头部最长是60字节。</p></li><li><p>6位标志位：URG(紧急指针是否有效)，ACk（表示确认号是否有效），PSH（缓冲区尚未填满），RST（表示要求对方重新建立连接），SYN（建立连接消息标志接），FIN（表示告知对方本端要关闭连接了）。</p></li><li><p>16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p></li><li><p>16位校验和：由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。这也是TCP可靠传输的一个重要保障。</p></li><li><p>16位紧急指针：一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。</p></li></ul><p><strong>区别</strong></p><ul><li><p>TCP<strong>面向连接</strong>；UDP是无连接的，即发送数据之前不需要建立连接。</p></li><li><p>TCP提供<strong>可靠的服务</strong>；UDP不保证可靠交付。</p></li><li><p>TCP<strong>面向字节流</strong>，把数据看成一连串无结构的字节流；UDP是面向报文的。</p></li><li><p>TCP有<strong>拥塞控制</strong>；UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如实时视频会议等）。</p></li><li><p>每一条TCP连接只能是<strong>点到点</strong>的；UDP支持一对一、一对多、多对一和多对多的通信方式。</p></li><li><p>TCP首部开销20字节；UDP的首部开销小，只有8个字节。</p></li></ul><p><strong>常见的应用协议</strong></p><p>基于TCP的应用层协议有：HTTP、FTP、SMTP、TELNET、SSH</p><ul><li><strong>HTTP</strong>：HyperText Transfer Protocol（超文本传输协议），默认端口80</li><li><strong>FTP</strong>: File Transfer Protocol (文件传输协议), 默认端口(20用于传输数据，21用于传输控制信息)</li><li><strong>SMTP</strong>: Simple Mail Transfer Protocol (简单邮件传输协议) ,默认端口25</li><li><strong>TELNET</strong>: Teletype over the Network (网络电传), 默认端口23</li><li><strong>SSH</strong>：Secure Shell（安全外壳协议），默认端口 22</li></ul><p>基于UDP的应用层协议：DNS、TFTP、SNMP</p><ul><li><strong>DNS</strong> : Domain Name Service (域名服务),默认端口 53</li><li><strong>TFTP</strong>: Trivial File Transfer Protocol (简单文件传输协议)，默认端口69</li><li><strong>SNMP</strong>：Simple Network Management Protocol（简单网络管理协议），通过UDP端口161接收，只有Trap信息采用UDP端口162。</li></ul><blockquote><p><strong>TCP是如何确保可靠性的呢？</strong></p></blockquote><ul><li>首先，TCP的连接是基于<strong>三次握手</strong>，而断开则是基于<strong>四次挥手</strong>。确保连接和断开的可靠性。</li><li>其次，TCP的可靠性，还体现在<strong>有状态</strong>;TCP会记录哪些数据发送了，哪些数据被接收了，哪些没有被接受，并且保证数据包按序到达，保证数据传输不出差错。</li><li>再次，TCP的可靠性，还体现在<strong>可控制</strong>。它有数据包校验、ACK应答、<strong>超时重传(发送方)</strong>、失序数据重传（接收方）、丢弃重复数据、流量控制（滑动窗口）和拥塞控制等机制。</li></ul><h2 id="TCP的三次握手">TCP的三次握手</h2><p>假设发送端为客户端，接收端为服务端。</p><p>开始时客户端和服务端的状态都是<code>CLOSED</code></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427171700576.png" alt="image-20240427171700576"></p><ul><li>第一次握手：客户端向服务端发起建立连接请求，客户端会随机生成一个起始序列号x，客户端向服务端发送的字段中包含标志位<code>SYN=1</code>，序列号<code>seq=x</code>。第一次握手前客户端的状态为<code>CLOSE</code>，第一次握手后客户端的状态为<code>SYN-SENT</code>。此时服务端的状态为<code>LISTEN</code>。</li><li>第二次握手：服务端在收到客户端发来的报文后，会随机生成一个服务端的起始序列号y，然后给客户端回复一段报文，其中包括标志位<code>SYN=1</code>，<code>ACK=1</code>，序列号<code>seq=y</code>，确认号<code>ack=x+1</code>。第二次握手前服务端的状态为<code>LISTEN</code>，第二次握手后服务端的状态为<code>SYN-RCVD</code>，此时客户端的状态为<code>SYN-SENT</code>。（其中<code>SYN=1</code>表示要和客户端建立一个连接，<code>ACK=1</code>表示确认序号有效）。</li><li>第三次握手：客户端收到服务端发来的报文后，会再向服务端发送报文，其中包含标志位<code>ACK=1</code>，序列号<code>seq=x+1</code>，确认号<code>ack=y+1</code>。第三次握手前客户端的状态为<code>SYN-SENT</code>，第三次握手后客户端和服务端的状态都为<code>ESTABLISHED</code>。<strong>此时连接建立完成。</strong></li></ul><blockquote><p><strong>两次握手可以吗？</strong></p></blockquote><p>防止重复连接</p><ul><li>三次握手的主要原因是为了防止旧的重复连接引起连接混乱问题。</li><li>比如在网络状况比较复杂或者网络状况比较差的情况下，发送方可能会连续发送多次建立连接的请求。</li><li>如果 TCP 握手的次数只有两次，那么接收方只能选择接受请求或者拒绝接受请求，但它并不清楚这次的请求是正常的请求，还是由于网络环境问题而导致的过期请求，如果是过期请求的话就会造成错误的连接。</li><li>所以如果 TCP 是三次握手的话，那么客户端在接收到服务器端 SEQ+1 的消息之后，就可以判断当前的连接是否为历史连接，如果判断为历史连接的话就会发送终止报文（RST）给服务器端终止连接；如果判断当前连接不是历史连接的话就会发送指令给服务器端来建立连接。</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427172057128.png" alt="image-20240427172057128"></p><h2 id="TCP的四次挥手">TCP的四次挥手</h2><p>客户端A发完数据，要关闭连接。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427172134551.png" alt="image-20240427172134551"></p><ol><li>A的应用进程先向其TCP发出连接释放报文段（<code>FIN=1，seq=u</code>），并停止再发送数据，主动关闭TCP连接，进入<code>FIN-WAIT-1</code>（终止等待1）状态，等待B的确认。</li><li>B收到连接释放报文段后即发出确认报文段（<code>ACK=1，ack=u+1，seq=v</code>），B进入<code>CLOSE-WAIT</code>（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。</li><li>A收到B的确认后，进入<code>FIN-WAIT-2</code>（终止等待2）状态，等待B发出的连接释放报文段。</li><li>B发送完数据，就会发出连接释放报文段（<code>FIN=1，ACK=1，seq=w，ack=u+1</code>），B进入<code>LAST-ACK</code>（最后确认）状态，等待A的确认。</li><li>A收到B的连接释放报文段后，对此发出确认报文段（<code>ACK=1，seq=u+1，ack=w+1</code>），A进入<code>TIME-WAIT</code>（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间<code>2MSL</code>（最大报文段生存时间）后，A才进入<code>CLOSED</code>状态。B收到A发出的确认报文段后关闭连接，若没收到A发出的确认报文段，B就会重传连接释放报文段。</li></ol><blockquote><p><strong>什么TIME_WAIT状态？</strong></p></blockquote><p>TIME-WAIT状态指的是第四次挥手后，主动中断连接方所处的状态，这个状态下，主动方尚未完全关闭TCP连接，端口不可复用。</p><blockquote><p><strong>为什么TIME-WAIT状态需要等待2MSL?</strong></p></blockquote><ul><li><strong>保证A发送的最后一个ACK报文段能够到达B</strong>。这个<code>ACK</code>报文段有可能丢失，B收不到这个确认报文，就会超时重传连接释放报文段，然后A可以在<code>2MSL</code>时间内收到这个重传的连接释放报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到<code>CLOSED</code>状态，若A在<code>TIME-WAIT</code>状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的连接释放报文段，所以不会再发送一次确认报文段，B就无法正常进入到<code>CLOSED</code>状态。</li><li><strong>防止已失效的连接请求报文段出现在本连接中</strong>。A在发送完最后一个<code>ACK</code>报文段后，再经过2MSL，就可以使这个连接所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接请求报文段。</li></ul><h2 id="TCP的状态转换图">TCP的状态转换图</h2><p>状态转换图几乎出现在每一本有关TCP的教材中，可谓是经典中的经典。</p><p>TCP通信过程包括三个步骤：建立TCP连接通道（三次握手）、数据传输、断开TCP连接通道（四次挥手）</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427171057056.png" alt="image-20240427171057056"></p><p>而整个过程可以表示成<strong>TCP状态状态转换图</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427171502114.png" alt="image-20240427171502114"></p><p>详细学习这篇内容：<a href="https://www.coonote.com/tcpip/tcpip-tutorial.html">TCP/IP 教程</a></p><h2 id="TCP的滑动窗口机制">TCP的滑动窗口机制</h2><p>TCP 利用滑动窗口实现流量控制。</p><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。 TCP会话的双方都各自维护一个发送窗口和一个接收窗口。接收窗口大小取决于应用、系统、硬件的限制。发送窗口则取决于对端通告的接收窗口。接收方发送的确认报文中的window字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将接收方的确认报文window字段设置为 0，则发送方不能发送数据。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427172810673.png" alt="image-20240427172810673"></p><p>TCP头包含window字段，16bit位，它代表的是窗口的字节容量，最大为65535。这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。接收窗口的大小是约等于发送窗口的大小。</p><h2 id="TCP拥塞控制">TCP拥塞控制</h2><p>防止过多的数据注入到网络中。 几种拥塞控制方法：慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427173017396.png" alt="image-20240427173017396"></p><p><strong>慢开始</strong></p><p>把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。每经过一个传输轮次，拥塞窗口 cwnd 就加倍。 为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。</p><p>当 cwnd &lt; ssthresh 时，使用慢开始算法。</p><p>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</p><p>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法。</p><p><strong>拥塞避免</strong></p><p>让拥塞窗口cwnd缓慢地增大，每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长。</p><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送 方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p><strong>快重传</strong></p><p>有时个别报文段会在网络中丢失，但实际上网络并未发生拥塞。如果发送方迟迟收不到确认，就会产生超时，就会误认为网络发生了拥塞。这就导致发送方错误地启动慢开始，把拥塞窗口cwnd又设置为1，因而降低了传输效率。</p><p>快重传算法可以避免这个问题。快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认，使发送方及早知道有报文段没有到达对方。</p><p>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待重传计时器到期。由于发送方尽早重传未被确认的报文段，因此采用快重传后可以使整个网络吞吐量提高约20%。</p><p><strong>快恢复</strong></p><p>当发送方连续收到三个重复确认，就会把慢开始门限ssthresh减半，接着把cwnd值设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大。</p><p>在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。 采用这样的拥塞控制方法使得TCP的性能有明显的改进。</p><h2 id="其他">其他</h2><h3 id="粘包">粘包</h3><p>粘包指TCP协议中，发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p><strong>Note</strong>:只有UDP协议不存在粘包。这是由于UDP有消息保护边界，不会发生粘包拆包问题。</p><p>因为TCP是面向流，没有边界，而操作系统在发送TCP数据时，会通过缓冲区来进行优化，例如缓冲区为1024个字节大小。</p><ul><li><p>如果一次请求发送的数据量比较小，没达到缓冲区大小，TCP则会将多个请求合并为同一个请求进行发送，这就形成了粘包问题。</p></li><li><p>如果一次请求发送的数据量比较大，超过了缓冲区大小，TCP就会将其拆分为多次发送，这就是拆包。</p></li></ul><p>粘包和拆包示意图：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427173217720.png" alt="image-20240427173217720"></p><p>上图中演示了以下几种情况：</p><ul><li>正常的理想情况，两个包恰好满足TCP缓冲区的大小或达到TCP等待时长，分别发送两个包；</li><li>粘包：两个包较小，间隔时间短，发生粘包，合并成一个包发送；</li><li>拆包：一个包过大，超过缓存区大小，拆分成两个或多个包发送；</li><li>拆包和粘包：Packet1过大，进行了拆包处理，而拆出去的一部分又与Packet2进行粘包处理。</li></ul><p><strong>解决办法</strong>：</p><ul><li>发送端将每个包都封装成固定的长度，比如100字节大小。如果不足100字节可通过补0或空等进行填充到指定长度；</li><li>发送端在每个包的末尾使用固定的分隔符，例如\r\n。如果发生拆包需等待多个包发送过来之后再找到其中的\r\n进行合并；例如，FTP协议；</li><li>将消息分为头部和消息体，头部中保存整个消息的长度，只有读取到足够长度的消息之后才算是读到了一个完整的消息；</li><li>通过自定义协议进行粘包和拆包的处理。</li></ul><h3 id="SYN-flood攻击">SYN-flood攻击</h3><p>SYN 洪泛攻击 (SYN flood attack)</p><p>原理</p><ul><li>利用三次握手的过程漏洞</li><li>大量发送第一次握手（假IP)的报文</li><li>攻击方忽略第二次握手的报文</li><li>被攻击方多个TCP连接处于(SYNC-RCVD)阶段，耗费大量资源</li><li>最终因为资源耗尽，拒绝服务(DoS)</li></ul><h2 id="参考资料">参考资料</h2><ul><li><a href="https://joytsing.cn/posts/42952/#toc-heading-2">TCP协议中三次握手和四次挥手</a></li><li><a href="https://www.coonote.com/tcpip/tcpip-tutorial.html">TCP/IP 教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/356225028">面试题：聊聊TCP的粘包、拆包以及解决方案</a></li></ul>]]></content>
    
    
    <summary type="html">通俗易懂理解TCP协议</summary>
    
    
    
    <category term="计算机网络" scheme="https://penge666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://penge666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>HTTP队头阻塞</title>
    <link href="https://penge666.github.io/posts/9b06a28b.html"/>
    <id>https://penge666.github.io/posts/9b06a28b.html</id>
    <published>2024-04-27T05:20:46.000Z</published>
    <updated>2024-04-27T13:17:14.272Z</updated>
    
    <content type="html"><![CDATA[<p>本文译自：<a href="https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/">Head-of-Line Blocking in QUIC and HTTP/3: The Details</a></p><p>您可能已经听说，经过4年的工作，新的 HTTP/3 和 QUIC 协议终于接近正式标准化。预览版现在可以在服务器和浏览器中进行测试。</p><p>与 HTTP/2 相比，HTTP/3 有很大的性能改进，这主要是因为它将底层传输协议从 TCP 改为基于 UDP 的 QUIC。在这篇文章中，我们将深入了解其中的一项改进，即<strong>消除队头阻塞</strong>（Head-of-Line blocking, 简写：HOL blocking）问题。这很有用，因为我读过很多关于这实际上意味着什么以及它在现实中有多大帮助的误解。解决队头阻塞也是 HTTP/3 和 QUIC 以及 HTTP/2 背后的主要动机之一，因此它也为协议演进的原因提供了一个极好的视角。</p><p>我将首先介绍队头阻塞问题，然后在整个 HTTP 历史中跟踪它的不同形式。我们还将研究它如何与其他系统交互，如优先级和拥塞控制。我们的目标是帮助人们对 HTTP/3 的性能改进做出正确的判断，而这（剧透）可能不像营销材料中所说的那样令人惊讶。</p><p><strong>目录：</strong></p><ol><li>什么是队头阻塞？</li><li>HTTP/1.1 的队头阻塞</li><li>HTTP/2（基于 TCP）的队头阻塞</li><li>HTTP/3（基于 QUIC）的队头阻塞</li><li>总结与结论</li></ol><p><strong>彩蛋内容：</strong></p><ul><li>彩蛋：HTTP/1.1 管道</li><li>彩蛋：TLS 队头阻塞</li><li>彩蛋：传输拥堵控制</li><li>彩蛋：多路复用是否重要？</li></ul><h2 id="什么是队头阻塞（Head-of-Line-blocking）？">什么是队头阻塞（<strong>Head-of-Line blocking</strong>）？</h2><p>很难给你一个单一的队头阻塞（HOL blocking）的技术定义，因为这篇博客文章单独描述了它的四个不同变体。然而，一个简单的定义是：</p><blockquote><p>当单个（慢）对象阻止其他/后续的对象前进时</p></blockquote><p>现实生活中一个很好的比喻就是只有一个收银台的杂货店。一个顾客买了很多东西，最后会耽误排在他后面的人，因为顾客是以先进先出（First In, First Out）的方式服务的。另一个例子是只有单行道的高速公路。在这条路上发生一起车祸，可能会使整个通道堵塞很长一段时间。因此，即使是在“头部（head）”一个单一的问题可以“阻塞（block）”整条“线（line）”。</p><p>这个概念一直是最难解决的 Web 性能问题之一。为了理解这一点，让我们从 HTTP/1.1 开始讲起。</p><h2 id="HTTP-1-1-的队头阻塞">HTTP/1.1 的队头阻塞</h2><p>HTTP/1.1是一种更简单的协议。一个协议仍然可以基于文本并在网络上可读的时代。如下图1所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132357401.png" alt="image-20240427132357401"></p><center>图1：服务器 HTTP/1.1 响应 script.js</center><p>在本例中，浏览器基于 HTTP/1.1上 请求简单的<code>script.js</code>文件（绿色），图1显示了服务器对该请求的响应。我们可以看到 HTTP 方面本身很简单：它只是在明文文件内容或“有效荷载”（payload）前面直接添加一些文本“headers”（红色）。然后，头（Headers）+ 有效荷载（payload）被传递到底层 TCP（橙色），以便真实传输到客户端。对于这个例子，假设我们不能将整个文件放入一个 TCP 包中，并且必须将它分成两部分。</p><p><em>注意：实际上，当使用 HTTPS 时，HTTP 和 TCP 之间有另一个安全层，通常使用 TLS 协议。不过，为了清晰起见，我们在这里省略了这一点。我在结尾加入了一个额外的彩蛋部分，详细说明了 TLS 特定的队头阻塞变体以及 QUIC 如何避免它。阅读完正文后，请随意阅读它（以及其他的彩蛋部分）。</em></p><p>现在让我们看看当浏览器也请求<code>style.css</code>时发生了什么，如图2：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132410754.png" alt="image-20240427132410754"></p><center>图2：服务器 HTTP/1.1 响应 script.js 和 sytle.css</center><p>在本例中，当<code>script.js</code>的响应传输之后，我们发送<code>style.css</code>（紫色）。<code>style.css</code>的头部（headers）和内容只是附加在 JavaScript（JS）文件之后。接收者使用<strong>Content-Length</strong> header 来知道每个响应的结束位置和另一个响应的开始位置（在我们的简化示例中，<code>script.js</code>是1000字节，而<code>style.css</code>只有600字节）。</p><p>在这个包含两个小文件的简单示例中，所有这些似乎都很合理。但是，假设 JS 文件比 CSS 大得多（比如说 1MB 而不是 1KB）。这种情况下，在下载整个JS文件之前，CSS 必须等待，尽管它要小得多，其实可以更早地解析/使用。更直接地将其可视化，使用数字 1 表示<code>large_script.js</code>和 2 表示<code>style.css</code>，我们会得到这样的结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11111111111111111111111111111111111111122</span><br></pre></td></tr></table></figure><p>你可以看到这是一个队头阻塞问题的例子！现在你可能会想：这很容易解决！只需让浏览器在JS文件之前请求CSS文件！然而，至关重要的是，浏览器无法预先知道这两个文件中的哪一个在请求时会成为更大的文件。这是因为没有办法在HTML中指明文件有多大（类似这样的东西很不错，HTML工作组：<code>&lt;img src=&quot;thisisfine.jpg&quot; size=&quot;15000&quot; /&gt;</code>）。</p><p>这个问题的“真正”解决方案是采用<strong>多路复用（multiplexing）</strong>。如果我们可以将每个文件的有效荷载（header）分成更小的片（pieces）或“块”（chunks），我们就可以在网络上混合或“交错”（interleave）这些块：为 JS 发送一个块，为 CSS 发送一个块，然后再发送另一个用于 JS，等等，直到文件被下载为止。使用这种方法，较小的CSS文件将更早地下载（并且可用），同时只将较大的JS文件延迟一点。用数字形象化我们会得到：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12121111111111111111111111111111111111111</span><br></pre></td></tr></table></figure><p>然而不幸的是，由于协议存在一些基础的限制，这种多路复用在 HTTP/1.1 中是不可能的。为了理解这一点，我们甚至不需要继续查看大资源对小资源（large-vs-small）场景，因为它已经在我们的示例中显示了两个较小的文件。如图3，我们只为两个资源交错4个块：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427211652242.png" alt="image-20240427211652242"></p><center>图3：服务器 HTTP/1.1 多路复用 script.js 和 style.css</center><p>这里的主要问题是 HTTP/1.1 是一个纯文本协议，它只在有效荷载（payload）的前面附加头（headers）。它不会进一步区分单个（大块）资源与其他资源。让我们用一个例子来说明这一点，如果我们尝试了它会发生什么。在图3中，浏览器开始分析<code>script.js</code>并期望后面有1000个字节（Content-Length）的有效荷载。但是，它只接收450个 JS 字节（第一个块），然后开始读取<code>sytle.css</code>的头部。它最终将 CSS 头部和第一个 CSS 块解释为JS的一部分，因为这两个文件的有效荷载和头都是纯文本。更糟糕的是，它在读取1000个字节后停止，直到第二个<code>script.js</code>块的一半。此时，它看不到有效的新报头，必须删除 TCP 数据包3（packet 3）的其余部分。然后浏览器传递它认为的内容<code>script.js</code>到JS解析器，它失败了因为不是有效的 JavaScript：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; &#125;</span><br><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">600</span></span><br><span class="line"></span><br><span class="line">.<span class="property">h1</span> &#123; font-<span class="attr">size</span>: 4em; &#125;</span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>同样，您可以说有一个简单的解决方案：让浏览器查找<code>HTTP/1.1 &#123;statusCode&#125; &#123;statusString&#125;\n</code>模式来查看新的头块何时开始。这可能适用于 TCP 数据包2（packet 2），但在数据包3（packet 3）中会失败：浏览器如何知道绿色的<code>script.js</code>块在哪里结束和紫色<code>style.css</code>块从哪里开始？</p><p>这是 HTTP/1.1 协议设计方式的一个基础限制。如果您只有一个 HTTP/1.1 连接，那么在您切换到发送新资源之前，必须<strong>完整地</strong>传输资源响应。如果前面的资源创建缓慢（例如，从数据库查询动态生成的<code>index.html</code>）或者，如上所述，如果前面的资源很大。这些问题可能会引起队头阻塞问题。</p><p>这就是为什么浏览器开始为 HTTP/1.1 上的每个页面加载<a href="https://link.zhihu.com/?target=http%3A//www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/">打开多个并行 TCP 连接</a>（通常为6个）。这样，请求可以分布在这些单独的连接上，并且不再有队头阻塞。也就是说，除非每页有超过6个资源…这当然是很常见的。这就是在多个域名上“分片”（sharding）资源的实践(<a href="https://link.zhihu.com/?target=http%3A//img.mysite.com/">img.mysite.com</a>, <a href="http://static.mysite.com">static.mysite.com</a>, 等）和 CDN 的由来。由于每个单独的域名有6个连接，浏览器将为每个页面加载总共打开 30-ish 个 TCP 连接。这是可行的，但有相当大的开销：建立一个新的 TCP 连接可能是昂贵的（例如在服务器上的状态和内存方面，以及设置 TLS 加密的计算），并且需要消耗一些时间（特别是对于 HTTPS 连接，因为 TLS 需要自己的握手）。</p><p>由于这个问题不能用 HTTP/1.1 解决，而且并行 TCP 连接的补丁解决方案也不能随着时间的推移扩展得太好，很明显需要一种全新的方法，这就是后来的 HTTP/2。</p><p><em>注意：阅读本文的老哥可能会表示想知道 HTTP/1.1 管道（pipelining）。我决定不在这里讨论这一点，以保持整个故事的流畅性，但对更深入的技术感兴趣的人可以阅读结尾的彩蛋部分。</em></p><h2 id="HTTP-2（基于-TCP）的队头阻塞"><strong>HTTP/2（基于 TCP）的队头阻塞</strong></h2><p>那么，让我们回顾一下。HTTP/1.1 有一个队头阻塞问题，一个大的或慢的响应会延迟后面的其他响应。这主要是因为协议本质上是纯文本的，在资源块（resource chunks）之间不使用分隔符。作为一种解决办法，浏览器打开许多并行TCP连接，这既不高效，也不可扩展。</p><p>因此，HTTP/2 的目标非常明确：<strong>我们能够回到单个 TCP 连接，解决队头阻塞问题</strong>。换一种说法：我们希望能够正确地复用资源块（resource chunks）。这在 HTTP/1.1 中是不可能的，因为没有办法分辨一个块属于哪个资源，或者它在哪里结束，另一个块从哪里开始。HTTP/2 非常优雅地解决了这一问题，它在资源块之前添加了<strong>帧（frames）</strong>。如图4所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132443159.png" alt="image-20240427132443159"></p><center>图4：HTTP/1.1 vs HTTP/2 响应 script.js</center><p>HTTP/2 在每个块前面放置一个所谓的数据帧（DATA frame）。这些数据帧主要包含两个关键的元数据。首先：下面的块属于哪个资源。每个资源的“字节流（bytestream）”都被分配了一个唯一的数字，即<strong>流id（stream id）</strong>。第二：块的大小是多少。协议还有许多其他帧类型，图5也显示了头部帧（HEADERS frame）。这再次使用流id（stream id）来指出这些头（headers）属于哪个响应，这样甚至可以将头（headers）从它们的实际响应数据中分离出来。</p><p>使用这些帧，HTTP/2 确实允许在一个连接上正确地复用多个资源，参见图5：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132510915.png" alt="image-20240427132510915"></p><center>图5：HTTP/2 多路复用响应 script.js 和 style.css</center><p>与图3中的示例不同，浏览器现在可以完美地处理这种情况。它首先处理<code>script.js</code>的头部帧（HEADERS frame），然后是第一个JS块的数据帧（DATA frame）。从数据帧（DATA frame）中包含的块长度来看，浏览器知道它只延伸到 TCP 数据包1的末尾，并且需要从 TCP 数据包2开始寻找一个全新的帧。在那里它确实找到了<code>style.css</code>的头（HEADERS）， 下一个数据帧（DATA frame）含有与第一个数据帧（1）不同的流 id（2），因此浏览器知道这属于不同的资源。同样的情况也适用于 TCP 数据包3，其中数据帧（DATA frame）流 id 用于将响应块“解复用”（de-multiplex）到正确的资源“流”（streams）。</p><p>因此，通过“framing”单个消息，HTTP/2 比 HTTP/1.1 更加灵活。它允许在单个 TCP 连接上通过交错排列块来多路传输多个资源。它还解决了第一个资源缓慢时的队头阻塞问题：而不必等待查询数据库生成的<code>index.html</code>，服务器可以在等待<code>index.html</code>时开始发送其他资源。</p><p>HTTP/2 的方式一个重要结果是，我们突然需要一种方法让浏览器与服务器通信，单个连接的带宽如何跨资源分布（distributed）。换一种说法：资源块应该如何“调度（scheduled）”或交错（interleaved）。如果我们再次用 1 和 2 来表示，我们会发现对于 HTTP/1.1，唯一的选项是11112222（我们称之为顺序的（sequential））。然而， HTTP/2 有更多的自由：</p><ul><li>公平多路复用（例如两个渐进的 JPEGs）：12121212</li><li>加权多路复用（2是1的两倍）：22122122121</li><li>反向顺序调度（例如2是密钥服务器推送的资源）：22221111</li><li>部分调度（流1被中止且未完整发送）：112222</li></ul><p>使用哪种方法是由 HTTP/2 中所谓的“优先级（prioritization）”系统驱动的，所选择的方法对Web 性能有很大的影响。然而，这本身就是一个非常复杂的话题，你不需要在接下来的博客文章中理解它，所以我不把它放在这里讲了。</p><p>我想您会同意，通过 HTTP/2 的帧（frames）及其优先级设置，它确实解决了 HTTP/1.1 的队头阻塞问题。这意味着我在这里的工作完成了，我们都可以回家了。对吗？好吧，没那么简单。我们已经解决了 HTTP/1.1 的队头阻塞，是的，但是 TCP 的队头阻塞呢？</p><h2 id="TCP-队头阻塞">TCP 队头阻塞</h2><p>事实证明，HTTP/2 只解决了 HTTP 级别的队头阻塞，我们可以称之为“应用层”队头阻塞。然而，在典型的网络模型中，还需要考虑下面的其他层。您可以在图6中清楚地看到这一点：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132530740.png" alt="image-20240427132530740"></p><center>图6：典型网络模型中的几个协议层</center><p>HTTP 位于顶层，但首先由安全层的 TLS 支持（请参阅“彩蛋 TLS”部分），然后接着再由传输层的 TCP 传输。这些协议中的每一层都用一些元数据包装来自其上一层的数据。例如，在我们的 HTTP(S) 数据中预先加上 TCP 包头（packet header），然后将其放入 IP 包等，这样就可以在协议之间实现相对简洁的分离。这反过来又有利于它们的可重用性：像 TCP 这样的传输层协议不必关心它正在传输什么类型的数据（可以是 HTTP，也可以是 FTP，也可以是 SSH，谁知道呢），而且 IP 对于 TCP 和 UDP 都能很好地工作。</p><p>然而，如果我们想将多个 HTTP/2 资源多路传输到一个 TCP 连接上，这确实会产生重要的后果。如图7：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132541483.png" alt="image-20240427132541483"></p><center>图7：HTTP/2 和 TCP 在透视图上的差异</center><p>虽然我们和浏览器都知道我们正在获取 JavaScript 和 CSS 文件，但 HTTP/2 不需要知道这一点。它只知道它在使用来自不同资源流 id （stream id）的块。然而，**TCP 甚至不知道它在传输 HTTP！**TCP 所知道的就是它被赋予了一系列字节，它必须从一台计算机传输另一台计算机。为此，它使用特定最大大小（maximum size）的数据包，通常大约为1450字节。每个数据包只跟踪它携带的数据的那一部分（字节范围），这样原始数据就可以按照正确的顺序重建。</p><p>换言之，这两个层之间的透视图是不匹配的：HTTP/2 可以看到多个独立的资源字节流（bytestream），而 TCP 只看到一个不透明的字节流（bytestreams）。图7的TCP数据包3就是一个例子：TCP 只知道它正在传输的任何内容的字节 750 到字节1 599。另一方面，HTTP/2 知道数据包3中实际上有两个独立资源的两个块。<em>（注意：实际上，每个 HTTP/2 帧（如 DATA 和 HEADERS）的大小也有几个字节。为了简单起见，我没有计算额外的开销或这里的 HEADERS 帧，以使数字更直观。）</em></p><p>所有这些看起来都是不必要的细节，直到你意识到互联网是一个根本不可靠的网络。在从一个端点到另一个端点的传输过程中，数据包会丢失和延迟。TCP 的可靠性正是其最受欢迎的原因之一。它只需重<strong>新传输丢失数据包的副本</strong>就可以做到这一点。</p><p>我们现在可以理解传输层是如何导致队头阻塞的。再次思考下图7并问自己：如果 TCP 数据包2在网络中丢失，但数据包1和数据包3已经到达，会发生什么情况？请记住，TCP并不知道它正在承载 HTTP/2，只知道它需要按顺序传递数据。因此，它知道数据包1的内容可以安全使用，并将这些内容传递给浏览器。然而，它发现数据包1中的字节和数据包3中的字节（放数据包2 的地方）之间存在间隙，因此还不能将数据包3传递给浏览器。TCP 将数据包3保存在其接收缓冲区（receive buffer）中，直到它接收到数据包2的重传副本（这至少需要往返服务器一次），之后它可以按照正确的顺序将这两个数据包都传递给浏览器。换个说法：<strong>丢失的数据包2 队头阻塞（HOL blocking）数据包3！</strong></p><p>您可能不清楚为什么这是个问题，所以让我们更深入地研究图7中 HTTP 层的 TCP 包中的实际内容。我们可以看到，TCP 数据包2只携带流id 2（CSS文件）的数据，数据包3同时携带流1（JS文件）和流2的数据。在 HTTP 级别，我们知道这两个流是独立的，并且由数据帧（DATA frame）清楚地描述出来。因此，理论上我们可以完美地将数据包3传递给浏览器，而不必等待数据包2到达。浏览器将看到流id为1的数据帧，并且能够直接使用它。只有流2必须被挂起，等待数据包2的重新传输。这将比我们从 TCP 的方式中得到的效率更高，TCP 的方式最终会阻塞流1和流2。</p><p>另一个例子是数据包1丢失，但是接收到2和3的情况。TCP将再次阻止数据包2和3，等待1。但是，我们可以看到，在HTTP/2级别，流2的数据（CSS文件）完全存在于数据包2和3中，不必等待数据包1的重新传输。浏览器本可以完美地解析/处理/使用 CSS 文件，但却被困在等待 JS 文件的重新传输。</p><p>总之，TCP 不知道 HTTP/2 的独立流（streams）这一事实意味着 <strong>TCP 层队头阻塞（由于丢失或延迟的数据包）也最终导致 HTTP 队头阻塞！</strong></p><p>现在，您可能会问自己：那重点是什么？如果我们仍然有 TCP 队头阻塞，为什么还要使用HTTP/2 呢？好吧，主要原因是虽然数据包丢失确实发生在网络上，但还是比较少见的。特别是在有线网络中，包丢失率只有 0.01%。即使是在最差的蜂窝网络上，在现实中，您也很少看到丢包率高于2%。这与数据包丢失和抖动（网络中的延迟变化）通常是<strong>突发性</strong>的这一事实结合在一起的。包丢失率为2%并不意味着每100个包中总是有2个包丢失（例如数据包 42 和 96）。实际上，可能更像是在总共500个包中丢失10个<strong>连续的</strong>包（例如数据包255到265）。这是因为数据包丢失通常是由网络路径中的路由器内存缓冲区暂时溢出引起的，这些缓冲区开始丢弃无法存储的数据包。不过，细节在这里并不重要。重要的是：是的，TCP 队头阻塞是真实存在的，但是它对 Web 性能的影响要比HTTP/1.1 队头阻塞小得多，HTTP/1.1 队头阻塞几乎可以保证每次都会遇到它，而且它也会受到 TCP 队头阻塞的影响！</p><p>然而，当比较单个连接上的 HTTP/2 和单个连接上的 HTTP/1.1 时，这个基本上是真的。正如我们之前所看到的，实际上它并不是这样工作的，因为 HTTP/1.1 通常会打开多个连接。这使得 HTTP/1.1 不仅在一定程度上减轻了 HTTP 级别，而且减轻了 TCP 级别的队头阻塞。因此，在某些情况下，单个连接上的 HTTP/2 很难比6个连接上的 HTTP/1.1 快，甚至与 HTTP/1.1 一样快。这主要是由于 TCP 的**“拥塞控制”（congestion control）**机制。然而，这是另一个非常深入的话题，并不是我们讨论队头阻塞（HOL blocking）的核心，所以我把它移到了末尾的另一个彩蛋部分。</p><p>总之，事实上，我们看到（也许出乎意料），<strong>HTTP/2 目前部署在浏览器和服务器中，在大多数情况下通常与 HTTP/1.1 一样快或略快</strong>。在我看来，这部分是因为网站在优化 HTTP/2 方面做得更好，部分原因是浏览器仍然经常打开多个并行 HTTP/2 连接，从而使两者兼得。</p><p>然而，也有一些情况（特别是在数据包丢失率较高的低速网络上），6个连接的 HTTP/1.1 仍然比一个连接的 HTTP/2 更为出色，这通常是由于 TCP 级别的队头阻塞问题造成的。正是这个事实极大地推动了新的 QUIC 传输协议的开发，以取代 TCP。</p><h2 id="HTTP-3（基于-QUIC）的队头阻塞">HTTP/3（基于 QUIC）的队头阻塞</h2><p>在那之后，我们终于可以开始谈论新的东西了！但首先，让我们总结一下我们目前所学到的：</p><ul><li>HTTP/1.1 有队头阻塞，因为它需要完整地发送响应，并且不能多路复用它们</li><li>HTTP/2 通过引入“帧”（frames）标识每个资源块属于哪个“流”（stream）来解决这个问题</li><li>然而，TCP 不知道这些单独的“流”（streams），只是把所有的东西看作一个大流（1 big stream）</li><li>如果一个 TCP 包丢失，所有后续的包都需要等待它的重传，即使它们包含来自不同流的无关联数据。TCP 具有传输层队头阻塞。</li></ul><p>我敢肯定你现在可以预测我们如何解决 TCP 的问题，对吧？毕竟，解决方案很简单：我们“只是”需要<strong>让传输层知道不同的、独立的流</strong>！这样，如果一个流的数据丢失，传输层本身就知道它不需要阻塞其他流。</p><p>尽管这个解决方案概念简单，但在现实中却很难实现。由于各种原因，不可能改变 TCP 本身使其具有流意识（stream-aware）。选择的替代方法是以 QUIC 的形式实现一个全新的传输层协议。为了使 QUIC 现实中可以部署在因特网上，它运行在不可靠的 UDP 协议之上。然而，非常重要的是，这并不意味着 QUIC 本身也是不可靠的！在许多方面，QUIC 应该被看作是一个 TCP 2.0。它包括 TCP 的所有特性（可靠性、拥塞控制、流量控制、排序等）的最佳版本，以及更多其他特性。QUIC还完全集成了TLS（参见图6），并且不允许未加密的连接。因为 QUIC 与 TCP 如此不同，这也意味着我们不能仅仅在其上运行 HTTP/2，这就是为什么创建了 HTTP/3（稍后我们将详细讨论这个问题）。这篇博文已经足够长了，不需要更详细地讨论QUIC，因此我将只关注我们需要了解当前队头阻塞讨论的几个部分。如图8所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132618174.png" alt="image-20240427132618174"></p><center>图8：HTTP/1.1 vs HTTP/2 vs HTTP/3 响应 script.js</center><p>我们观察到，让 QUIC 知道不同的流（streams）是非常简单的。QUIC 受到 HTTP/2 帧方式（framing-approach）的启发，还添加了自己的帧（frames）；在本例中是流帧（STREAM frame）。流id（stream id）以前在 HTTP/2 的数据帧（DATA frame）中，现在被<strong>下移到传输层的 QUIC 流帧（STREAM frame）中</strong>。这也说明了如果我们想使用 QUIC，我们需要一个新版本的 HTTP 的原因之一：如果我们只在 QUIC 之上运行 HTTP/2，那么我们将有两个（可能冲突的）“流层”（stream layers）。相反，HTTP/3 从 HTTP 层删除了流的概念（它的数据帧（DATA frames）没有流id），而是重新使用底层的 QUIC 流。</p><p><em>注意：这并不意味着 QUIC 突然知道 JS 或 CSS 文件，甚至知道它正在传输 HTTP；和 TCP 一样，QUIC 应该是一个通用的、可重用的协议。它只知道有独立的流（streams），它可以单独处理，而不必知道它们到底是什么。</em></p><p>现在我们了解了QUIC的流帧（STREAM frames），也很容易看出它们如何帮助解决图9中的传输层队头阻塞：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132627615.png" alt="image-20240427132627615"></p><center>图9：TCP 和 QUIC 在透视图上的差异</center><p>与 HTTP/2 的数据帧（DATA frames）非常相似，<strong>QUIC 的流帧（STREAM frames）分别跟踪每个流的字节范围</strong>。这与 TCP 不同，TCP 只是将所有流数据附加到一个大 blob 中。像以前一样，让我们考虑一下如果 QUIC 数据包2丢失，而 1 和 3 到达会发生什么。与 TCP 类似，数据包1中流1（stream 1）的数据可以直接传递到浏览器。然而，对于数据包3，QUIC 可以比 TCP 更聪明。它查看流1的字节范围，发现这个流帧（STREAM frame）完全遵循流id 1的第一个流帧 STREAM frame（字节 450 跟在字节 449 之后，因此数据中没有字节间隙）。它可以立即将这些数据提供给浏览器进行处理。然而，对于流id 2，QUIC确实看到了一个缺口（它还没有接收到字节0-299，这些字节在丢失的 QUIC 数据包2中）。它将保存该流帧（STREAM frame），直到 QUIC 数据包2的重传（retransmission）到达。再次将其与 TCP 进行对比，后者也将数据流1的数据保留在数据包3中！</p><p>类似的情况发生在另一种情形下，数据包1丢失，但2和3到达。QUIC 知道它已经接收到流2（stream 2）的所有预期数据，并将其传递给浏览器，只保留流1（stream 1）。我们可以看到，对于这个例子，QUIC 确实解决了 TCP 的队头阻塞！</p><p>不过，这种方式有几个重要的后果。最有影响的是 <strong>QUIC 数据可能不再以与发送时完全相同的顺序发送到浏览器</strong>。对于 TCP，如果您发送数据包1、2和3，它们的内容将以完全相同的顺序发送到浏览器（这就是导致队头阻塞的第一个原因）。然而，对于 QUIC，在上面的第二个示例中，在数据包1丢失的情况下，浏览器首先看到数据包2的内容，然后是数据包3的最后一部分，然后是数据包1的（重传），然后是数据包3的第一部分。换言之：<strong>QUIC 在单个资源流中保留了顺序，但不再跨单个流（individual streams）进行排序</strong>。</p><p>这是需要 HTTP/3 的第二个也是最重要的原因，因为事实证明，HTTP/2 中的几个系统非常严重地依赖于 TCP 跨流（across streams）的完全确定性排序。例如，HTTP/2 的优先级系统通过传输更改树数据结构（tree data structure ）布局的操作（例如，将资源5添加为资源6的子级）工作的。如果这些操作应用的顺序与发送顺序不同（现在通过 QUIC 是可能出现的），客户端和服务端的优先级状态可能不同。HTTP/2 的头压缩系统 HPACK 也会发生类似的情况。理解这里的细节并不重要，只需要得出结论：要让这些 HTTP/2 系统直接应用 QUIC 是非常困难的。因此，<strong>对于 HTTP/3，有些系统使用完全不同的方法</strong>。例如，QPACK 是 HTTP/3 的 HPACK 版本，它允许在潜在的队头阻塞和压缩性能之间进行自我选择的权衡。HTTP/2 的优先级系统甚至被完全删除，很可能会被 HTTP/3 的简化版本所取代。所有这些都是因为，与 TCP 不同，QUIC 不能完全保证首先发送的数据也会首先被接收。</p><p>所以，所有 QUIC 和重新设想 HTTP 版本的这些工作都是为了消除传输层队头阻塞。我当然希望这是值得的…</p><h2 id="QUIC-和-HTTP-3-真的完全消除了队头阻塞？">QUIC 和 HTTP/3 真的完全消除了队头阻塞？</h2><p>如果你允许我说一点不好的话，我想引用自己几个段落前的话：</p><blockquote><p>QUIC在单个资源流中保留排序</p></blockquote><p>你想想，这很符合逻辑。它基本上是这样说的：如果你有一个 JavaScript 文件，该文件需要重新组装（re-assembled），就像它是由开发人员创建的一样（或者，老实说，通过 webpack），否则代码将无法工作。任何类型的文件都是一样的：把图片随机地放在一起意味着你阿姨寄来的一些奇怪的电子圣诞卡（甚至更奇怪的）。这意味着，<strong>即使在QUIC中，我们仍然有一种队头阻塞的形式</strong>：如果在单个流中有一个字节间隙，那么流的后面部分仍然会被阻塞，直到这个间隙被填满。</p><p>这有一个关键的含义：QUIC 的队头阻塞移除只有在<strong>多个资源流同时活动时</strong>才有效。这样，如果其中一个流上有包丢失，其他流仍然可以继续。这就是我们在上面图9的例子中看到的。然而，如果在某一时刻只有一个流在活动，任何丢包都会影响到这条孤独的流，我们仍然会被阻塞，即使在 QUIC。所以，真正的问题是：<strong>我们会经常有多个并发流（simultaneous streams）吗？</strong></p><p>正如对 HTTP/2 所解释的，这是可以通过使用适当的资源调度器/多路复用方法来配置的。流1和流2可以被发送 1122、2121、1221 等，并且浏览器可以使用优先级系统指定它希望服务器遵循的方案（对于 HTTP/3 仍然如此）。所以浏览器可以说：嘿！我注意到这个连接有严重的数据包丢失。我将让服务器以 121212 模式而不是 111222 向我发送资源。这样，如果1的一个数据包丢失，2仍然可以继续工作。然而，这种模式的问题是，<strong>121212 模式（或者类似的）对资源加载性能通常不是最优的。</strong></p><p>这是另一个复杂的话题，我现在不想太深入。但是，通过我们的 JS 和 CSS 文件的简单示例，基本概念很容易理解。正如您可能知道的那样，浏览器需要接收整个 JS 或 CSS 文件，然后才能实际执行/应用它（虽然有些浏览器已经可以开始编译/解析部分下载的文件，但它们仍然需要等待它们完整后才能实际使用它们）。但是，大量多路复用这些文件的资源块最终会延迟它们：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">使用多路复用（较慢）：</span><br><span class="line">---------------------------</span><br><span class="line">                              流1（Stream 1）只有到这里才能使用</span><br><span class="line">                              ▼</span><br><span class="line">12121212121212121212121212121212</span><br><span class="line">                               ▲</span><br><span class="line">                               流2（Stream 2）在这里下载完毕</span><br><span class="line"></span><br><span class="line">未使用多路复用/顺序（流1（Stream 1）更快）：</span><br><span class="line">------------------------------------------------------</span><br><span class="line">                 流1（Stream 1）在这里下载完毕，可以更早地使用</span><br><span class="line">                 ▼   </span><br><span class="line">11111111111111111122222222222222</span><br><span class="line">                               ▲</span><br><span class="line">                               流2（Stream 2）还是在这里下载完毕</span><br></pre></td></tr></table></figure><p>现在，这个话题有很多细微差别，当然也存在多路复用方法更快的情况（例如，如果其中一个文件比另一个文件小得多，正如本文前面讨论的那样）。然而，一般来说，对于大多数页面和大多数资源类型，我们可以说顺序方法最有效。</p><p>现在，这是什么意思？对于最佳性能，我们有<strong>两个相互冲突的性能优化建议</strong>：</p><ol><li>从 QUIC 的队头阻塞移除中获利：多路复用发送资源（12121212）</li><li>为了确保浏览器能够尽快处理核心资源：按顺序发送资源（11112222）</li></ol><p>那么，哪一个是正确的？或者至少：哪一个应该优先于另一个？可悲的是，目前我还不能给你一个明确的答案，因为这是我正在研究的一个主题。这之所以困难，主要是因为<strong>数据包丢失模式很难预测</strong>。</p><p>正如我们在上面讨论过的，包丢失通常是突发性的和分组的。这意味着我们上面 12121212 的例子已经过于简化了。图10给出了一个更真实的概述。在这里，我们假设在下载2个流（绿色和紫色）时，我们有一个8个丢失包的突发事件：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132717355.png" alt="image-20240427132717355"></p><center>图10：HTTP/3 over QUIC 流多路复用对防止队头阻塞的影响。每个矩形是一个单独的QUIC包，为一个流传输数据。红叉表示丢失的包。</center><p>在图10的顶部第一行中，我们可以看到（通常）对资源加载性能更好的顺序情况。在这里，我们看到 QUIC 对消除队头阻塞确实没有那么大的帮助：在丢包之后收到的绿包不能被浏览器处理，因为它们属于经历丢包的同一个流。第二个（紫色）流的数据尚未收到，因此无法处理。</p><p>这与中间一行不同，中间一行（偶然！）丢失的8个数据包都来自绿色流。这意味着浏览器可以处理最后收到的紫色数据包。然而，正如前面所讨论的，如果浏览器是 JS 或 CSS 文件，如果有更多的紫色数据出现，浏览器可能不会从中受益太多。因此，在这里，我们从 QUIC 的队头阻塞移除中获得了一些好处（因为紫色没有被绿色阻止），但是可能会牺牲整体资源加载性能（因为多路复用会导致文件稍后完成）。</p><p>最下面一行几乎是最糟糕的情况。8个丢失的数据包分布在两个流中。这意味着这两个流现在都被队头阻塞了：不是因为它们像TCP那样在等待对方，而是因为每个流仍然需要自己排序。</p><p><em>注意：这也是为什么大多数 QUIC 实现很少同时创建包含来自多个流（streams）的数据包（packets）的原因。如果其中一个数据包丢失，则会立即导致单个数据包中所有流的队头阻塞！</em></p><p>因此，我们看到可能存在某种最佳位置（中间一行），在这里，<strong>队头阻塞预防和资源加载性能之间的权衡可能是值得的</strong>。然而，正如我们所说，丢包模式很难预测。不会总是8个数据包。它们不会总是一样的8个数据包。如果我们搞错了，丢失的数据包只向左移动了一个，我们突然也少了一个紫色的包，这基本上使我们降级到与最下面一行相似的位置…</p><p>我想你会同意我的观点，那听起来很复杂，甚至可能太复杂了。即便如此，问题是这会有多大帮助。如前所述，包丢失在许多网络类型中通常比较少见，可能（也许？）太罕见了，看不到 QUIC 移除队头阻塞的影响。另一方面，已经有很好的文档证明无论您使用的是 HTTP/2 还是 HTTP/3，每个资源的数据包（图10的最后一行）对资源加载性能都是相当不利的。</p><p>因此，有人可能会说，虽然 QUIC 和 HTTP/3 不再受到应用层或传输层队头阻塞的影响，但这在现实中可能并不重要。我不能确定这一点，因为我们还没有完全完成 QUIC 和 HTTP/3 的实现，所以我也没有最后的度量（measurements）。然而，我个人的直觉（这是由我的几个早期实验的结果支持的）说，<strong>QUIC 消除队头阻塞可能实际上对 Web 性能没有太大帮助</strong>，因为理想情况下，您不希望为了资源加载性能而对许多流进行多路复用。而且，如果你真的想让它工作得很好，你就必须非常巧妙地调整你的多路复用方式来适应连接类型，因为你绝对不想在包丢失非常低的快速网络上进行大量的多路复用（因为它们无论如何都不会遭受太多的队头阻塞）。就我个人而言，我不认为会发生这种事。</p><p><em>注意：在这里，在结尾，你可能已经注意到我的故事有点不一致。一开始，我说 HTTP/1.1 的问题是它不允许多路复用。最后，我说多路复用在现实中并不那么重要。为了帮助解决这个明显的矛盾，我添加了另一个额外的彩蛋部分</em></p><h2 id="总结与结论">总结与结论</h2><p>在这篇（很长，我知道）的文章中，我们一直在追踪队头阻塞。我们首先讨论了为什么 HTTP/1.1 会受到应用层队头阻塞的影响。这主要是因为 HTTP/1.1 没有识别单个资源块的方法。HTTP/2 使用帧来标记这些块并启用多路复用。这解决了 HTTP/1.1 的问题，但遗憾的是HTTP/2 仍然受到底层 TCP 的限制。由于 TCP 将 HTTP/2 数据抽象为一个单一的、有序的、但不透明的流，因此如果数据包在网络上丢失或严重延迟，它将遭受队头阻塞。QUIC 通过将 HTTP/2 的一些概念引入传输层来解决这个问题。这反过来会产生严重的影响，因为跨流的数据不再是完全有序的。这最终导致需要一个全新的版本 HTTP/3，它只运行在 QUIC 之上（而 HTTP/2 只运行在 TCP 之上，请参见图6）。</p><p>我们需要所有这些上下文来批判性地思考 QUIC（以及 HTTP/3）中的队头阻塞移除在现实中对 Web 性能的实际帮助有多大。我们看到它可能只会对有大量数据包丢失的网络产生很大的影响。我们还讨论了为什么即使这样，您仍然需要多路复用资源，并看运气丢包对多路复用的影响怎么样。我们看到了为什么这样做实际上弊大于利，因为资源多路复用通常不是 Web 性能的最佳方案。我们得出的结论是，虽然现在确定这一点还为时过早，<strong>但在大多数情况下，QUIC 和 HTTP/3 的队头阻塞移除可能不会对 Web 性能起到多大作用</strong>。</p><p>那么…这又给我们留下什么样的 Web 性能评价呢？忽略 QUIC 和 HTTP/3，坚持 HTTP/2 + TCP？我当然不希望！<strong>我仍然相信 HTTP/3 总体上将比 HTTP/2 快</strong>，因为 QUIC 还包括其他性能改进。例如，它比 TCP 在网络上的开销更小，在拥塞控制方面更加灵活，而且最重要的是，它具有 0-RTT 连接建立特性。我觉得<strong>特别是 0-RTT 将提供最多的Web性能好处</strong>，尽管也有很多挑战。以后我会写另一篇关于 0-RTT 的博客文章，但是如果你迫不及待想知道更多关于放大攻击预防、重放攻击、初始拥塞窗口大小等的信息，请看我的另一篇 YouTube 讲座或阅读我最近的论文。</p><p>如果你喜欢所有这些，并希望在未来有更多的交流，请关注我的 twitter <a href="https://link.zhihu.com/?target=https%3A//twitter.com/programmingart">@programmingart</a>。</p><p>这篇文章的“在线文档”版本可以在  github 上找到。如果您有关于如何改进它的建议，请让我知道！</p><p>感谢您的阅读！</p><h2 id="彩蛋：HTTP-1-1-管道（pipelining）">彩蛋：HTTP/1.1 管道（<strong>pipelining</strong>）</h2><p>HTTP/1.1 包含了一个名为“管道“（pipelining）的特性，在我看来这是经常被误解的。我看过很多文章，甚至书籍中都有人声称 HTTP/1.1 管道解决了队头阻塞问题。我甚至见过一些人说管道和正确的多路复用是一样的。两种说法都是错误的。</p><p>我发现用类似彩蛋图1中的插图来解释 HTTP/1.1 管道是最简单的：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240427132814642.png" alt="image-20240427132814642"></p><center>彩蛋图1：HTTP/1.1 管道</center><p>如果没有管道（pipelining）（彩蛋图1的左侧），浏览器必须等待发送第二个资源请求，直到第一个请求的响应被完全接收（同样使用 Content-Length）。这会为每个请求增加一个往返时间（RTT）延迟，这对Web性能不利。</p><p>有了管道（彩蛋图1的中间部分），浏览器不必等待任何响应数据，现在可以背靠背地发送请求。这样，我们在连接过程中节省了一些 RTTs，使得加载过程更快。<em>另请注意，请回顾图2：您会看到实际上也在使用管道，因为服务器在 TCP 数据包2中打包 <code>script.js</code> 以及 <code>style.css</code> 的响应数据。当然，只有在服务器同时接收到这两个请求时，这才是可能的。</em></p><p>然而，最重要的是，这种管道只适用于来自浏览器的请求。正如HTTP/1.1 规范所说：</p><blockquote><p>服务器必须按照接收请求的顺序发送对这些[管道化]请求的响应。</p></blockquote><p>因此，我们看到，实际的响应块（response chunks）多路复用（如彩蛋图1右侧所示）在 HTTP/1.1 管道中仍然是不可能的。换一种说法：<strong>管道解决了请求的队头阻塞，而不是响应的队头阻塞</strong>。可悲的是，响应队头阻塞是导致 Web 性能问题最多的原因。</p><p>更糟糕的是，大多数浏览器实际上并没有在现实中使用 HTTP/1.1 管道，因为这会使队头阻塞在多个并行 TCP 连接的设置中变得更加不可预测。为了理解这一点，让我们设想一个设置，其中通过两个 TCP 连接从服务器请求三个文件 A（大）、B（小）和 C（小）。A 和 B 在不同的连接上被请求。现在，浏览器应该在哪个连接上传输对 C 的请求？正如我们之前所说，它不知道 A 还是 B 将成为最大/最慢的资源。</p><p>如果它猜对了（B），它就可以在传输 A 所需的时间内同时下载 B 和 C，从而获得了很好的加速效果。但是，如果猜测是错误的（A），B 的连接将长时间处于空闲状态，而 C 则在 A 后面被阻塞。这是因为 HTTP/1.1 也没有提供一种在请求被发送后“中止”的方法（HTTP/2 和 HTTP/3 允许这样做）。因此，浏览器不能简单地通过 B 的连接请求 C，因为它最终会请求两次 C。</p><p>为了解决所有这些问题，现代浏览器不使用管道，甚至会主动延迟对某些已发现资源（例如图像）的请求一段时间，以查看是否找到更重要的文件（例如 JS 和 CSS），以确保高优先级资源不会被阻塞。</p><p>很明显，HTTP/1.1 管道的失败是 HTTP/2 使用截然不同方法的另一个动机。然而，由于 HTTP/2 的优先级系统指导多路复用在现实中常常无法执行，一些浏览器甚至采取了延迟 HTTP/2 资源请求的方式来获得最佳性能。</p><h2 id="彩蛋：TLS-队头阻塞">彩蛋：TLS 队头阻塞</h2><p>如上所述，TLS 协议为应用层协议（如 HTTP）提供加密（和其他功能）。它通过将从 HTTP 获取的数据包装到 TLS 记录中，TLS 记录在概念上类似于 HTTP/2 帧（frames）或 TCP 数据包（packets）。例如，它们在开始时包含一些元数据，以标识记录的长度。然后，对该记录及其 HTTP 内容进行加密并传递给 TCP 进行传输。</p><p>就 CPU 使用率而言，加密可能是一项昂贵的操作，因此一次加密一个好数据块通常是一个好主意，因为这通常更有效。实际上，TLS 可以以高达 16KB 的块加密资源，这足以填充大约 11 个典型的 TCP 包（give 或 take）。</p><p>然而，至关重要的是，TLS 只能对整个记录进行解密，这就是为什么会出现 TLS 队头阻塞的情况。假设 TLS 记录分散在 11 个 TCP 包上，最后一个 TCP 包丢失。由于 TLS 记录是不完整的，它不能被解密，因此被卡在等待最后一个 TCP 包的重传。注意，在这个特定的情况下，没有 TCP 队头阻塞：在编号11之后没有数据包被卡住等待重新传输。换言之，如果我们在本例中使用纯 HTTP 而不是 HTTPS，那么前10个包中的 HTTP 数据可能已经被移动到浏览器中进行处理。然而，因为我们需要整个11包的 TLS 记录才能解密它，所以我们有了一种新形式的队头阻塞。</p><p>虽然这是一个非常具体的情况，在现实中可能不会经常发生，但在设计 QUIC 协议时，它仍然被考虑在内。因为那里的目标是彻底消除所有形式的队头阻塞（或至少尽可能多地消除），甚至这种边缘情况也必须被移除。这就是为什么 QUIC 集成了 TLS，它总是以每个包为基础加密数据，并且不直接使用 TLS 记录。正如我们所看到的，与使用更大的块相比，这效率更低，需要更多的 CPU，这也是为什么 QUIC 在当前实现中仍然比 TCP 慢的主要原因之一。</p><h2 id="彩蛋：传输拥塞控制">彩蛋：传输拥塞控制</h2><p>传输层协议如 TCP 和 QUIC 包括一种称为拥塞控制（Congestion Control）的机制。拥塞控制器的主要工作是确保网络不会同时被过多的数据过载。如果没有缓冲区的话，数据包就会溢出。所以，它通常只发送一点数据（通常是 14KB），看看是否能通过。如果数据到达，接收方将确认发送回发送方。只要所有发送的数据都得到确认，发送方就在每次 RTT 时将其发送速率加倍，直到观察到丢包事件（这意味着网络过载（1 位），它需要后退（1 位））。这就是 TCP 连接如何“探测”其可用带宽。</p><p><em>注：以上描述只是拥塞控制的一种方法。目前，其他方法也越来越流行，其中主要是</em> <a href="https://link.zhihu.com/?target=https%3A//research.google/pubs/pub45646/">BBR 算法</a><em>。BBR 并没有直接观察数据包丢失，而是大量考虑 RTT 波动来确定网络是否过载，这意味着它通常通过探测带宽来减少数据包丢失。</em></p><p>关键是：<strong>拥塞控制机制对每个 TCP（和 QUIC）连接都是独立的</strong>！这反过来也会影响到 HTTP层 的 Web 性能。首先，这意味着 HTTP/2 的单个连接最初只发送 14KB。然而，HTTP/1.1 的6个连接在它们的第一次传输中发送 14KB，大约是 84KB！随着时间的推移，这将变得复杂，因为每个 HTTP/1.1 连接使用每个 RTT 将其数据加倍。第二，只有在数据包丢失的情况下，连接才会降低其发送速率。对于 HTTP/2 的单个连接，即使是一个包丢失也意味着它将减慢速度（除了导致 TCP 队头阻塞之外！）。然而，对于 HTTP/1.1，只有一个连接上的一个包丢失只会减慢这一个连接的速度：其他5个连接可以保持正常的发送和增长。</p><p>这一切使一件事变得非常清楚：<strong>HTTP/2 的多路复用与 HTTP/1.1 的同时下载资源是不一样的</strong>（我还看到一些人声称这一点）。单个 HTTP/2 连接的可用带宽只是在不同文件之间分布/共享，但是块仍然是按顺序发送的。这与 HTTP/1.1 不同，后者以真正的并行方式发送内容。</p><p>现在，您可能会想知道：那么，<strong>HTTP/2 怎么可能比 HTTP/1.1 快呢</strong>？这是一个很好的问题，也是我断断续续问自己很久的问题。一个明显的答案是，如果你有超过6个文件。这就是 HTTP/2 在当时的市场营销方式：将一个图像分割成小正方形，然后通过 HTTP/1.1 vs HTTP/2 加载它们。这主要展示了 HTTP/2 的队头阻塞移除。然而，对于普通/真实的网站来说，事情很快就会变得更加微妙。这取决于资源的数量、大小、使用的优先级/多路复用方案、到服务器的 RTT、实际有多少丢包以及何时发生、同时链路上有多少其他流量、使用的拥塞控制器逻辑，等等。HTTP/1.1 可能会丢失的一个例子是在可用带宽有限的网络上：6个 HTTP/1.1 连接各自增加其发送速率，导致它们很快使网络过载，之后它们都必须后退，必须通过反复试验找到它们共存的带宽限制（在 HTTP/2 之前，人们认为 HTTP/1.1 的并行连接可能是因特网上数据包丢失的主要原因）。单个 HTTP/2 连接增长较慢，但在包丢失事件后恢复速度更快，并且更快地找到最佳带宽。另一个带有注释的拥塞窗口的更详细的，HTTP/2 更快的示例可以看[这张图片（不适用于胆小的人）。</p><p>QUIC 和 HTTP/3 将面临类似的挑战，就像 HTTP/2 一样，HTTP/3 将使用单一的底层 QUIC 连接。然后，您可能会说 QUIC 连接在概念上有点像多个 TCP 连接，因为每个 QUIC 流都可以看作一个TCP连接，因为丢失检测是在每个流的基础上完成的。然而，关键的是，QUIC 的拥塞控制仍然是在连接级别完成的，而不是针对每个流。这意味着，即使流在概念上是独立的，它们仍然会影响 QUIC 的单连接拥塞控制器，如果流中有任何一个丢失，就会导致速度减慢。换句话说：单个 HTTP/3+QUIC 连接仍然不会像 6 个 HTTP/1.1 连接那样快速增长，类似于一个连接上的 HTTP/2+TCP 增长速度并不快。</p><h2 id="彩蛋：多路复用是否重要？">彩蛋：多路复用是否重要？</h2><p>如上所述，并在本演示文稿中进行了深入解释，通常建议以顺序方式而不是多路传输方式发送大多数网页资源。换一种说法，如果你有两个文件，你通常最好发送 11112222 而不是 12121212。对于需要在应用之前完全接收的资源，如 JS、CSS 和字体，尤其如此。</p><p>如果是这样的话，我们可能会想为什么我们需要多路复用？通过扩展：HTTP/2 甚至 HTTP/3，因为多路复用是 HTTP/1.1 没有的主要特性之一。首先，一些可以增量处理/呈现的文件确实从多路复用中获益。例如，渐进式图像就是这样。第二，如上所述，如果其中一个文件比其他文件小得多，那么它可能会很有用，因为它将更早地下载，而不会对其他文件造成太多的延迟。第三，<strong>多路复用允许改变响应的顺序，并为高优先级的响应中断低优先级的响应</strong>。</p><p>现实中出现的一个很好的例子是在源服务器前面使用 CDN 缓存。假设浏览器从 CDN 请求两个文件。第一个（1）没有被缓存，需要从源文件中获取，这需要一段时间。第二个资源（2）缓存在 CDN 中，因此可以直接传输回浏览器。</p><p>在一个连接上使用 HTTP/1.1，由于队头阻塞，我们必须等待队头完全发送（1），然后才能开始发送（2）。这将给我们带来 11112222，但需要很长的前期等待时间。然而，使用HTTP/2，我们可以立即开始发送（2），利用 CDN 和源节点之间的“思考时间”，并“预热”连接的拥塞控制器。重要的是，如果（1）在（2）完成之前开始到达，我们现在可以简单地开始将（1）的数据注入到响应流中。这样我们就可以得到 22111122，等待的时间要短得多。甚至可以在连接开始时使用服务器推送（Server Push）或103早期提示（103 early hints）等功能。</p><p>因此，虽然像 12121212 这样的完全“轮询”多路复用很少是您想要的 Web 性能，但是多路复用在总体上绝对是一个有用的特性。</p>]]></content>
    
    
    <summary type="html">Head-of-Line Blocking</summary>
    
    
    
    <category term="计算机网络" scheme="https://penge666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://penge666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>零拷贝-高效的传输文件</title>
    <link href="https://penge666.github.io/posts/80c635db.html"/>
    <id>https://penge666.github.io/posts/80c635db.html</id>
    <published>2024-04-26T09:31:30.000Z</published>
    <updated>2024-04-26T09:59:51.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p><strong>零拷贝</strong>是指计算机执行IO操作时，CPU不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少上下文切换以及CPU的拷贝时间。它是一种<code>I/O</code>操作优化技术。</p><h2 id="传统-IO-的执行流程">传统 IO 的执行流程</h2><p>做服务端开发的小伙伴，文件下载功能应该实现过不少了吧。如果你实现的是一个<strong>web程序</strong>，前端请求过来，服务端的任务就是：将服务端主机磁盘中的文件从已连接的socket发出去。关键实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((n = <span class="built_in">read</span>(diskfd, buf, BUF_SIZE)) &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">write</span>(sockfd, buf , n);</span><br></pre></td></tr></table></figure><p>传统的IO流程，包括read和write的过程。</p><ul><li><code>read</code>：把数据从磁盘读取到内核缓冲区，再拷贝到用户缓冲区</li><li><code>write</code>：先把数据写入到socket缓冲区，最后写入网卡设备。</li></ul><p><strong>流程图如下：</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426174926090.png" alt="image-20240426174926090"></p><ul><li>用户应用进程调用read函数，向操作系统发起IO调用，<strong>上下文从用户态转为内核态（切换1）</strong></li><li>DMA控制器把数据从磁盘中，读取到内核缓冲区。</li><li>CPU把内核缓冲区数据，拷贝到用户应用缓冲区，<strong>上下文从内核态转为用户态（切换2）</strong>，read函数返回</li><li>用户应用进程通过write函数，发起IO调用，<strong>上下文从用户态转为内核态（切换3）</strong></li><li>CPU将用户缓冲区中的数据，拷贝到socket缓冲区</li><li>DMA控制器把数据从socket缓冲区，拷贝到网卡设备，<strong>上下文从内核态切换回用户态（切换4）</strong>，write函数返回</li></ul><p>从流程图可以看出，<strong>传统IO的读写流程</strong>，包括了4次上下文切换（4次用户态和内核态的切换），4次数据拷贝（<strong>两次CPU拷贝以及两次的DMA拷贝</strong>)，什么是DMA拷贝呢？我们一起来回顾下，零拷贝涉及的<strong>操作系统知识点</strong>哈。</p><h2 id="DMA技术">DMA技术</h2><p>DMA，英文全称是<strong>Direct Memory Access</strong>，即直接内存访问。<strong>DMA</strong>本质上是一块主板上独立的芯片，允许外设设备和内存存储器之间直接进行IO数据传输，其过程<strong>不需要CPU的参与</strong>。</p><p>我们一起来看下IO流程，DMA帮忙做了什么事情。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426175033350.png" alt="image-20240426175033350"></p><ul><li>用户应用进程调用read函数，向操作系统发起IO调用，进入阻塞状态，等待数据返回。</li><li>CPU收到指令后，对DMA控制器发起指令调度。</li><li>DMA收到IO请求后，将请求发送给磁盘；</li><li>磁盘将数据放入磁盘控制缓冲区，并通知DMA</li><li>DMA将数据从磁盘控制器缓冲区拷贝到内核缓冲区。</li><li>DMA向CPU发出数据读完的信号，把工作交换给CPU，由CPU负责将数据从内核缓冲区拷贝到用户缓冲区。</li><li>用户应用进程由内核态切换回用户态，解除阻塞状态</li></ul><p>DMA的工作就是<strong>帮忙CPU转发一下IO请求，以及拷贝数据</strong>。</p><blockquote><p>主要就是效率，它帮忙CPU做事情，这时候，CPU就可以闲下来去做别的事情，提高了CPU的利用效率。大白话解释就是，CPU老哥太忙太累啦，所以他找了个小弟（名叫DMA） ，替他完成一部分的拷贝工作，这样CPU老哥就能着手去做其他事情。</p></blockquote><h2 id="零拷贝">零拷贝</h2><p>零拷贝并不是没有拷贝数据，而是减少用户态/内核态的切换次数以及CPU拷贝的次数。</p><p>零拷贝实现有多种方式，分别是</p><ul><li>mmap+write</li><li>sendfile</li><li>sendfile+DMA收集</li><li>splice</li></ul><h3 id="mmap-write">mmap+write</h3><p>mmap 的函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br></pre></td></tr></table></figure><ul><li>addr：指定映射的虚拟内存地址</li><li>length：映射的长度</li><li>prot：映射内存的保护模式</li><li>flags：指定映射的类型</li><li>fd:进行映射的文件句柄</li><li>offset:文件偏移量</li></ul><p>mmap用了虚拟内存中可以把内核空间和用户空间的虚拟地址映射到同一个物理地址这个特点，它将内核中的读缓冲区与用户空间的缓冲区进行映射，所有的IO都在内核中完成。</p><p><code>mmap+write</code><br>实现的零拷贝流程如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426175310052.png" alt="image-20240426175310052"></p><ul><li>用户进程通过<code>mmap方法</code>向操作系统内核发起IO调用，<strong>上下文从用户态切换为内核态</strong>。</li><li>CPU利用DMA控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li><strong>上下文从内核态切换回用户态</strong>，mmap方法返回。</li><li>用户进程通过<code>write</code><br>方法向操作系统内核发起IO调用，<strong>上下文从用户态切换为内核态</strong>。</li><li>CPU将内核缓冲区的数据拷贝到的socket缓冲区。</li><li>CPU利用DMA控制器，把数据从socket缓冲区拷贝到网卡，<strong>上下文从内核态切换回用户态</strong>，write调用返回。</li></ul><p>可以发现，<code>mmap+write</code>实现的零拷贝，I/O发生了<strong>4</strong>次用户空间与内核空间的上下文切换，以及3次数据拷贝。其中3次数据拷贝中，包括了<strong>2次DMA拷贝和1次CPU拷贝</strong>。</p><p><code>mmap</code>是将读缓冲区的地址和用户缓冲区的地址进行映射，内核缓冲区和应用缓冲区共享，所以节省了一次CPU拷贝‘’并且用户进程内存是<strong>虚拟的</strong>，只是<strong>映射</strong>到内核的读缓冲区，可以节省一半的内存空间。</p><h3 id="sendfile">sendfile</h3><p><code>sendfile</code>是Linux2.1内核版本后引入的一个系统调用函数，API如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">sendfile</span><span class="params">(<span class="type">int</span> out_fd, <span class="type">int</span> in_fd, <span class="type">off_t</span> *offset, <span class="type">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>out_fd:为待写入内容的文件描述符，一个socket描述符。，</li><li>in_fd:为待读出内容的文件描述符，必须是真实的文件，不能是socket和管道。</li><li>offset：指定从读入文件的哪个位置开始读，如果为NULL，表示文件的默认起始位置。</li><li>count：指定在fdout和fdin之间传输的字节数。</li></ul><p>sendfile表示在两个文件描述符之间传输数据，它是在<strong>操作系统内核</strong>中操作的，<strong>避免了数据从内核缓冲区和用户缓冲区之间的拷贝操作</strong>，因此可以使用它来实现零拷贝。</p><p>sendfile实现的零拷贝流程如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426175356744.png" alt="image-20240426175356744"></p><ol><li>用户进程发起sendfile系统调用，<strong>上下文（切换1）从用户态转向内核态</strong></li><li>DMA控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li>CPU将读缓冲区中数据拷贝到socket缓冲区</li><li>DMA控制器，异步把数据从socket缓冲区拷贝到网卡，</li><li><strong>上下文（切换2）从内核态切换回用户态</strong>，sendfile调用返回。</li></ol><p>可以发现，<code>sendfile</code>实现的零拷贝，I/O发生了<strong>2</strong>次用户空间与内核空间的上下文切换，以及3次数据拷贝。其中3次数据拷贝中，包括了<strong>2次DMA拷贝和1次CPU拷贝</strong>。那能不能把CPU拷贝的次数减少到0次呢？有的，即带有DMA收集拷贝功能的sendfile！</p><h3 id="sendfile-DMA-scatter-gather">sendfile+DMA scatter/gather</h3><p>linux 2.4版本之后，对<code>sendfile</code>做了优化升级，引入SG-DMA技术，其实就是对DMA拷贝加入了<code>scatter/gather</code>操作，它可以直接从内核空间缓冲区中将数据读取到网卡。使用这个特点搞零拷贝，即还可以多省去<strong>一次CPU拷贝</strong>。</p><p>sendfile+DMA scatter/gather实现的零拷贝流程如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426175456788.png" alt="image-20240426175456788"></p><ol><li>用户进程发起sendfile系统调用，<strong>上下文（切换1）从用户态转向内核态</strong></li><li>DMA控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li>CPU把内核缓冲区中的<strong>文件描述符信息</strong>（包括内核缓冲区的内存地址和偏移量）发送到socket缓冲区</li><li>DMA控制器根据文件描述符信息，直接把数据从内核缓冲区拷贝到网卡</li><li><strong>上下文（切换2）从内核态切换回用户态</strong>，sendfile调用返回。</li></ol><p>可以发现，<code>sendfile+DMA scatter/gather</code>实现的零拷贝，I/O发生了<strong>2</strong>次用户空间与内核空间的上下文切换，以及2次数据拷贝。其中2次数据拷贝都是包<strong>DMA拷贝</strong>。这就是真正的 <strong>零拷贝（Zero-copy)</strong> 技术，全程都没有通过CPU来搬运数据，所有的数据都是通过DMA来进行传输的。</p><h3 id="splice">splice</h3><p>基于 splice 系统调用的零拷贝方式，整个拷贝过程会发生 2 次上下文切换，0 次 CPU 拷贝以及 2 次 DMA 拷贝，用户程序读写数据的流程如下：</p><ol><li>用户进程通过 splice() 函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到内核空间（kernel space）的读缓冲区（read buffer）。</li><li>CPU 在内核空间的读缓冲区（read buffer）和网络缓冲区（socket buffer）之间建立管道（pipeline）。</li><li>CPU 利用 DMA 控制器将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输。</li><li>上下文从内核态（kernel space）切换回用户态（user space），splice 系统调用执行返回。</li></ol><p>splice 拷贝方式也同样存在用户程序不能对数据进行修改的问题。除此之外，它使用了 Linux 的管道缓冲机制，可以用于任意两个文件描述符中传输数据，但是它的两个文件描述符参数中有一个必须是管道设备。</p><p><strong>总结</strong></p><p>无论是传统 I/O 拷贝方式还是引入零拷贝的方式，2 次 DMA Copy 是都少不了的，因为两次 DMA 都是依赖硬件完成的。下面从 CPU 拷贝次数、DMA 拷贝次数以及系统调用几个方面总结一下上述几种 I/O 拷贝方式的差别。</p><table><thead><tr><th>拷贝方式</th><th>CPU拷贝</th><th>DMA拷贝</th><th>系统调用</th><th>上下文切换</th></tr></thead><tbody><tr><td>传统方式（read + write）</td><td>2</td><td>2</td><td>read / write</td><td>4</td></tr><tr><td>内存映射（mmap + write）</td><td>1</td><td>2</td><td>mmap / write</td><td>4</td></tr><tr><td>sendfile</td><td>1</td><td>2</td><td>sendfile</td><td>2</td></tr><tr><td>sendfile + DMA gather copy</td><td>0</td><td>2</td><td>sendfile</td><td>2</td></tr><tr><td>splice</td><td>0</td><td>2</td><td>splice</td><td>2</td></tr></tbody></table><h2 id="参考文章">参考文章</h2><ul><li><a href="https://juejin.cn/user/3104676567320286/posts">零壹技术栈</a></li><li><a href="https://juejin.cn/user/4406498336190638/posts">潜行前行</a></li><li><a href="https://www.modb.pro/db/218517">看一遍就理解：零拷贝详解</a></li></ul>]]></content>
    
    
    <summary type="html">零拷贝</summary>
    
    
    
    <category term="操作系统" scheme="https://penge666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://penge666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>页中断</title>
    <link href="https://penge666.github.io/posts/54462149.html"/>
    <id>https://penge666.github.io/posts/54462149.html</id>
    <published>2024-04-26T08:29:19.000Z</published>
    <updated>2024-04-26T08:58:28.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识">基础知识</h2><blockquote><p><strong>Linux虚拟内存系统</strong></p></blockquote><p>Linux将虚拟内存组织成一些区域(也叫做段)的集合。一个区域(area)就是已经存在着的(已分配的)虚拟内存的连续片(chunk)，这些页是以某种方式相关联的。例如，代码段、数据段、堆、共享库段，以及用户栈都是不同的区域。每个存在的虚拟页面都保存在某个区域中，而不属于某个区域的虚拟页是不存在的，并且不能被进程引用。区域的概念很重要，因为它允许虚拟地址空间有间隙。内核不用记录那些不存在的虚拟页，而这样的页也不占用内存、磁盘或者内核本身中的任何额外资源。</p><p>Linux将虚拟内存组织成一些区域(也叫做段)的集合。一个区域(area)就是已经存在着的(已分配的)虚拟内存的连续片(chunk)，这些页是以某种方式相关联的。如下图所示</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426163611028.png" alt="image-20240426163611028"></p><p>下图强调了记录一个进程中虚拟内存区域的内核数据结构。内核为系统中的每个进程维护一个单独的任务结构(源代码中的task_struct)。任务结构中的元素包含或者指向内核运行该进程所需要的所有信息(例如，PID、指向用户栈的指针、可执行目标文件的名字，以及程序计数器)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426163509993.png" alt="image-20240426163509993"></p><p>任务结构中的一个条目指向mm_struct，它描述了虚拟内存的当前状态。我们感兴趣的两个字段是 pgd和mmap，其中 pgd指向第一级页表(页全局目录)的基址，而mmap指向一个vm area_structs(区域结构)的链表，其中每个vm_area_structs都描述了当前虚拟地址空间的一个区域。当内核运行这个进程时，就将pgd存放在CR3控制寄存器中。</p><p>一个具体的区域结构包含以下字段：</p><ul><li>vm_start:指向这个区域的起始处。</li><li>vm_end:指向这个区域的结束处。</li><li>vm_prot:描述这个区域内包含的所有页的读写许可权限。</li><li>vm_flags:描述这个区域内的页面是与其他进程共享的，还是这个进程私有的(还描述了其他一些信息)。</li><li>vm_next:指向链表中下一个区域结构。</li></ul><blockquote><p><strong>页中断异常处理</strong></p></blockquote><p>假设 MMU在试图翻译某个虚拟地址A时，触发了一个缺页。这个异常导致控制转移到内核的缺页处理程序，处理程序随后就执行下面的步骤:</p><ol><li>虚拟地址A是合法的吗?换句话说，A在某个区域结构定义的区域内吗?为了回答这个问题，缺页处理程序搜索区域结构的链表，把A和每个区域结构中的vm_start和vm_end做比较。如果这个指令是不合法的，那么缺页处理程序就触发一个段错误，从而婆止这个进程。这个情况在图9-28中标识为“1”。<br>因为一个进程可以创建任意数量的新虚拟内存区域(使用在下一节中描述的mmap函数)，所以顺序搜索区域结构的链表花销可能会很大。因此在实际中，Linux使用某些我们没有显示出来的字段，Linux在链表中构建了一棵树，并在这棵树上进行查找。</li><li>试图进行的内存访问是否合法?换句话说，进程是否有读、写或者执行这个区域内页面的权限?例如，这个缺页是不是由一条试图对这个代码段里的只读页面进行写操作的存储指令造成的?这个缺页是不是因为一个运行在用户模式中的进程试图从内核虚拟内存中读取字造成的?如果试图进行的访问是不合法的，那么缺页处理程序会触发一个保护异常，从而终止这个进程。这种情况在图9-28中标识为“2”。</li><li>此刻，内核知道了这个缺页是由于对合法的虚拟地址进行合法的操作造成的。它是这样来处理这个缺页的:选择一个牺牲页面，如果这个牺牲页面被修改过，那么就将它交换出去，换入新的页面并更新页表。当缺页处理程序返回时，CPU重新启动引起缺页的指令，这条指令将再次发送A到 MMU。这次，MMU就能正常地翻译A，而不会再产生缺页中断了。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426165657036.png" alt="image-20240426165657036"></p><h2 id="fork原理">fork原理</h2><p><strong>fork原理：写保护中断与写时复制</strong></p><p>父进程和子进程不仅可以访问共有的变量，还可以各自修改这个变量，并且这个修改对方都看不见。这其实是 fork 的一种写时复制机制，而里面起关键作用的就是写保护中断。</p><p>实际上，操作系统为每个进程提供了一个进程管理的结构，在偏理论的书籍里一般会称它为进程控制块（Process Control Block，PCB)。具体到 Linux 系统上，PCB 就是 task_struct 这个结构体。它里面记录了进程的页表基址，打开文件列表、信号、时间片、调度参数和线性空间已经分配的内存区域等等数据。</p><p>其中，<strong>描述线性空间已分配的内存区域的结构对于内存管理至关重要</strong>。在 Linux 源码中，负责这个功能的结构是 vm_area_struct，后面简称 vma【也是前置知识中提到的】。内核将每一段具有相同属性的内存区域当作一个单独的内存对象进行管理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">vm_area_struct</span> &#123; </span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> vm_start;      <span class="comment">// 区间首地址</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> vm_end;        <span class="comment">// 区间尾地址</span></span><br><span class="line">  <span class="type">pgprot_t</span>      vm_page_prot;  <span class="comment">// 访问控制权限</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> vm_flags;      <span class="comment">// 标志位</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">file</span> * vm_file;       <span class="comment">// 被映射的文件</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> vm_pgoff;      <span class="comment">// 文件中的偏移量</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在操作系统内核里，fork 的第一个动作是把 PCB 复制一份，但类似于物理页等进程资源不会被复制</strong>。这样的话，父进程与子进程的代码段、数据段、堆和栈都是相同的，这是因为它们拥有相同的页表，自然也有相同的虚拟空间布局和对物理内存的映射。如果父进程在 fork 子进程之前创建了一个变量，打开了一个文件，那么父子进程都能看到这个变量和文件。</p><p><strong>fork 的第二个动作是复制页表和 PCB 中的 vma 数组，并把所有当前正常状态的数据段、堆和栈空间的虚拟内存页，设置为不可写，然后把已经映射的物理页面的引用计数加 1</strong>。这一步只需要复制页表和修改 PTE 中的写权限位可以了，并不会真的为子进程的所有内存空间分配物理页面，修改映射，所以它的效率是非常高的。这时，父子进程的页表的情况如下图所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426164350719.png" alt="image-20240426164350719"></p><p>在上图中，物理页括号中的数字代表该页被多少个进程所引用。Linux 中用于管理物理页面，和维护物理页的引用计数的结构是 mem_map 和 page struct。</p><p>接下来，就是写保护中断要发挥作用的地方了。不管是父进程还是子进程，它们接下来都有可能发生写操作，但我们知道在 fork 的第二步操作中，已经将所有原来可写的地方都变成不可写了，所以这时必然会发生写保护中断。</p><p>我们刚才说，Linux 系统的页中断的入口地址是 do_page_fault，在这个函数里，它会继续判断中断的类型。由于发生中断的虚拟地址在 vma 中是可写的，在 PTE 中却是只读的，可以断定这是一次写保护中断。这时候，内核就会转而调用 do_wp_page 来处理这次中断，wp 是 write protection 的缩写。</p><p>在 do_wp_page 中，系统会首先判断发生中断的虚拟地址所对应的物理地址的引用计数，如果大于 1，就说明现在存在多个进程共享这一块物理页面，那么它就需要为发生中断的进程再分配一个物理页面，把老的页面内容拷贝进这个新的物理页，最后把发生中断的虚拟地址映射到新的物理页。这就完成了一次写时复制 (Copy On Write， COW）。具体过程如下图所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426164426565.png" alt="image-20240426164426565"></p><p>在上图中，当子进程发生写保护中断后，系统就会为它分配新的物理页，然后复制页面，再修改页表映射。这时老的物理页的引用计数就变为 1，同时子进程中的 PTE 的权限也从只读变为读写。</p><p>当父进程再访问到这个地址时，也会触发一次写保护中断，这时系统发现物理页的引用计数为 1，那就只要把父进程 PTE 中的权限，简单地从只读变为读写就可以了。</p><p>总结：</p><p>fork 在执行时，子进程只会复制父进程的 PCB 和页表，并且把所有页表项都设为只读，这个过程并不会复制真正的物理页。只有当父子进程其中一个对页进行写操作的时候，才会复制一个副本出来。这种机制被称为写时复制。</p><h2 id="execve原理">execve原理</h2><p><strong>execve原理：缺页中断</strong></p><p>execve 的作用是使当前进程执行一个新的可执行程序，它的原型如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* argv[],<span class="type">const</span> <span class="type">char</span>* envp[])</span></span><br></pre></td></tr></table></figure><p>其中 execve 的第一个参数是可执行程序的文件名，第二个参数用来传递命令行参数，第三个参数用来传递环境变量。</p><p>execve 的执行步骤如下所示：</p><ol><li>清空页表，这样整个进程中的页都变成不存在了，一旦访问这些页，就会发生页中断；</li><li>打开待加载执行的文件，在内核中创建代表这个文件的 struct file 结构；</li><li>加载和解析文件头，文件头里描述了这个可执行文件一共有多少 section；</li><li>创建相应的 vma 来描述代码段，数据段，并且将文件的各个 section 与这些内存区域建立映射关系；</li><li>如果当前加载的文件还依赖其他共享库文件，则找到这个共享库文件，并跳转到第 2 步继续处理这个共享库文件；</li><li>最后跳转到可执行程序的入口处执行。</li></ol><p><strong>execve 的实现并不负责将文件内容加载到物理页中，它只建立了这种文件 section，与内存区域的映射关系就结束了</strong>。真正负责加载文件内容的是缺页中断。</p><p>因为由于第 1 步把页表都清空了，这就导致 CPU 在加载指令时会发现代码段是缺失的，此时就会产生缺页中断。</p><p>Linux 内核用于处理缺页中断的函数是 do_no_page，如果内核检查，当前出现缺页中断的虚拟地址所在的内存区域 vma（虚拟地址落在该内存区域的 vm_start 和 vm_end 之间）存在文件映射 (vm_file 不为空），那就可以通过虚拟内存地址计算文件中的偏移，这就定位到了内存所缺的页对应到文件的哪一段。然后内核就启动磁盘 IO，将对应的页从磁盘加载进内存。一次缺页中断就这样被解决了。</p><h2 id="mmap原理">mmap原理</h2><blockquote><p><strong>mmap内存映射过程</strong></p></blockquote><p>mmap内存映射的实现过程，总的来说可以分为三个阶段：</p><p><strong>(一)进程启动映射过程，并在虚拟地址空间中为映射创建虚拟映射区域</strong></p><ol><li><p>进程在用户空间调用库函数mmap，原型：void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);</p></li><li><p>在当前进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址。</p></li><li><p>为此虚拟区分配一个vm_area_struct结构，接着对这个结构的各个域进行了初始化。</p></li><li><p>将新建的虚拟区结构（vm_area_struct）插入进程的虚拟地址区域链表或树中。</p></li></ol><p><strong>(二)调用内核空间的系统调用函数mmap（不同于用户空间函数），实现文件物理地址和进程虚拟地址的一一映射关系</strong></p><ol start="5"><li><p>为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p></li><li><p>通过该文件的文件结构体，链接到file_operations模块，调用内核函数mmap，其原型为：int mmap(struct file *filp, struct vm_area_struct *vma)，不同于用户空间库函数。</p></li><li><p>内核mmap函数通过虚拟文件系统inode模块定位到文件磁盘物理地址。</p></li><li><p>通过remap_pfn_range函数建立页表，即实现了文件地址和虚拟地址区域的映射关系。此时，这片虚拟地址并没有任何数据关联到主存中。</p></li></ol><p><strong>(三)进程发起对这片映射空间的访问，引发缺页异常，实现文件内容到物理内存（主存）的拷贝</strong></p><p>注：前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时。</p><ol start="9"><li><p>进程的读或写操作访问虚拟地址空间这一段映射地址，通过查询页表，发现这一段地址并不在物理页面上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。</p></li><li><p>缺页异常进行一系列判断，确定无非法操作后，内核发起请求调页过程。</p></li><li><p>调页过程先在交换缓存空间（swap cache）中寻找需要访问的内存页，如果没有则调用nopage函数把所缺的页从磁盘装入到主存中。</p></li><li><p>之后进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。</p></li></ol><p>**注意：**修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用msync()来强制同步, 这样所写的内容就能立即保存到文件里了。</p><blockquote><p><strong>mmap 和常规文件操作的区别</strong></p></blockquote><p>使用系统调用，函数的调用过程：</p><ol><li><p>进程发起读文件请求。</p></li><li><p>内核通过查找进程文件描述符表，定位到内核已打开文件集上的文件信息，从而找到此文件的inode。</p></li><li><p>inode在address_space上查找要请求的文件页是否已经缓存在页缓存中。如果存在，则直接返回这片文件页的内容。</p></li><li><p>如果不存在，则通过inode定位到文件磁盘地址，将数据从磁盘复制到页缓存。之后再次发起读页面过程，进而将页缓存中的数据发给用户进程。</p></li></ol><p>【重点】总结来说，常规文件操作为了提高读写效率和保护磁盘，使用了页缓存机制。这样造成读文件时需要先将文件页从磁盘拷贝到页缓存中，由于页缓存处在内核空间，不能被用户进程直接寻址，所以还需要将页缓存中数据页再次拷贝到内存对应的用户空间中。这样，通过了两次数据拷贝过程，才能完成进程对文件内容的获取任务。写操作也是一样，待写入的buffer在内核空间不能直接访问，必须要先拷贝至内核空间对应的主存，再写回磁盘中（延迟写回），也是需要两次数据拷贝。</p><p>而使用mmap操作文件中，创建新的虚拟内存区域和建立文件磁盘地址和虚拟内存区域映射这两步，没有任何文件拷贝操作。而之后访问数据时发现内存中并无数据而发起的缺页异常过程，可以通过已经建立好的映射关系，只使用一次数据拷贝，就从磁盘中将数据传入内存的用户空间中，供进程使用。</p><p>总而言之，常规文件操作需要从磁盘到页缓存再到用户主存的两次数据拷贝。而mmap操控文件，只需要从磁盘到用户主存的一次数据拷贝过程。说白了，mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了空间不同、数据不通的繁琐过程。因此mmap效率更高。</p><p><strong>Note</strong>：使用mmap需要注意的一个关键点是，mmap映射区域大小必须是物理页大小(page_size)的整倍数（32位系统中通常是4k字节）。</p><h2 id="参考资料">参考资料</h2><ul><li><a href="https://joytsing.cn/posts/30090/">mmap,比想象的更重要一点</a></li><li>极客时间</li><li>《深入理解计算机系统》</li></ul>]]></content>
    
    
    <summary type="html">强大的页中断</summary>
    
    
    
    <category term="操作系统" scheme="https://penge666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://penge666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>EXT文件系统</title>
    <link href="https://penge666.github.io/posts/93870e50.html"/>
    <id>https://penge666.github.io/posts/93870e50.html</id>
    <published>2024-04-26T06:26:10.000Z</published>
    <updated>2024-04-26T06:29:51.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EXT文件系统">EXT文件系统</h2><h3 id="前言">前言</h3><p>强烈推荐看完这篇Blog，自己动手亲自实现一个min的文件系统，成就感满满~</p><p>课程信息：CSE.30341.FA17: Project 06：Simple File System</p><p>链接：<a href="https://www3.nd.edu/~pbui/teaching/cse.30341.fa17/project06.html">https://www3.nd.edu/~pbui/teaching/cse.30341.fa17/project06.html</a></p><p>由于实验要求，这里不放仓库链接🔗。有需要参考的小伙伴可私我。</p><h3 id="0-预备知识">0.预备知识</h3><p>在学习知识前，最好要有个整体的认知，再去学习细节。要不然容易陷入细节迷失方向。</p><p>先来个整体的认知</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426133829332.png" alt="image-20240426133829332"></p><ul><li><a href="https://www.bilibili.com/video/BV1ce4y1R7et/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d6efee335659a376be8deb6c0654e9f7">一文彻底搞懂文件系统。文件系统，跪下！23计算机考研操作系统复盘之文件系统</a></li></ul><p>文件系统的类型有很多种</p><ul><li>CentOS 5和CentOS 6上默认使用的ext2/ext3/ext4</li><li>CentOS 7上默认使用的xfs</li><li>windows上的NTFS</li><li>光盘类的文件系统ISO9660</li><li>MAC上的混合文件系统HFS</li><li>网络文件系统NFS</li><li>Oracle研发的btrfs</li><li>还有老式的FAT/FAT32等。</li></ul><h3 id="1-文件系统的组成部分">1.文件系统的组成部分</h3><h4 id="1-1-block的出现">1.1 block的出现</h4><p>硬盘最底层的读写IO一次是一个扇区512字节，如果要读写大量文件，以扇区为单位肯定很慢很消耗性能，所以硬盘使用了一个称作逻辑块的概念。逻辑块是逻辑的，由磁盘驱动器负责维护和操作，它并非是像扇区一样物理划分的。一个逻辑块的大小可能包含一个或多个扇区，每个逻辑块都有唯一的地址，称为LBA【(Logical Block Addressing)逻辑块寻址模式】。有了逻辑块之后，磁盘控制器对数据的操作就以逻辑块为单位，一次读写一个逻辑块，磁盘控制器知道如何将逻辑块翻译成对应的扇区并读写数据。</p><p>到了Linux操作系统层次，通过文件系统提供了一个也称为块的读写单元，文件系统数据块的大小一般为1024bytes(1K)或2048bytes(2K)或4096bytes(4K)。文件系统数据块也是逻辑概念，是文件系统层次维护的，而磁盘上的逻辑数据块是由磁盘控制器维护的，文件系统的IO管理器知道如何将它的数据块翻译成磁盘维护的数据块地址LBA。</p><p>对于使用文件系统的IO操作来说，比如读写文件，这些IO的基本单元是文件系统上的数据块，一次读写一个文件系统数据块。比如需要读一个或多个块时，<strong>文件系统的IO管理器首先计算这些文件系统块对应在哪些磁盘数据块，也就是计算出LBA，然后通知磁盘控制器要读取哪些块的数据，硬盘控制器将这些块翻译成扇区地址，然后从扇区中读取数据，再通过硬盘控制器将这些扇区数据重组写入到内存中去</strong>。</p><p>正如标题所示，本文重点是在文件系统而不是在磁盘，所以<strong>后文出现的block均表示的是文件系统的数据块</strong>而不是磁盘维护的逻辑块。</p><p>文件系统block的出现使得在文件系统层面上读写性能大大提高，也大量减少了碎片。但是它的副作用是可能造成空间浪费。由于文件系统以block为读写单元，即使存储的文件只有1K大小也将占用一个block，剩余的空间完全是浪费的。</p><h4 id="1-2-inode的出现">1.2 inode的出现</h4><p>问题1：如果一个文件系统占用大量的block读取时会如何？</p><p>假如block大小为1KB，仅仅存储一个10M的文件就需要10240个block，而且这些blocks很可能在位置上是不连续在一起的(不相邻)，读取该文件时难道要从前向后扫描整个文件系统的块，然后找出属于该文件的块吗?显然是不应该这么做的，因为太慢太傻瓜式了。</p><p>问题2：如果一个文件系统占用少量的block读取时会如何？</p><p>假设读取一个只占用1个block的文件，难道只读取一个block就结束了吗?并不是，仍然是扫描整个文件系统的所有block，因为它不知道什么时候扫描到，扫描到了它也不知道这个文件是不是已经完整而不需要再扫描其他的block。</p><p>问题3：文件名的元数据存储在哪里呢？</p><p>…</p><p>对于类似问题，我们是使用索引，因为通过扫描索引找到对应的数据，而且索引可以存储部分数据。</p><p>在文件系统上索引技术具体化为索引节点(index node)，在索引节点上存储的部分数据即为文件的属性元数据及其他少量信息。一般来说索引占用的空间相比其索引的文件数据而言占用的空间就小得多，扫描它比扫描整个数据要快得多，否则索引就没有存在的意义。这样一来就解决了前面所有的问题。</p><p>在文件系统上的术语中，索引节点称为inode。在inode中存储了inode号、文件类型、权限、文件所有者、大小、时间戳等元数据信息，最重要的是还存储了指向属于该文件block的指针，这样<strong>读取inode就可以找到属于该文件的block</strong>，进而读取这些block并获得该文件的数据。为了方便称呼和区分，暂且将这个inode记录中指向文件data block的指针称之为block指针。</p><p>以下是ext2文件系统中inode包含的信息示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Inode: 12 Type: regular Mode: 0644 Flags: 0x0 </span><br><span class="line">Generation: 1454951771 Version: 0x00000000:00000001 </span><br><span class="line">User: 0 Group: 0 Size: 5 </span><br><span class="line">File ACL: 0 Directory ACL: 0 </span><br><span class="line">Links: 1 Blockcount: 8 </span><br><span class="line">Fragment: Address: 0 Number: 0 Size: 0 </span><br><span class="line"> ctime: 0x5b628db2:15e0aff4 -- Thu Aug 2 12:50:58 2018 </span><br><span class="line"> atime: 0x5b628db2:15e0aff4 -- Thu Aug 2 12:50:58 2018 </span><br><span class="line"> mtime: 0x5b628db2:15e0aff4 -- Thu Aug 2 12:50:58 2018 </span><br><span class="line">crtime: 0x5b628db2:15e0aff4 -- Thu Aug 2 12:50:58 2018 </span><br><span class="line">Size of extra inode fields: 28 </span><br><span class="line">BLOCKS: </span><br><span class="line">(0):1024 </span><br><span class="line">TOTAL: 1 </span><br></pre></td></tr></table></figure><p>一般inode大小为128字节或256字节，相比那些MB或GB计算的文件数据而言小得多的多，但也要知道可能一个文件大小小于inode大小，例如只占用1个字节的文件。</p><h4 id="1-3-bmap出现">1.3 bmap出现</h4><p>在向硬盘存储数据时，文件系统需要知道哪些块是空闲的，哪些块是已经占用了的。最笨的方法当然是从前向后扫描，遇到空闲块就存储一部分，继续扫描直到存储完所有数据。</p><blockquote><p>解释：空闲的含义</p></blockquote><p>在文件系统中，“空闲块” 指的是尚未被任何文件或数据占用的磁盘块。文件系统需要维护一个列表或者位图来记录哪些磁盘块是空闲的，以及哪些磁盘块已经被文件或者数据占用了。这样的信息可以帮助文件系统有效地管理磁盘空间，确保数据的存储和检索操作能够正常进行。</p><p>当文件系统需要为新文件或者数据分配存储空间时，它会查找空闲块列表或者位图，找到一个或者多个空闲的磁盘块，并将它们标记为已经被占用。相反，当文件或者数据被删除时，文件系统会将对应的磁盘块标记为空闲，以便后续被重用。</p><p>通过维护空闲块列表或者位图，文件系统可以实现对磁盘空间的动态管理，确保磁盘空间的高效利用。</p><hr><p>优化的方法当然也可以考虑使用索引，但是仅仅1G的文件系统就有1KB的block共1024*1024=1048576个【1G/1K】，这仅仅只是1G，如果是100G、500G甚至更大呢，仅仅使用索引索引的数量和空间占用也将极大，这时就出现更高一级的优化方法：使用块位图(bitmap简称bmap)。</p><p>位图只使用0和1标识对应block是空闲还是被占用，0和1在位图中的位置和block的位置一一对应，第一位标识第一个块，第二个位标识第二个块，依次下去直到标记完所有的block。</p><p>思考：为什么块位图更优化？</p><p>在位图中1个字节8个位，可以标识8个block。对于一个block大小为1KB、容量为1G的文件系统而言，block数量有1024 * 1024个，所以在位图中使用1024 * 1024个位共1024 * 1024/8=131072字节=128K，即1G的文件只需要128个block做位图就能完成一一对应。通过扫描这100多个block就能知道哪些block是空闲的，速度提高了非常多。</p><p>但是要注意，<strong>bmap的优化针对的是写优化</strong>，因为只有写才需要找到空闲block并分配空闲block。对于读而言，只要通过inode找到了block的位置，cpu就能迅速计算出block在物理磁盘上的地址，cpu的计算速度是极快的，计算block地址的时间几乎可以忽略，那么读速度基本认为是受硬盘本身性能的影响而与文件系统无关。大多数稍大一点的文件可能都会存储在不连续的block上，而且使用了一段时间的文件系统可能会有不少碎片，这时硬盘的随机读取性能直接决定读数据的速度，这也是机械硬盘速度相比固态硬盘慢的多的多的原因之一，而且固态硬盘的随机读和连续读取速度几乎是一致的，对它来说，文件系统碎片的多少并不会影响读取速度。</p><p>虽然bmap已经极大的优化了扫描，但是仍有其瓶颈：如果文件系统是100G呢?</p><p>100G的文件系统要使用128*100=12800个1KB大小的block，这就占用了12.5M的空间了。试想完全扫描12800个很可能不连续的block这也是需要占用一些时间的，虽然快但是扛不住每次存储文件都要扫描带来的巨大开销。</p><p>所以需要再次优化，如何优化?简而言之就是将文件系统划分开形成块组，至于块组的介绍放在后文。</p><h4 id="1-4-inode表的出现">1.4 inode表的出现</h4><p>回顾下inode相关信息：inode存储了inode号、文件属性元数据、指向文件占用的block的指针;<strong>每一个inode占用128字节或256字节。</strong></p><p>现在又出现问题了，一个文件系统中可以说有无数多个文件，每一个文件都对应一个inode，难道每一个仅128字节的inode都要单独占用一个block进行存储吗?这太浪费空间了。</p><p>所以更优的方法是将多个inode合并存储在block中，对于128字节的inode，一个block存储8【1K/128B】个inode，对于256字节的inode，一个block存储4个inode。这就使得每个存储inode的块都不浪费。</p><p>在ext文件系统上，将这些物理上存储inode的block组合起来，在逻辑上形成一张inode表(inode table)来记录所有的inode。</p><p>举个例子，每一个家庭都要向派出所登记户口信息，通过户口本可以知道家庭住址，而每个镇或街道的派出所将本镇或本街道的所有户口整合在一起，要查找某一户地址时，在派出所就能快速查找到。inode table就是这里的派出所。它的内容如下图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425201144640.png" alt=""></p><p>实际上，在文件系统创建完成后所有的inode号都已经分配好并记录到inode table中了，只不过被使用的inode号所在的行还有文件属性的元数据信息和block位置信息，而未被使用的inode号只有一个inode号而已而没有其他信息而已。</p><p>再细细一思考，就能发现一个大的文件系统仍将占用大量的块来存储inode，想要找到其中的一个inode记录也需要不小的开销，尽管它们已经形成了一张逻辑上的表，但扛不住表太大记录太多。那么如何快速找到inode，这同样是需要优化的，优化的方法是将文件系统的block进行分组划分，每个组中都存有本组inode table范围、bmap等。</p><h4 id="1-5-imap的出现">1.5 imap的出现</h4><p>前面说bmap是块位图，用于标识文件系统中哪些block是空闲哪些block是占用的。</p><p>对于inode也一样，在存储文件(Linux中一切皆文件)时需要为其分配一个inode号。但是在格式化创建文件系统后所有的inode号都是被事先设定好存放在inode table中的，因此产生了问题：要为文件分配哪一个inode号呢?又如何知道某一个inode号是否已经被分配了呢?</p><p>既然是&quot;是否被占用&quot;的问题，使用位图是最佳方案，像bmap记录block的占用情况一样。标识inode号是否被分配的位图称为inodemap简称为imap。这时要为一个文件分配inode号只需扫描imap即可知道哪一个inode号是空闲的。</p><p>imap存在着和bmap和inode table一样需要解决的问题：如果文件系统比较大，imap本身就会很大，每次存储文件都要进行扫描，会导致效率不够高。同样，优化的方式是将文件系统占用的block划分成块组，每个块组有自己的imap范围。</p><h4 id="1-6-块组的出现">1.6 块组的出现</h4><p>前面一直提到的优化方法是将文件系统占用的block划分成块组(block group)，解决bmap、inode table和imap太大的问题。</p><p>在物理层面上的划分是将磁盘按柱面划分为多个分区，即多个文件系统。在逻辑层面上的划分是将文件系统划分成块组。<strong>每个文件系统包含多个块组，每个块组包含多个元数据区和数据区</strong>【看下节的图】：</p><ul><li>元数据区就是存储bmap、inode table、imap等的数据;</li><li>数据区就是存储文件数据的区域。</li></ul><p>注意块组是逻辑层面的概念，所以并不会真的在磁盘上按柱面、按扇区、按磁道等概念进行划分。</p><h4 id="1-7-块组的划分">1.7 块组的划分</h4><p>块组在文件系统创建完成后就已经划分完成了，也就是说元数据区bmap、inode table和imap等信息占用的block以及数据区占用的block都已经划分好了。那么文件系统如何知道一个块组元数据区包含多少个block，数据区又包含多少block呢?</p><p>它只需确定一个数据——每个block的大小，再根据bmap至多只能占用一个完整的block的标准就能计算出块组如何划分。如果文件系统非常小，所有的bmap总共都不能占用完一个block，那么也只能空闲bmap的block了。</p><p>每个block的大小在创建文件系统时可以人为指定，不指定也有默认值。</p><p>假如现在block的大小是1KB，一个bmap完整占用一个block能标识1024*8= 8192个block(当然这8192个block是数据区和元数据区共8192个，因为元数据区分配的block也需要通过bmap来标识)。每个block是1K，每个块组是8192K即8M，创建1G的文件系统需要划分1024/8=128个块组，如果是1.1G的文件系统呢?128+12.8=128+13=141个块组。【给出block的大小，就可以从文件大小计算出快组的个数】</p><p>每个组的block数目是划分好了，但是每个组设定多少个inode号呢?inode table占用多少block呢?这需要由系统决定了，因为描述&quot;每多少个数据区的block就为其分配一个inode号&quot;的指标默认是我们不知道的，当然创建文件系统时也可以人为指定这个指标或者百分比例。见后文&quot;inode深入&quot;。</p><p>使用dumpe2fs可以将ext类的文件系统信息全部显示出来，当然bmap是每个块组固定一个block的不用显示，imap比bmap更小所以也只占用1个block不用显示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425215539679.png" alt="image-20240425215539679"></p><p>从这张表中能计算出文件系统的大小，该文件系统共4667136个blocks，每个block大小为4K，所以文件系统大小为4667136*4/1024/1024=17.8GB。</p><p>也能计算出分了多少个块组，因为每一个块组的block数量为32768，所以块组的数量为4667136/32768=142.4即143个块组。由于块组从0开始编号，所以最后一个块组编号为Group 142。如下图所示是最后一个块组的信息。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425215816389.png" alt="image-20240425215816389"></p><h3 id="2-文件系统的完整结构">2. 文件系统的完整结构</h3><p>将上文描述的bmap、inode table、imap、数据区的blocks和块组的概念组合起来就形成了一个文件系统，当然这还不是完整的文件系统。完整的文件系统如下图</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425215902069.png" alt="image-20240425215902069"></p><p>首先，该图中多了Boot Block、Super Block、GDT、Reserver GDT这几个概念。下面会分别介绍它们。</p><p>然后，图中指明了块组中每个部分占用的block数量，除了superblock、bmap、imap能确定占用1个block，其他的部分都不能确定占用几个block。</p><p>最后，图中指明了Superblock、GDT和Reserved GDT是同时出现且不一定存在于每一个块组中的，也指明了bmap、imap、inode table和data blocks是每个块组都有的。</p><h4 id="2-1-引导块">2.1 引导块</h4><p>即上图中的Boot Block部分，也称为boot sector。它位于分区上的第一个块，占用1024字节，并非所有分区都有这个boot sector，只有装了操作系统的主分区和装了操作系统的逻辑分区才有。里面存放的也是boot loader，这段boot loader称为VBR(主分区装操作系统时)或EBR(扩展分区装操作系统时)，这里的Boot loader和mbr上的boot loader是存在交错关系的。开机启动的时候，首先加载mbr中的bootloader，然后定位到操作系统所在分区的boot serctor上加载此处的boot loader。如果是多系统，加载mbr中的bootloader后会列出操作系统菜单，菜单上的各操作系统指向它们所在分区的boot sector上。它们之间的关系如下图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425220833137.png" alt="image-20240425220833137"></p><p>但是，这种方式的操作系统菜单早已经弃之不用了，而是使用grub来管理启动菜单。尽管如此，在安装操作系统时，仍然有一步是选择boot loader安装位置的步骤。</p><h4 id="2-2-超级块-superblock">2.2 超级块(superblock)</h4><p>既然一个文件系统会分多个块组，<strong>那么文件系统怎么知道分了多少个块组呢?每个块组又有多少block多少inode号等等信息呢?还有，文件系统本身的属性信息如各种时间戳、block总数量和空闲数量、inode总数量和空闲数量、当前文件系统是否正常、什么时候需要自检等等，它们又存储在哪里呢?</strong></p><p>毫无疑问，这些信息必须要存储在block中。存储这些信息占用1024字节，所以也要一个block，<strong>这个block称为超级块(superblock)</strong>，它的block号可能为0也可能为1。如果block大小为1K，则引导块正好占用一个block，这个block号为0，所以superblock的号为1;如果block大小大于1K，则引导块和超级块同置在一个block中，这个block号为0。总之superblock的起止位置是第二个1024(1024-2047)字节。</p><p>使用df命令读取的就是每个文件系统的superblock，所以它的统计速度非常快。相反，用du命令查看一个较大目录的已用空间就非常慢，因为不可避免地要遍历整个目录的所有文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -hT </span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev           devtmpfs  1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     388M  2.0M  386M   1% /run</span><br><span class="line">/dev/sda5      ext4       59G   43G   14G  77% /</span><br><span class="line">tmpfs          tmpfs     1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs          tmpfs     1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0     squashfs  128K  128K     0 100% /snap/bare/5</span><br><span class="line">/dev/loop2     squashfs   75M   75M     0 100% /snap/core22/1122</span><br><span class="line">/dev/loop1     squashfs   64M   64M     0 100% /snap/core20/2264</span><br></pre></td></tr></table></figure><p>superblock对于文件系统而言是至关重要的，超级块丢失或损坏必将导致文件系统的损坏。所以旧式的文件系统将超级块备份到每一个块组中，但是这又有所空间浪费，所以ext2文件系统只在块组0、1和3、5、7幂次方的块组中保存超级块的信息，如Group9、Group25等。尽管保存了这么多的superblock，但是文件系统只使用第一个块组即Group0中超级块信息来获取文件系统属性，只有当Group0上的superblock损坏或丢失才会找下一个备份超级块复制到Group0中来恢复文件系统。</p><p>下图是一个ext4文件系统的superblock的信息，ext家族的文件系统都能使用dumpe2fs -h获取。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425221706736.png" alt="image-20240425221706736"></p><h4 id="2-3-块组描述符表-GDT">2.3 块组描述符表(GDT)</h4><p>既然文件系统划分了块组，那么每个块组的信息和属性元数据又保存在哪里呢?</p><p><strong>ext文件系统每一个块组信息使用32字节描述，这32个字节称为块组描述符</strong>，所有块组的块组描述符组成块组描述符表GDT(group descriptor table)。</p><p>虽然每个块组都需要块组描述符来记录块组的信息和属性元数据，但是不是每个块组中都存放了块组描述符。<strong>ext文件系统的存储方式是：将它们组成一个GDT，并将该GDT存放于某些块组中，存放GDT的块组和存放superblock和备份superblock的块相同，也就是说它们是同时出现在某一个块组中的。读取时也总是读取Group0中的块组描述符表信息。</strong></p><p>假如block大小为4KB的文件系统划分了143个块组，每个块组描述符32字节，那么GDT就需要143*32=4576字节即两个block来存放。这两个GDT block中记录了所有块组的块组信息，且存放GDT的块组中的GDT都是完全相同的。</p><p>下图是一个块组描述符的信息(通过dumpe2fs获取)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425222725852.png" alt="image-20240425222725852"></p><h4 id="2-4-Reserved-GDT">2.4 Reserved GDT</h4><p>保留GDT：Reserved GDT</p><p>保留GDT用于以后扩容文件系统使用，防止扩容后块组太多，使得块组描述符超出当前存储GDT的blocks。保留GDT和GDT总是同时出现，当然也就和superblock同时出现了。</p><p>例如前面143个块组使用了2个block来存放GDT，但是此时第二个block还空余很多空间，当扩容到一定程度时2个block已经无法再记录块组描述符了，这时就需要分配一个或多个Reserved GDT的block来存放超出的块组描述符。</p><p>由于新增加了GDT block，所以应该让每一个保存GDT的块组都同时增加这一个GDT block，所以将保留GDT和GDT存放在同一个块组中可以直接将保留GDT变换为GDT而无需使用低效的复制手段备份到每个存放GDT的块组。</p><p>同理，新增加了GDT需要修改每个块组中superblock中的文件系统属性，所以将superblock和Reserved GDT/GDT放在一起又能提升效率。</p><h3 id="3-Data-Block">3.Data Block</h3><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425215902069.png" alt=""></p><p>如上图，除了Data Blocks其他的部分都解释过了。data block是直接存储数据的block，但事实上并非如此简单。</p><p>数据所占用的block由文件对应inode记录中的block指针找到，不同的文件类型，数据block中存储的内容是不一样的。以下是Linux中不同类型文件的存储方式。</p><ul><li>对于常规文件，文件的数据正常存储在数据块中。</li><li>对于目录，该目录下的所有文件和一级子目录的目录名存储在数据块中。</li><li>文件名不是存储在其自身的inode中，而是存储在其所在目录的data block中。</li><li>对于符号链接，如果目标路径名较短则直接保存在inode中以便更快地查找，如果目标路径名较长则分配一个数据块来保存。</li><li>设备文件、FIFO和socket等特殊文件没有数据块，设备文件的主设备号和次设备号保存在inode中。</li></ul><h4 id="3-1-目录文件的data-block">3.1 目录文件的data block</h4><p>对于目录文件，其inode记录中存储的是目录的inode号、目录的属性元数据和目录文件的block指针，这里面没有存储目录自身文件名的信息。</p><p>而其data block的存储方式则如下图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425223235705.png" alt="image-20240425223235705"></p><p>由图可知，在目录文件的数据块中存储了其下的文件名、目录名、目录本身的相对名称&quot;.“和上级目录的相对名称”…“，还存储了指向inode table中这些文件名对应的inode号的指针(并非直接存储inode号码)、目录项长度rec_len、文件名长度name_len和文件类型file_type。注意到除了文件本身的inode记录了文件类型，其所在的目录的数据块也记录了文件类型。由于rec_len只能是4的倍数，所以需要使用”\0&quot;来填充name_len不够凑满4倍数的部分。至于rec_len具体是什么，只需知道它是一种偏移即可。</p><p>目录的data block中并没有直接存储目录中文件的inode号，它存储的是指向inode table中对应文件inode号的指针，暂且称之为inode指针(至此，已经知道了两种指针：一种是inode table中每个inode记录指向其对应data block的block指针，一个此处的inode指针。题外话：实际上inode指针应该称之为存储在目录data blcok中的链接link，这个link和inode num一一映射，所以删除文件的函数称为unlink()，表示在目录的data block中删除这个链接)。一个很有说服力的例子，在目录只有读而没有执行权限的时候，使用&quot;ls -l&quot;是无法获取到其内文件inode号的，这就表明没有直接存储inode号。实际上，因为在创建文件系统的时候，inode号就已经全部划分好并在每个块组的inode table中存放好，inode table在块组中是有具体位置的，如果使用dumpe2fs查看文件系统，会发现每个块组的inode table占用的block数量是完全相同的，如下图是某分区上其中两个块组的信息，它们都占用249个block。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425223747136.png" alt="image-20240425223747136"></p><p>除了inode指针，目录的data block中还使用数字格式记录了文件类型，数字格式和文件类型的对应关系如下图。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425223811142.png" alt="image-20240425223811142"></p><p>注意到目录的data block中前两行存储的是目录本身的相对名称&quot;.“和上级目录的相对名称”…&quot;，它们实际上是目录本身的硬链接和上级目录的硬链接。硬链接的本质后面说明。</p><p>由此也就容易理解目录权限的特殊之处了。目录文件的读权限®和写权限(w)，都是针对目录文件的数据块本身。由于目录文件内只有文件名、文件类型和inode指针，所以如果只有读权限，只能获取文件名和文件类型信息，无法获取其他信息，尽管目录的data block中也记录着文件的inode指针，但定位指针是需要x权限的，因为其它信息都储存在文件自身对应的inode中，而要读取文件inode信息需要有目录文件的执行权限通过inode指针定位到文件对应的inode记录上。以下是没有目录x权限时的查询状态，可以看到除了文件名和文件类型，其余的全是&quot;?&quot;。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[lisi4@xuexi tmp]$ ll -i d </span><br><span class="line"><span class="built_in">ls</span>: cannot access d/hehe: Permission denied </span><br><span class="line"><span class="built_in">ls</span>: cannot access d/haha: Permission denied </span><br><span class="line">total 0 </span><br><span class="line">? d????????? ? ? ? ? ? haha </span><br><span class="line">? -????????? ? ? ? ? ? hehe </span><br></pre></td></tr></table></figure><p>注意，xfs文件系统和ext文件系统不一样，它连文件类型都无法获取。</p><h4 id="3-2-符号链接存储方式">3.2 符号链接存储方式</h4><p>符号链接即为软链接，类似于Windows操作系统中的快捷方式，它的作用是指向原文件或目录。</p><p>软链接之所以也被称为特殊文件的原因是：它一般情况下不占用data block，仅仅通过它对应的inode记录就能将其信息描述完成;符号链接的大小是其指向目标路径占用的字符个数，例如某个符号链接的指向方式为&quot;rmt --&gt; …/sbin/rmt&quot;，则其文件大小为11字节;只有当符号链接指向的目标的路径名较长(60个字节)时文件系统才会划分一个data block给它;它的权限如何也不重要，因它只是一个指向原文件的&quot;工具&quot;，最终决定是否能读写执行的权限由原文件决定，所以很可能ls -l查看到的符号链接权限为777。</p><p>注意，软链接的block指针存储的是目标文件名。也就是说，链接文件的一切都依赖于其目标文件名。这就解释了为什么/mnt的软链接/tmp/mnt在/mnt挂载文件系统后，通过软链接就能进入/mnt所挂载的文件系统。究其原因，还是因为其目标文件名&quot;/mnt&quot;并没有改变。</p><p>例如以下筛选出了/etc/下的符号链接，注意观察它们的权限和它们占用的空间大小。</p><h4 id="3-3-设备文件、FIFO、套接字文件">3.3 设备文件、FIFO、套接字文件</h4><p>关于这3种文件类型的文件只需要通过inode就能完全保存它们的信息，它们不占用任何数据块，所以它们是特殊文件。</p><p>设备文件的主设备号和次设备号也保存在inode中。以下是/dev/下的部分设备信息。注意到它们的第5列和第6列信息，它们分别是主设备号和次设备号，主设备号标识每一种设备的类型，次设备号标识同种设备类型的不同编号;也注意到这些信息中没有大小的信息，因为设备文件不占用数据块所以没有大小的概念。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@xuexi ~]<span class="comment"># ll /dev | tail </span></span><br><span class="line">crw-rw---- 1 vcsa <span class="built_in">tty</span> 7, 129 Oct 7 21:26 vcsa1 </span><br><span class="line">crw-rw---- 1 vcsa <span class="built_in">tty</span> 7, 130 Oct 7 21:27 vcsa2 </span><br><span class="line">crw-rw---- 1 vcsa <span class="built_in">tty</span> 7, 131 Oct 7 21:27 vcsa3 </span><br><span class="line">crw-rw---- 1 vcsa <span class="built_in">tty</span> 7, 132 Oct 7 21:27 vcsa4 </span><br><span class="line">crw-rw---- 1 vcsa <span class="built_in">tty</span> 7, 133 Oct 7 21:27 vcsa5 </span><br><span class="line">crw-rw---- 1 vcsa <span class="built_in">tty</span> 7, 134 Oct 7 21:27 vcsa6 </span><br><span class="line">crw-rw---- 1 root root 10, 63 Oct 7 21:26 vga_arbiter </span><br><span class="line">crw------- 1 root root 10, 57 Oct 7 21:26 vmci </span><br><span class="line">crw-rw-rw- 1 root root 10, 56 Oct 7 21:27 vsock </span><br><span class="line">crw-rw-rw- 1 root root 1, 5 Oct 7 21:26 zero </span><br></pre></td></tr></table></figure><h3 id="4-inode基础知识">4.inode基础知识</h3><p>每个文件都有一个inode，在将inode关联到文件后系统将通过inode号来识别文件，而不是文件名。并且访问文件时将先找到inode，通过inode中记录的block位置找到该文件。</p><p>Q：为什么要要链接？</p><p>A：为了方便用户访问文件，可以将一个文件或目录与另一个文件或目录建立关联，从而实现多个路径指向同一个文件或目录的效果。</p><p>Q：为什么需要硬和软两种链接呢？</p><p>A：</p><ul><li><strong>硬链接</strong>是指在<strong>同一个文件系统中</strong>，将一个文件名关联到一个已经存在的文件上，使得该文件名也可以访问该文件。</li><li><strong>软链接</strong>（也称符号链接）是指在<strong>不同的文件系统之间</strong>，将一个文件名关联到另一个文件上，使得该文件名也可以访问该文件。</li></ul><h4 id="4-1-硬链接">4.1 硬链接</h4><p><strong>本质：硬链接就是多个文件名指向同一个文件的数据块。</strong></p><p>虽然每个文件都有一个inode，但是存在一种可能：多个文件的inode相同，也就即inode号、元数据、block位置都相同，这是一种什么样的情况呢?</p><p>能够想象这些inode相同的文件使用的都是同一条inode记录，所以代表的都是同一个文件，这些文件所在目录的data block中的inode指针目的地都是一样的，只不过各指针对应的文件名互不相同而已。这种inode相同的文件在Linux中被称为&quot;硬链接&quot;。</p><p>硬链接文件的inode都相同，每个文件都有一个&quot;硬链接数&quot;的属性，使用ls -l的第二列就是被硬链接数，它表示的就是该文件有几个硬链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">penge@penge-virtual-machine  ~/Desktop/MordenCpp/tmp1  <span class="built_in">ls</span> -l</span><br><span class="line">total 40</span><br><span class="line">-rwxrwxr-x 1 penge penge 18264 4月  17 13:32 a.out</span><br><span class="line">-rw-rw-r-- 1 penge penge   196 4月  25 17:11 example.c</span><br><span class="line">-rw-rw-r-- 1 penge penge  4240 4月  17 13:31 example.o</span><br><span class="line">-rw-rw-r-- 1 penge penge    56 4月  17 13:31 external.c</span><br><span class="line">-rw-rw-r-- 1 penge penge  2952 4月  17 13:32 external.o</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">ls</span> -i file1</span><br><span class="line">1055165 file1</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">ls</span> -i file2</span><br><span class="line">1055165 file2</span><br></pre></td></tr></table></figure><p>例如下图描述的是dir1目录中的文件name1及其硬链接dir2/name2，右边分别是它们的inode和datablock。这里也看出了硬链接文件之间唯一不同的就是其所在目录中的记录不同。注意下图中有一列Link Count就是标记硬链接数的属性。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426105519520.png" alt="image-20240426105519520"></p><p>每创建一个文件的硬链接，实质上是多一个指向该inode记录的inode指针，并且硬链接数加1。</p><p>删除文件的实质是删除该文件所在目录data block中的对应的inode指针，所以也是减少硬链接次数，由于block指针是存储在inode中的，所以不是真的删除数据，如果仍有其他指针指向该inode，那么该文件的block指针仍然是可用的。当硬链接次数为1时再删除文件就是真的删除文件了，此时inode记录中block指针也将被删除。</p><p>不能跨分区创建硬链接，因为不同文件系统的inode号可能会相同，如果允许创建硬链接，复制到另一个分区时inode可能会和此分区已使用的inode号冲突。</p><p>硬链接只能对文件创建，无法对目录创建硬链接。【这里我的理解是可能会导致循环引用的情况】之所以无法对目录创建硬链接，是因为文件系统已经把每个目录的硬链接创建好了，它们就是相对路径中的&quot;.“和”…&quot;，分别标识当前目录的硬链接和上级目录的硬链接。每一个目录中都会包含这两个硬链接，它包含了两个信息：</p><p>(1) 一个没有子目录的目录文件的硬链接数是2，其一是目录本身，即该目录datablock中的&quot;.&quot;，其二是其父目录datablock中该目录的记录，这两者都指向同一个inode号;</p><p>(2) 一个包含子目录的目录文件，其硬链接数是2+子目录数，因为每个子目录都关联一个父目录的硬链接&quot;…“。很多人在计算目录的硬链接数时认为由于包含了”.“和”…“，所以空目录的硬链接数是2，这是错误的，因为”…“不是本目录的硬链接。另外，还有一个特殊的目录应该纳入考虑，即”/“目录，它自身是一个文件系统的入口，是自引用(下文中会解释自引用)的，所以”/“目录下的”.“和”…“的inode号相同，它自身不占用硬链接，因为其datablock中只记录inode号相同的”.“和”…“，不再像其他目录一样还记录一个名为”/“的目录，所以”/“的硬链接数也是2+子目录数，但这个2是”.“和”…&quot;的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@xuexi ~]<span class="comment"># ln /tmp /mydata </span></span><br><span class="line"><span class="built_in">ln</span>: `/tmp<span class="string">&#x27;: hard link not allowed for directory </span></span><br></pre></td></tr></table></figure><p>为什么文件系统自己创建好了目录的硬链接就不允许人为创建呢?从&quot;.“和”…“的用法上考虑，如果当前目录为/usr，我们可以使用”./local&quot;来表示/usr/local，但是如果我们人为创建了/usr目录的硬链接/tmp/husr，难道我们也要使用&quot;/tmp/husr/local&quot;来表示/usr/local吗?这其实已经是软链接的作用了。若要将其认为是硬链接的功能，这必将导致硬链接维护的混乱。【这个解释也很好】</p><p>不过，通过mount工具的&quot;–bind&quot;选项，可以将一个目录挂载到另一个目录下，实现伪&quot;硬链接&quot;，它们的内容和inode号是完全相同的。</p><p>硬链接的创建方法： ln file_target link_name 。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426140728344.png" alt="image-20240426140728344"></p><h4 id="4-2-软链接">4.2 软链接</h4><p><strong>软链接的本质是一个包含目标文件或目录路径的小文件，而不是像硬链接一样直接指向数据块。当你访问软链接时，文件系统会根据该链接中包含的路径找到目标文件或目录，并将操作重定向到目标。</strong></p><p>软链接就是字符链接，<strong>链接文件默认指的就是字符链接文件(注意不是字符设备)，使用&quot;l&quot;表示其类型。</strong></p><p>硬链接不能跨文件系统创建，否则inode号可能会冲突。于是实现了软链接以便跨文件系统建立链接。既然是跨文件系统，那么软链接必须得有自己的inode号。</p><p>软链接在功能上等价与Windows系统中的快捷方式，它指向原文件，原文件损坏或消失，软链接文件就损坏。可以认为软链接inode记录中的指针内容是目标路径的字符串。</p><p>创建方式： ln –s source_file softlink_name ，记住是source_file&lt;–link_name的指向关系(反箭头)，以前我老搞错位置。</p><p>查看软链接的值： readlink softlink_name</p><p>在设置软链接的时候，<strong>source_file虽然不要求是绝对路径，但建议给绝对路径</strong>。是否还记得软链接文件的大小?它是根据软链接所指向路径的字符数计算的，例如某个符号链接的指向方式为&quot;rmt --&gt; …/sbin/rmt&quot;，它的文件大小为11字节，也就是说只要建立了软链接后，软链接的指向路径是不会改变的，仍然是&quot;…/sbin/rmt&quot;。如果此时移动软链接文件本身，它的指向是不会改变的，仍然是11个字符的&quot;…/sbin/rmt&quot;，但此时该软链接父目录下可能根本就不存在/sbin/rmt，也就是说此时该软链接是一个被破坏的软链接。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426140716839.png" alt="image-20240426140716839"></p><h4 id="4-3-实操">4.3 实操</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/641716217">【Linux】硬链接 和 软链接</a></li></ul><blockquote><p><strong>硬链接</strong></p></blockquote><p>如果A文件和B文件的关系是硬连接的关系。当用户修改了A文件的内容，那么B文件的内容也会发生更改。如果修改的B文件，那么A文件的内容也会发生更改。</p><p>特点:<br>1、硬连接不限于两个文件之间，可以在多个文件之间进行。ls -l命令中显示了文件的硬连接数</p><p>2、不能对目录做硬件连接</p><p>3、不能在不同的文件系统之间做硬链接〔Linux的文件系统: ext4。xfs等等)</p><p>4、所有的硬连接，具备相同的iNode节点号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">touch</span> file1</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">ln</span> file1 file2</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  ll            </span><br><span class="line">total 88K</span><br><span class="line">-rwxrwxr-x 1 penge penge  38K 3月  10 15:14 a.out</span><br><span class="line">-rw-rw-r-- 2 penge penge    0 4月  26 14:00 file1</span><br><span class="line">-rw-rw-r-- 2 penge penge    0 4月  26 14:00 file2</span><br><span class="line">-rw-rw-r-- 1 penge penge 1.6K 3月  10 15:14 http_conn.cpp</span><br><span class="line">-rw-rw-r-- 1 penge penge  779 3月  13 11:18 http_conn.h</span><br><span class="line">-rw-rw-r-- 1 penge penge 2.7K 3月  10 10:52 locker.h</span><br><span class="line">-rwxrwxr-x 1 penge penge  21K 4月  12 10:39 main</span><br><span class="line">-rw-rw-r-- 1 penge penge    0 4月  17 13:30 main.cpp</span><br><span class="line">-rw-rw-r-- 1 penge penge 3.6K 3月  10 10:52 threadpool.h</span><br><span class="line">drwxrwxr-x 2 penge penge 4.0K 4月  16 14:25 tmp</span><br><span class="line">drwxrwxr-x 2 penge penge 4.0K 4月  25 16:05 tmp1</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">echo</span> <span class="string">&#x27;aaa&#x27;</span>&gt;file1                                                  </span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">cat</span> file1                                                         </span><br><span class="line">aaa</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">cat</span> file2</span><br><span class="line">aaa</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">echo</span> <span class="string">&#x27;bbb&#x27;</span>&gt;file2</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">cat</span> file2       </span><br><span class="line">bbb</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">cat</span> file2       </span><br><span class="line">bbb</span><br><span class="line"> penge@penge-virtual-machine  ~/Desktop/MordenCpp  <span class="built_in">cat</span> file1</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure><blockquote><p><strong>软链接</strong></p></blockquote><p>类似Windows中的快捷方式。为一个源文件创建一个快捷方式。</p><p>1、如果源文件被删除了，也没有办法使用该快捷方式。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据</p><p>2、在ls-l中，软链接作为一种特殊的文件类型显示出来，其第一个字母是l。</p><p>3、软链接的大小是其链接文件的路径名中的字符数。</p><p>pwd -P显示文件的实际路径,而不是软连接的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> penge@penge-virtual-machine  /bin  <span class="built_in">pwd</span> -P</span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><h3 id="5-inode深入">5.inode深入</h3><h4 id="5-1-inode大小和划分">5.1 inode大小和划分</h4><p>inode大小为128字节的倍数，最小为128字节。它有默认值大小，它的默认值由/etc/mke2fs.conf文件中指定。不同的文件系统默认值可能不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@xuexi ~]<span class="comment"># cat /etc/mke2fs.conf </span></span><br><span class="line">[defaults] </span><br><span class="line"> base_features = sparse_super,filetype,resize_inode,dir_index,ext_attr </span><br><span class="line"> enable_periodic_fsck = 1 </span><br><span class="line"> blocksize = 4096 </span><br><span class="line"> inode_size = 256 </span><br><span class="line"> inode_ratio = 16384 </span><br><span class="line">[fs_types] </span><br><span class="line"> ext3 = &#123; </span><br><span class="line"> features = has_journal </span><br><span class="line"> &#125; </span><br><span class="line"> ext4 = &#123; </span><br><span class="line"> features = has_journal,extent,huge_file,flex_bg,uninit_bg,dir_nlink,extra_isize </span><br><span class="line"> inode_size = 256 </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>同样观察到这个文件中还记录了blocksize的默认值和inode分配比率inode_ratio。inode_ratio=16384表示每16384个字节即16KB就分配一个inode号，由于默认blocksize=4KB，所以每4个block就分配一个inode号。当然分配的这些inode号只是预分配，并不真的代表会全部使用，毕竟每个文件才会分配一个inode号。但是分配的inode自身会占用block，而且其自身大小256字节还不算小，所以inode号的浪费代表着空间的浪费。</p><p>既然知道了inode分配比率，就能计算出每个块组分配多少个inode号，也就能计算出inode table占用多少个block。</p><p>如果文件系统中大量存储电影等大文件，inode号就浪费很多，inode占用的空间也浪费很多。但是没办法，文件系统又不知道你这个文件系统是用来存什么样的数据，多大的数据，多少数据。</p><p>当然inodesize、inode分配比例、blocksize都可以在创建文件系统的时候人为指定。</p><h4 id="5-2-ext文件系统预留的inode号">5.2 ext文件系统预留的inode号</h4><p>Ext预留了一些inode做特殊特性使用，如下：某些可能并非总是准确，具体的inode号对应什么文件可以使用&quot;find / -inum NUM&quot;查看。</p><ul><li>Ext4的特殊inode</li><li>Inode号 用途</li><li>0 不存在0号inode</li><li>1 虚拟文件系统，如/proc和/sys</li><li>2 根目录</li><li>3 ACL索引</li><li>4 ACL数据</li><li>5 Boot loader</li><li>6 未删除的目录</li><li>7 预留的块组描述符inode</li><li>8 日志inode</li><li>11 第一个非预留的inode，通常是lost+found目录</li></ul><p>所以在ext4文件系统的dumpe2fs信息中，能观察到fisrt inode号可能为11也可能为12。</p><p>并且注意到&quot;/&quot;的inode号为2，这个特性在文件访问时会用上。</p><p>需要注意的是，每个文件系统都会分配自己的inode号，不同文件系统之间是可能会出现使用相同inode号文件的。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@xuexi ~]<span class="comment"># find / -ignore_readdir_race -inum 2 -ls </span></span><br><span class="line"> 2 4 dr-xr-xr-x 22 root root 4096 Jun 9 09:56 / </span><br><span class="line"> 2 2 dr-xr-xr-x 5 root root 1024 Feb 25 11:53 /boot </span><br><span class="line"> 2 0 c--------- 1 root root Jun 7 02:13 /dev/pts/ptmx </span><br><span class="line"> 2 0 -rw-r--r-- 1 root root 0 Jun 6 18:13 /proc/sys/fs/binfmt_misc/status </span><br><span class="line"> 2 0 drwxr-xr-x 3 root root 0 Jun 6 18:13 /sys/fs </span><br></pre></td></tr></table></figure><p>从结果中可见，除了根的Inode号为2，还有几个文件的inode号也是 2，它们都属于独立的文件系统，有些是虚拟文件系统，如/proc和/sys。</p><h4 id="5-3-ext2-3的inode直接、间接寻址">5.3 ext2/3的inode直接、间接寻址</h4><p>前文说过，inode中保存了blocks指针，但是一条inode记录中能保存的指针数量是有限的，否则就会超出inode大小(128字节或256字节)。</p><p>在ext2和ext3文件系统中，一个inode中最多只能有15个指针，每个指针使用i_block[n]表示。</p><p>前12个指针i_block[0]到i_block[11]是直接寻址指针，每个指针指向一个数据区的block。如下图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426112610456.png" alt="image-20240426112610456"></p><p>第13个指针i_block[12]是一级间接寻址指针，它指向一个仍然存储了指针的block即i_block[12] --&gt; Pointerblock --&gt; datablock。</p><p>第14个指针i_block[13]是二级间接寻址指针，它指向一个仍然存储了指针的block，但是这个block中的指针还继续指向其他存储指针的block，即i_block[13] --&gt; Pointerblock1 --&gt; PointerBlock2 --&gt; datablock。</p><p>第15个指针i_block[14]是三级间接寻址指针，它指向一个任然存储了指针的block，这个指针block下还有两次指针指向。即i_block[13] --&gt; Pointerblock1 --&gt; PointerBlock2 --&gt; PointerBlock3 --&gt; datablock。</p><p>其中由于每个指针大小为4字节，所以每个指针block能存放的指针数量为BlockSize/4byte。例如blocksize为4KB，那么一个Block可以存放4096/4=1024个指针。</p><p>如下图</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426112704312.png" alt="image-20240426112704312"></p><p>为什么要分间接和直接指针呢?如果一个inode中15个指针全是直接指针，假如每个block的大小为1KB，那么15个指针只能指向15个block即15KB的大小，由于每个文件对应一个inode号，所以就限制了每个文件最大为15*1=15KB，这显然是不合理的。</p><p>如果存储大于15KB的文件而又不太大的时候，就占用一级间接指针i_block[12]，这时可以存放指针数量为1024/4+12=268，所以能存放268KB的文件。</p><p>如果存储大于268K 的文件而又不太大的时候，就继续占用二级指针i_block[13]，这时可以存放指针数量为[1024/4]^2+1024/4+12=65804，所以能存放65804KB=64M左右的文件。</p><p>如果存放的文件大于64M，那么就继续使用三级间接指针i_block[14]，存放的指针数量为[1024/4]^3+[1024/4]^2+[1024/4]+12=16843020个指针，所以能存放16843020KB=16GB左右的文件。</p><p>如果blocksize=4KB呢?那么最大能存放的文件大小为([4096/4]^3+[4096/4]^2+[4096/4]+12)*4/1024/1024/1024=4T左右。</p><p>当然这样计算出来的不一定就是最大能存放的文件大小，它还受到另一个条件的限制。这里的计算只是表明一个大文件是如何寻址和分配的。</p><p>其实看到这里的计算数值，就知道ext2和ext3对超大文件的存取效率是低下的，它要核对太多的指针，特别是4KB大小的blocksize时。而ext4针对这一点就进行了优化，ext4使用extent的管理方式取代ext2和ext3的块映射，大大提高了效率也降低了碎片。</p><h3 id="6-单文件系统中文件操作的原理">6.单文件系统中文件操作的原理</h3><p>在Linux上执行删除、复制、重命名、移动等操作时，它们是怎么进行的呢?还有访问文件时是如何找到它的呢?其实只要理解了前文中介绍的几个术语以及它们的作用就很容易知道文件操作的原理了。</p><p>注：在这一小节所解释的都是在单个文件系统下的行为，在多个文件系统中如何请看下一个小节：多文件系统关联。</p><h4 id="6-1-读取文件"><strong>6.1 读取文件</strong></h4><p>当执行&quot;<strong>cat /var/log/messages</strong>&quot;命令在系统内部进行了什么样的步骤呢?该命令能被成功执行涉及了cat命令的寻找、权限判断以及messages文件的寻找和权限判断等等复杂的过程。这里只解释和本节内容相关的如何寻找到被cat的/var/log/messages文件。</p><ul><li>找到根文件系统的块组描述符表所在的blocks，读取GDT(已在内存中)找到inode table的block号。</li></ul><p>因为GDT总是和superblock在同一个块组，而superblock总是在分区的第1024-2047个字节，所以很容易就知道第一个GDT所在的块组以及GDT在这个块组中占用了哪些block。</p><p>其实GDT早已经在内存中了，在系统开机的时候会挂载根文件系统，挂载的时候就已经将所有的GDT放进内存中。</p><ul><li>在inode table的block中定位到根&quot;/“的inode，找出”/&quot;指向的data block。</li></ul><p>前文说过，ext文件系统预留了一些inode号，其中&quot;/&quot;的inode号为2，所以可以根据inode号直接定位根目录文件的data block。</p><ul><li>在&quot;/&quot;的datablock中记录了var目录名和指向var目录文件inode的指针，并找到该inode记录，inode记录中存储了指向var的block指针，所以也就找到了var目录文件的data block。</li></ul><p>通过var目录的inode指针，可以寻找到var目录的inode记录，但是指针定位的过程中，还需要知道该inode记录所在的块组以及所在的inode table，所以需要读取GDT，同样，GDT已经缓存到了内存中。</p><ul><li>在var的data block中记录了log目录名和其inode指针，通过该指针定位到该inode所在的块组及所在的inode table，并根据该inode记录找到log的data block。</li><li>在log目录文件的data block中记录了messages文件名和对应的inode指针，通过该指针定位到该inode所在的块组及所在的inode table，并根据该inode记录找到messages的data block。</li><li>最后读取messages对应的datablock。</li></ul><p>将上述步骤中GDT部分的步骤简化后比较容易理解。如下:<strong>找到GDT–&gt;找到&quot;/&quot;的inode–&gt;找到/的数据块读取var的inode–&gt;找到var的数据块读取log的inode–&gt;找到log的数据块读取messages的inode–&gt;找到messages的数据块并读取它们。</strong></p><h4 id="6-2-删除、重命名和移动文件">6.2 删除、重命名和移动文件</h4><p>注意这里是不跨越文件系统的操作行为。</p><ul><li><strong>删除文件分为普通文件和目录文件</strong>，知道了这两种类型的文件的删除原理，就知道了其他类型特殊文件的删除方法。</li></ul><p>对于删除普通文件：</p><p>(1) 找到文件的inode和data block(根据前一个小节中的方法寻找);</p><p>(2) 将inode table中该inode记录中的data block指针删除;</p><p>(3) 在imap中将该文件的inode号标记为未使用;</p><p>(4) 在其所在目录的data block中将该文件名所在的记录行删除，删除了记录就丢失了指向inode的指针;</p><p>(5) 将bmap中data block对应的block号标记为未使用。</p><p>对于删除目录文件：找到目录和目录下所有文件、子目录、子文件的inode和data block;在imap中将这些inode号标记为未使用;将bmap中将这些文件占用的 block号标记为未使用;在该目录的父目录的data block中将该目录名所在的记录行删除。需要注意的是，删除父目录data block中的记录是最后一步，如果该步骤提前，将报目录非空的错误，因为在该目录中还有文件占用。</p><p>关于上面的(2)-(5)：当(2)中删除data block指针后，将无法再找到这个文件的数据;当(3)标记inode号未使用，表示该inode号可以被后续的文件重用;当(4)删除目录data block中关于该文件的记录，真正的删除文件，外界再也定位也无法看到这个文件了;当(5)标记data block为未使用后，表示开始释放空间，这些data block可以被其他文件重用。</p><p>注意，在第(5)步之前，由于data block还未被标记为未使用，在superblock中仍然认为这些data block是正在使用中的。这表示尽管文件已经被删除了，但空间却还没有释放，df也会将其统计到已用空间中(df是读取superblock中的数据块数量，并计算转换为空间大小)。</p><p>什么时候会发生这种情况呢?当一个进程正在引用文件时将该文件删除，就会出现文件已删除但空间未释放的情况。这时步骤已经进行到(4)，外界无法再找到该文件，但由于进程在加载该文件时已经获取到了该文件所有的data block指针，该进程可以获取到该文件的所有数据，但却暂时不会释放该文件空间。直到该进程结束，文件系统才将未执行的步骤(5)继续完成。这也是为什么有时候du的统计结果比df小的原因，关于du和df统计结果的差别，详细内容见：详细分析du和df的统计结果为什么不一样。</p><ul><li>重命名文件分为同目录内重命名和非同目录内重命名。非同目录内重命名实际上是移动文件的过程，见下文。</li></ul><p>同目录内重命名文件的动作仅仅只是修改所在目录data block中该文件记录的文件名部分，不是删除再重建的过程。</p><p>如果重命名时有文件名冲突(该目录内已经存在该文件名)，则提示是否覆盖。覆盖的过程是覆盖目录data block中冲突文件的记录。例如/tmp/下有a.txt和a.log，若将a.txt重命名为a.log，则提示覆盖，若选择覆盖，则/tmp的data block中关于a.log的记录被覆盖，此时它的指针是指向a.txt的inode。</p><ul><li>移动文件</li></ul><p>同文件系统下移动文件实际上是修改目标文件所在目录的data block，向其中添加一行指向inode table中待移动文件的inode指针，如果目标路径下有同名文件，则会提示是否覆盖，实际上是覆盖目录data block中冲突文件的记录，由于同名文件的inode记录指针被覆盖，所以无法再找到该文件的data block，也就是说该文件被标记为删除(如果多个硬链接数，则另当别论)。</p><p>所以在同文件系统内移动文件相当快，仅仅在所在目录data block中添加或覆盖了一条记录而已。也因此，移动文件时，文件的inode号是不会改变的。</p><p>对于不同文件系统内的移动，相当于先复制再删除的动作。见后文。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426113825639.png" alt="image-20240426113825639"></p><p>关于文件移动，在Linux环境下有一个非常经典网上却又没任何解释的问题：/tmp/a/a能覆盖为/tmp/a吗?答案是不能，但windows能。为什么不能?见mv的一个经典问题(mv的本质)。</p><h4 id="6-3-存储和复制文件">6.3 存储和复制文件</h4><ul><li>对于文件存储</li><li>(1).读取GDT，找到各个(或部分)块组imap中未使用的inode号，并为待存储文件分配inode号;</li><li>(2).在inode table中完善该inode号所在行的记录;</li><li>(3).在目录的data block中添加一条该文件的相关记录;</li><li>(4).将数据填充到data block中。</li><li>注意，填充到data block中的时候会调用block分配器：一次分配4KB大小的block数量，当填充完4KB的data block后会继续调用block分配器分配4KB的block，然后循环直到填充完所有数据。也就是说，如果存储一个100M的文件需要调用block分配器100*1024/4=25600次。</li><li>另一方面，在block分配器分配block时，block分配器并不知道真正有多少block要分配，只是每次需要分配时就分配，在每存储一个data block前，就去bmap中标记一次该block已使用，它无法实现一次标记多个bmap位。这一点在ext4中进行了优化。</li><li>(5)填充完之后，去inode table中更新该文件inode记录中指向data block的寻址指针。</li><li>对于复制，完全就是另一种方式的存储文件。步骤和存储文件的步骤一样。</li></ul><h3 id="7-多文件系统关联">7.多文件系统关联</h3><p>在单个文件系统中的文件操作和多文件系统中的操作有所不同。本文将对此做出非常详细的说明。</p><h4 id="7-1-根文件系统的特殊性">7.1 根文件系统的特殊性</h4><p>这里要明确的是，任何一个文件系统要在Linux上能正常使用，必须挂载在某个已经挂载好的文件系统中的某个目录下，例如/dev/cdrom挂载在/mnt上，/mnt目录本身是在&quot;/“文件系统下的。而且任意文件系统的一级挂载点必须是在根文件系统的某个目录下，因为只有”/&quot;是自引用的。这里要说明挂载点的级别和自引用的概念。</p><p>假如/dev/sdb1挂载在/mydata上，/dev/cdrom挂载在/mydata/cdrom上，那么/mydata就是一级挂载点，此时/mydata已经是文件系统/dev/sdb1的入口了，而/dev/cdrom所挂载的目录/mydata/cdrom是文件系统/dev/sdb1中的某个目录，那么/mydata/cdrom就是二级挂载点。一级挂载点必须在根文件系统下，所以可简述为：文件系统2挂载在文件系统1中的某个目录下，而文件系统1又挂载在根文件系统中的某个目录下。</p><p>再解释自引用。首先要说的是，自引用的只能是文件系统，而文件系统表现形式是一个目录，所以自引用是指该目录的data block中，&quot;.“和”…&quot;的记录中的inode指针都指向inode table中同一个inode记录，所以它们inode号是相同的，即互为硬链接。而根文件系统是唯一可以自引用的文件系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@xuexi /]<span class="comment"># ll -ai / </span></span><br><span class="line">total 102 </span><br><span class="line"> 2 dr-xr-xr-x. 22 root root 4096 Jun 6 18:13 . </span><br><span class="line"> 2 dr-xr-xr-x. 22 root root 4096 Jun 6 18:13 ..  </span><br></pre></td></tr></table></figure><p>由此也能解释cd /.和cd /…的结果都还是在根下，这是自引用最直接的表现形式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@xuexi tmp]<span class="comment"># cd /. </span></span><br><span class="line">[root@xuexi /]<span class="comment"># </span></span><br><span class="line">[root@xuexi tmp]<span class="comment"># cd /.. </span></span><br><span class="line">[root@xuexi /]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>注意，根目录下的&quot;.“和”…“都是”/“目录的硬链接，且其datablock中不记录名为”/&quot;的条目，因此除去根目录下子目录数后的硬链接数为2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server2 tmp]<span class="comment"># a=$(ls -ld / | awk &#x27;&#123;print $2&#125;&#x27;) </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># b=$(ls -l / | grep &quot;^d&quot; |wc -l) </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># echo $((a - b)) </span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="7-2-挂载文件系统的细节">7.2 挂载文件系统的细节</h4><p>挂载文件系统到某个目录下，例如&quot;mount /dev/cdrom /mnt&quot;，挂载成功后/mnt目录中的文件全都暂时不可见了，且挂载后权限和所有者(如果指定允许普通用户挂载)等的都改变了，知道为什么吗?</p><p>下面就以通过&quot;mount /dev/cdrom /mnt&quot;为例，详细说明挂载过程中涉及的细节。</p><p>在将文件系统/dev/cdrom(此处暂且认为它是文件系统)挂载到挂载点/mnt之前，挂载点/mnt是根文件系统中的一个目录，&quot;/&quot;的data block中记录了/mnt的一些信息，其中包括inode指针inode_n，而在inode table中，/mnt对应的inode记录中又存储了block指针block_n，此时这两个指针还是普通的指针。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426131810028.png" alt="image-20240426131810028"></p><p>当文件系统/dev/cdrom挂载到/mnt上后，/mnt此时就已经成为另一个文件系统的入口了，因此它需要连接两边文件系统的inode和data block。但是如何连接呢？如下图。【好图】</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426131959318.png" alt="image-20240426131959318"></p><p>在根文件系统的inode table中，为/mnt重新分配一个inode记录m，该记录的block指针block_m指向文件系统/dev/cdrom中的data block。既然为/mnt分配了新的inode记录m，那么在&quot;/&quot;目录的data block中，也需要修改其inode指针为inode_m以指向m记录。同时，原来inode table中的inode记录n就被标记为暂时不可用。</p><p>block_m指向的是文件系统/dev/cdrom的data block，所以严格说起来，除了/mnt的元数据信息即inode记录m还在根文件系统上，/mnt的data block已经是在/dev/cdrom中的了。这就是挂载新文件系统后实现的跨文件系统，它将挂载点的元数据信息和数据信息分别存储在不同的文件系统上。</p><p>挂载完成后，将在/proc/self/{mounts,mountstats,mountinfo}这三个文件中写入挂载记录和相关的挂载信息，并会将/proc/self/mounts中的信息同步到/etc/mtab文件中，当然，如果挂载时加了-n参数，将不会同步到/etc/mtab。</p><p>而卸载文件系统，其实质是移除临时新建的inode记录(当然，在移除前会检查是否正在使用)及其指针，并将指针指回原来的inode记录，这样inode记录中的block指针也就同时生效而找回对应的data block了。由于卸载只是移除inode记录，所以使用挂载点和文件系统都可以实现卸载，因为它们是联系在一起的。</p><p>下面是分析或结论</p><p>(1).挂载点挂载时的inode记录是新分配的。</p><p># 挂载前挂载点/mnt的inode号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server2 tmp]<span class="comment"># ll -id /mnt </span></span><br><span class="line">100663447 drwxr-xr-x. 2 root root 6 Aug 12 2015 /mnt </span><br><span class="line">[root@server2 tmp]<span class="comment"># mount /dev/cdrom /mnt </span></span><br><span class="line"><span class="comment"># 挂载后挂载点的inode号 </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># ll -id /mnt  </span></span><br><span class="line">1856 dr-xr-xr-x 8 root root 2048 Dec 10 2015 mnt </span><br></pre></td></tr></table></figure><p>由此可以验证，inode号确实是重新分配的。</p><p>(2).挂载后，挂载点的内容将暂时不可见、不可用，卸载后文件又再次可见、可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在挂载前，向挂载点中创建几个文件 </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># touch /mnt/a.txt </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># mkdir /mnt/abcdir </span></span><br><span class="line"><span class="comment"># 挂载 </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># mount /dev/cdrom /mnt </span></span><br><span class="line"><span class="comment"># 挂载后，挂载点中将找不到刚创建的文件 </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># ll /mnt </span></span><br><span class="line">total 636 </span><br><span class="line">-r--r--r-- 1 root root 14 Dec 10 2015 CentOS_BuildTag </span><br><span class="line">dr-xr-xr-x 3 root root 2048 Dec 10 2015 EFI </span><br><span class="line">-r--r--r-- 1 root root 215 Dec 10 2015 EULA </span><br><span class="line">-r--r--r-- 1 root root 18009 Dec 10 2015 GPL </span><br><span class="line">dr-xr-xr-x 3 root root 2048 Dec 10 2015 images </span><br><span class="line">dr-xr-xr-x 2 root root 2048 Dec 10 2015 isolinux </span><br><span class="line">dr-xr-xr-x 2 root root 2048 Dec 10 2015 LiveOS </span><br><span class="line">dr-xr-xr-x 2 root root 612352 Dec 10 2015 Packages </span><br><span class="line">dr-xr-xr-x 2 root root 4096 Dec 10 2015 repodata </span><br><span class="line">-r--r--r-- 1 root root 1690 Dec 10 2015 RPM-GPG-KEY-CentOS-7 </span><br><span class="line">-r--r--r-- 1 root root 1690 Dec 10 2015 RPM-GPG-KEY-CentOS-Testing-7 </span><br><span class="line">-r--r--r-- 1 root root 2883 Dec 10 2015 TRANS.TBL </span><br><span class="line"><span class="comment"># 卸载后，挂载点/mnt中的文件将再次可见 </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># umount /mnt </span></span><br><span class="line">[root@server2 tmp]<span class="comment"># ll /mnt </span></span><br><span class="line">total 0 </span><br><span class="line">drwxr-xr-x 2 root root 6 Jun 9 08:18 abcdir </span><br><span class="line">-rw-r--r-- 1 root root 0 Jun 9 08:18 a.txt </span><br></pre></td></tr></table></figure><p>之所以会这样，是因为挂载文件系统后，挂载点原来的inode记录暂时被标记为不可用，关键是没有指向该inode记录的inode指针了。在卸载文件系统后，又重新启用挂载点原来的inode记录，&quot;/&quot;目录下的mnt的inode指针又重新指向该inode记录。</p><p>(3).挂载后，挂载点的元数据和data block是分别存放在不同文件系统上的。</p><p>(4).挂载点即使在挂载后，也还是属于源文件系统的文件。</p><h4 id="7-3-多文件系统操作关联">7.3 多文件系统操作关联</h4><p>假如下图中的圆代表一块硬盘，其中划分了3个区即3个文件系统。其中根是根文件系统，/mnt是另一个文件系统A的入口，A文件系统挂载在/mnt上，/mnt/cdrom也是一个文件系统B的入口，B文件系统挂载在/mnt/cdrom上。每个文件系统都维护了一些inode table，这里假设图中的inode table是每个文件系统所有块组中的inode table的集合表。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426132902871.png" alt="image-20240426132902871"></p><p>如何读取/var/log/messages呢?这是和&quot;/&quot;在同一个文件系统的文件读取，在前面单文件系统中已经详细说明了。</p><p>但如何读取A文件系统中的/mnt/a.log呢?首先，从根文件系统找到/mnt的inode记录，这是单文件系统内的查找;然后根据此inode记录的block指针，定位到/mnt的data block中，这些block是A文件系统的data block;然后从/mnt的data block中读取a.log记录，并根据a.log的inode指针定位到A文件系统的inode table中对应a.log的inode记录;最后从此inode记录的block指针找到a.log的data block。至此，就能读取到/mnt/a.log文件的内容。</p><p>下图能更完整的描述上述过程。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426133033004.png" alt="image-20240426133033004"></p><p>那么又如何读取/mnt/cdrom中的/mnt/cdrom/a.rpm呢?这里cdrom代表的文件系统B挂载点位于/mnt下，所以又多了一个步骤。先找到&quot;/&quot;，再找到根中的mnt，进入到mnt文件系统中，找到cdrom的data block，再进入到cdrom找到a.rpm。也就是说，mnt目录文件存放位置是根，cdrom目录文件存放位置是mnt，最后a.rpm存放的位置才是cdrom。</p><p>继续完善上图。如下。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426133050365.png" alt="image-20240426133050365"></p><h3 id="8-ext3文件系统的日志功能">8.ext3文件系统的日志功能</h3><p>相比ext2文件系统，ext3多了一个日志功能。</p><p>在ext2文件系统中，只有两个区：数据区和元数据区。如果正在向data block中填充数据时突然断电，那么下一次启动时就会检查文件系统中数据和状态的一致性，这段检查和修复可能会消耗大量时间，甚至检查后无法修复。之所以会这样是因为文件系统在突然断电后，它不知道上次正在存储的文件的block从哪里开始、哪里结束，所以它会扫描整个文件系统进行排除(也许是这样检查的吧)。</p><p>而在创建ext3文件系统时会划分三个区：数据区、日志区和元数据区。每次存储数据时，先在日志区中进行ext2中元数据区的活动，直到文件存储完成后标记上commit才将日志区中的数据转存到元数据区。当存储文件时突然断电，下一次检查修复文件系统时，只需要检查日志区的记录，将bmap对应的data block标记为未使用，并把inode号标记未使用，这样就不需要扫描整个文件系统而耗费大量时间。</p><p>虽说ext3相比ext2多了一个日志区转写元数据区的动作而导致ext3相比ext2性能要差一点，特别是写众多小文件时。但是由于ext3其他方面的优化使得ext3和ext2性能几乎没有差距。</p><h3 id="9-ext4文件系统">9.ext4文件系统</h3><p>回顾前面关于ext2和ext3文件系统的存储格式，它使用block为存储单元，每个block使用bmap中的位来标记是否空闲，尽管使用划分块组的方法优化提高了效率，但是一个块组内部仍然使用bmap来标记该块组内的block。对于一个巨大的文件，扫描整个bmap都将是一件浩大的工程。另外在inode寻址方面，ext2/3使用直接和间接的寻址方式，对于三级间接指针，可能要遍历的指针数量是非常非常巨大的。</p><p>ext4文件系统的最大特点是在ext3的基础上使用区(extent，或称为段)的概念来管理。一个extent尽可能的包含物理上连续的一堆block。inode寻址方面也一样使用区段树的方式进行了改进。</p><p>默认情况下，EXT4不再使用EXT3的block mapping分配方式 ，而改为Extent方式分配。</p><p>以下是ext4文件系统中一个文件的inode属性示例，注意最后两行的EXTENTS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Inode: 12 Type: regular Mode: 0644 Flags: 0x80000 </span><br><span class="line">Generation: 476513974 Version: 0x00000000:00000001 </span><br><span class="line">User: 0 Group: 0 Size: 11 </span><br><span class="line">File ACL: 0 Directory ACL: 0 </span><br><span class="line">Links: 1 Blockcount: 8 </span><br><span class="line">Fragment: Address: 0 Number: 0 Size: 0 </span><br><span class="line"> ctime: 0x5b628ca0:491d6224 -- Thu Aug 2 12:46:24 2018 </span><br><span class="line"> atime: 0x5b628ca0:491d6224 -- Thu Aug 2 12:46:24 2018 </span><br><span class="line"> mtime: 0x5b628ca0:491d6224 -- Thu Aug 2 12:46:24 2018 </span><br><span class="line">crtime: 0x5b628ca0:491d6224 -- Thu Aug 2 12:46:24 2018 </span><br><span class="line">Size of extra inode fields: 28 </span><br><span class="line">EXTENTS: </span><br><span class="line">(0):33409 </span><br></pre></td></tr></table></figure><p>(1). 关于EXT4的结构特征</p><p>EXT4在总体结构上与EXT3相似，大的分配方向都是基于相同大小的块组，每个块组内分配固定数量的inode、可能的superblock(或备份)及GDT。</p><p>EXT4的inode 结构做了重大改变，为增加新的信息，大小由EXT3的128字节增加到默认的256字节，同时inode寻址索引不再使用EXT3的&quot;12个直接寻址块+1个一级间接寻址块+1个二级间接寻址块+1个三级间接寻址块&quot;的索引模式，而改为4个Extent片断流，每个片断流设定片断的起始block号及连续的block数量(有可能直接指向数据区，也有可能指向索引块区)。</p><p>片段流即下图中索引节点(inde node block)部分的绿色区域，每个15字节，共60字节。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426133212168.png" alt="image-20240426133212168"></p><p>(2). EXT4删除数据的结构更改。</p><p>EXT4删除数据后，会依次释放文件系统bitmap空间位、更新目录结构、释放inode空间位。</p><p>(3). ext4使用多block分配方式。</p><p>在存储数据时，ext3中的block分配器一次只能分配4KB大小的Block数量，而且每存储一个block前就标记一次bmap。假如存储1G的文件，blocksize是4KB，那么每存储完一个Block就将调用一次block分配器，即调用的次数为1024 * 1024 / 4KB=262144次，标记bmap的次数也为1024 * 1024/4=262144次。</p><p>而在ext4中根据区段来分配，可以实现调用一次block分配器就分配一堆连续的block，并在存储这一堆block前一次性标记对应的bmap。这对于大文件来说极大的提升了存储效率。</p><h3 id="10-ext类的文件系统的缺点">10.ext类的文件系统的缺点</h3><p>最大的缺点是它在创建文件系统的时候就划分好一切需要划分的东西，以后用到的时候可以直接进行分配，也就是说它不支持动态划分和动态分配。对于较小的分区来说速度还好，但是对于一个超大的磁盘，速度是极慢极慢的。例如将一个几十T的磁盘阵列格式化为ext4文件系统，可能你会因此而失去一切耐心。</p><p>除了格式化速度超慢以外，ext4文件系统还是非常可取的。当然，不同公司开发的文件系统都各有特色，最主要的还是根据需求选择合适的文件系统类型。</p><h3 id="11-虚拟文件系统VFS">11.虚拟文件系统VFS</h3><p>每一个分区格式化后都可以建立一个文件系统，Linux上可以识别很多种文件系统，那么它是如何识别的呢?另外，在我们操作分区中的文件时，并没有指定过它是哪个文件系统的，各种不同的文件系统如何被我们用户以无差别的方式操作呢?这就是虚拟文件系统的作用。</p><p>虚拟文件系统为用户操作各种文件系统提供了通用接口，使得用户执行程序时不需要考虑文件是在哪种类型的文件系统上，应该使用什么样的系统调用来操作该文件。有了虚拟文件系统，只要将所有需要执行的程序调用VFS的系统调用就可以了，剩下的动作由VFS来帮忙完成。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240426133132195.png" alt="image-20240426133132195"></p><h3 id="参考资料">参考资料</h3><p>本文章摘自：</p><ul><li><a href="https://www.51cto.com/article/603104.html">EXT文件系统机制原理详解</a></li><li><a href="https://www.yuque.com/yukun-srnyg/gxz6gg/hovdfg">操作系统-哈工大李治军老师</a></li></ul><h3 id=""></h3>]]></content>
    
    
    <summary type="html">动手实现文件系统</summary>
    
    
    
    <category term="操作系统" scheme="https://penge666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://penge666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>malloc原理实现</title>
    <link href="https://penge666.github.io/posts/3e3da89f.html"/>
    <id>https://penge666.github.io/posts/3e3da89f.html</id>
    <published>2024-04-25T09:04:14.000Z</published>
    <updated>2024-04-25T09:38:47.409Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://mp.weixin.qq.com/s/xCqPaYqM5It97KDwCjrYIQ">内存分配函数 malloc 原理及实现</a></p><h2 id="1-什么是malloc"><strong>1.什么是malloc</strong></h2><p>根据<strong>标准C库函数</strong>的定义，malloc具有如下原型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* malloc(size_t size);</span><br></pre></td></tr></table></figure><p>这个函数要实现的功能是在系统中分配一段连续的可用的内存，具体有如下要求：</p><ul><li>malloc分配的内存大小<strong>至少</strong>为size参数所指定的字节数</li><li>malloc的返回值是一个指针，指向一段可用内存的起始地址</li><li>多次调用malloc所分配的地址不能有重叠部分，除非某次malloc所分配的地址被释放掉</li><li>malloc应该尽快完成内存分配并返回</li><li>实现malloc时应同时实现内存大小调整和内存释放函数（即realloc和free）</li></ul><p>对于malloc更多的说明可以在命令行中键入以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man malloc</span><br></pre></td></tr></table></figure><p><strong>malloc如何分配内存？</strong></p><p>第一种：通过brk()系统调用从堆分配内存</p><p>第二种：通过 mmap()系统调用在文件映射区域分配内存;</p><p>两种方式应该如何区分?</p><ol><li><p>如果用户分配的内存小于128 KB，则通过brk()申请内存</p></li><li><p>如果用户分配的内存大于128 KB，则通过mmap()申请内存</p></li><li><p>不同的glibc当中定义的阈值是不一样的【glibc 是 C 语言的运行时库，C语义中常见的函数printf等实现都在 <a href="http://glibc.so">glibc.so</a> 中】</p></li></ol><h2 id="2-预备知识"><strong>2.预备知识</strong></h2><p>在实现malloc之前，需要先解释一些Linux系统内存相关的知识。</p><h3 id="2-1-Linux内存管理">2.1 Linux内存管理</h3><h4 id="2-1-1-虚拟内存地址与物理内存地址">2.1.1 虚拟内存地址与物理内存地址</h4><p>为了简单，现代操作系统在处理内存地址时，普遍采用虚拟内存地址技术。即在汇编程序（或机器语言）层面，当涉及内存地址时，都是使用虚拟内存地址。采用这种技术时，每个进程仿佛自己独享一片2N字节的内存，其中N是机器位数。例如在64位CPU和64位操作系统下，每个进程的虚拟地址空间为264Byte。</p><p>这种虚拟地址空间的作用主要是简化程序的编写及方便操作系统对进程间内存的隔离管理，真实中的进程不太可能（也用不到）如此大的内存空间，实际能用到的内存取决于物理内存大小。</p><p>由于在机器语言层面都是采用虚拟地址，当实际的机器码程序涉及到内存操作时，需要根据当前进程运行的实际上下文将虚拟地址转换为物理内存地址，才能实现对真实内存数据的操作。这个转换一般由一个叫<strong>MMU</strong>[2]（Memory Management Unit）的硬件完成。</p><h4 id="2-1-2-页与地址构成">2.1.2 页与地址构成</h4><p>在现代操作系统中，不论是虚拟内存还是物理内存，都不是以字节为单位进行管理的，而是以页（Page）为单位。一个内存页是一段固定大小的连续内存地址的总称，具体到Linux中，典型的内存页大小为4096Byte（4K）。</p><p>所以内存地址可以分为页号和页内偏移量。下面以64位机器，4G物理内存，4K页大小为例，虚拟内存地址和物理内存地址的组成如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171539476.png" alt="image-20240425171539476"></p><p>上面是虚拟内存地址，下面是物理内存地址。由于页大小都是4K，所以页内偏移都是用低12位表示，而剩下的高地址表示页号。</p><p>MMU映射单位并不是字节，而是页，这个映射通过查一个常驻内存的数据结构<strong>页表</strong>[3]来实现。现在计算机具体的内存地址映射比较复杂，为了加快速度会引入一系列缓存和优化，例如<strong>TLB</strong>[4]等机制。</p><p>下面给出一个经过简化的内存地址翻译示意图，虽然经过了简化，但是基本原理与现代计算机真实的情况是一致的。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171620475.png" alt="image-20240425171620475"></p><h4 id="2-1-3-内存页与磁盘页">2.1.3 内存页与磁盘页</h4><p>我们知道一般将内存看做磁盘的的缓存，有时MMU在工作时，会发现页表表明某个内存页不在物理内存中，此时会触发一个缺页异常（Page Fault），此时系统会到磁盘中相应的地方将磁盘页载入到内存中，然后重新执行由于缺页而失败的机器指令。关于这部分，因为可以看做对malloc实现是透明的，所以不再详细讲述，有兴趣的可以参考《深入理解计算机系统》相关章节。</p><p>最后附上一张在维基百科找到的更加符合真实地址翻译的流程供大家参考，这张图加入了TLB和缺页异常的流程（<strong>图片来源页</strong>[5]）。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171626448.png" alt="image-20240425171626448"></p><h3 id="2-2-Linux进程级内存管理">2.2 Linux进程级内存管理</h3><h4 id="2-2-1-内存排布">2.2.1 内存排布</h4><p>明白了虚拟内存和物理内存的关系及相关的映射机制，下面看一下具体在一个进程内是如何排布内存的。</p><p>以Linux 64位系统为例。理论上，64bit内存地址可用空间为0x0000000000000000 ~ 0xFFFFFFFFFFFFFFFF，这是个相当庞大的空间，Linux实际上只用了其中一小部分（256T）。</p><p>根据<strong>Linux内核相关文档</strong>[6]描述，Linux64位操作系统仅使用低47位，高17位做扩展（只能是全0或全1）。所以，实际用到的地址为空间为0x0000000000000000 ~ 0x00007FFFFFFFFFFF和0xFFFF800000000000 ~ 0xFFFFFFFFFFFFFFFF，其中前面为用户空间（User Space），后者为内核空间（Kernel Space）。图示如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171633158.png" alt="image-20240425171633158"></p><p>对用户来说，主要关注的空间是User Space。将User Space放大后，可以看到里面主要分为如下几段：</p><ul><li>Code：这是整个用户空间的最低地址部分，存放的是指令（也就是程序所编译成的可执行机器码）</li><li>Data：这里存放的是初始化过的全局变量</li><li>BSS：这里存放的是未初始化的全局变量</li><li>Heap：堆，这是我们本文重点关注的地方，堆自低地址向高地址增长，后面要讲到的brk相关的系统调用就是从这里分配内存</li><li>Mapping Area：这里是与mmap系统调用相关的区域。大多数实际的malloc实现会考虑通过mmap分配较大块的内存区域，本文不讨论这种情况。这个区域自高地址向低地址增长</li><li>Stack：这是栈区域，自高地址向低地址增长</li></ul><p>下面我们主要关注Heap区域的操作。对整个Linux内存排布有兴趣的同学可以参考其它资料。</p><h4 id="2-2-2-Heap内存模型">2.2.2 Heap内存模型</h4><p>一般来说，malloc所申请的内存主要从Heap区域分配（本文不考虑通过mmap申请大块内存的情况）。</p><p>由上文知道，进程所面对的虚拟内存地址空间，只有按页映射到物理内存地址，才能真正使用。受物理存储容量限制，整个堆虚拟内存空间不可能全部映射到实际的物理内存。Linux对堆的管理示意如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171639162.png" alt="image-20240425171639162"></p><p>Linux维护一个break指针，这个指针指向堆空间的某个地址。从堆起始地址到break之间的地址空间为映射好的，可以供进程访问；而从break往上，是未映射的地址空间，如果访问这段空间则程序会报错。</p><h4 id="2-2-3-brk与sbrk">2.2.3 brk与sbrk</h4><p>由上文知道，要增加一个进程实际的可用堆大小，就需要将break指针向高地址移动。Linux通过brk和sbrk系统调用操作break指针。两个<strong>系统调用</strong>的原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">brk</span><span class="params">(<span class="type">void</span> *addr)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">sbrk</span><span class="params">(<span class="type">intptr_t</span> increment)</span></span>;</span><br></pre></td></tr></table></figure><p>brk将break指针直接设置为某个地址，而sbrk将break从当前位置移动increment所指定的增量。brk在执行成功时返回0，否则返回-1并设置errno为ENOMEM；sbrk成功时返回break移动之前所指向的地址，否则返回(void *)-1。</p><p>一个小技巧是，如果将increment设置为0，则可以获得当前break的地址。</p><p>另外需要注意的是，由于Linux是按页进行内存映射的，所以如果break被设置为没有按页大小对齐，则系统实际上会在最后映射一个完整的页，从而实际已映射的内存空间比break指向的地方要大一些。但是使用break之后的地址是很危险的（尽管也许break之后确实有一小块可用内存地址）。</p><h4 id="2-2-4-资源限制与rlimit">2.2.4 资源限制与rlimit</h4><p>系统对每一个进程所分配的资源不是无限的，包括可映射的内存空间，因此每个进程有一个rlimit表示当前进程可用的资源上限。</p><p>这个限制可以通过getrlimit系统调用得到，下面代码获取当前进程虚拟内存空间的rlimit：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">rlimit</span> *limit = (<span class="keyword">struct</span> rlimit *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> rlimit));</span><br><span class="line">    <span class="built_in">getrlimit</span>(RLIMIT_AS, limit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;soft limit: %ld, hard limit: %ld\n&quot;</span>, limit-&gt;rlim_cur, limit-&gt;rlim_max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中rlimit是一个结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">rlimit</span> &#123;</span><br><span class="line">    <span class="type">rlim_t</span> rlim_cur;  <span class="comment">/* Soft limit */</span></span><br><span class="line">    <span class="type">rlim_t</span> rlim_max;  <span class="comment">/* Hard limit (ceiling for rlim_cur) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每种资源有软限制和硬限制，并且可以通过setrlimit对rlimit进行有条件设置。其中硬限制作为软限制的上限，非特权进程只能设置软限制，且不能超过硬限制。</p><h2 id="3-实现malloc"><strong>3.实现malloc</strong></h2><p>下面主要是空闲链表实现的。</p><h3 id="3-1-玩具实现">3.1 玩具实现</h3><p>在正式开始讨论malloc的实现前，我们可以利用上述知识实现一个简单但几乎没法用于真实的玩具malloc，权当对上面知识的复习：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一个玩具malloc */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">malloc</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span> *p;</span><br><span class="line">    p = <span class="built_in">sbrk</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sbrk</span>(size) == (<span class="type">void</span> *)<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个malloc每次都在当前break的基础上增加size所指定的字节数，并将之前break的地址返回。这个malloc由于对所分配的内存缺乏记录，不便于内存释放，所以无法用于真实场景。</p><h3 id="3-2-正式实现">3.2 正式实现</h3><p>下面严肃点讨论malloc的实现方案。</p><h4 id="3-2-1-数据结构">3.2.1 数据结构</h4><p>首先我们要确定所采用的数据结构。一个简单可行方案是将堆内存空间以块（Block）的形式组织起来，每个块由meta区和数据区组成，meta区记录数据块的元信息（数据区大小、空闲标志位、指针等等），数据区是真实分配的内存区域，并且数据区的第一个字节地址即为malloc返回的地址。</p><p>可以用如下结构体定义一个block：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">s_block</span> *t_block;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">s_block</span> &#123;</span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">/* 数据区大小 */</span></span><br><span class="line">  t_block next; <span class="comment">/* 指向下个块的指针 */</span></span><br><span class="line">  <span class="type">int</span> free; <span class="comment">/* 是否是空闲块 */</span></span><br><span class="line">  <span class="type">int</span> padding; <span class="comment">/* 填充4字节，保证meta块长度为8的倍数 */</span></span><br><span class="line">  <span class="type">char</span> data[<span class="number">1</span>] <span class="comment">/* 这是一个虚拟字段，表示数据块的第一个字节，长度不应计入meta */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于我们只考虑64位机器，为了方便，我们在结构体最后填充一个int，使得结构体本身的长度为8的倍数，以便内存对齐。示意图如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171646744.png" alt="image-20240425171646744"></p><blockquote><p><strong>补充</strong>：柔性数组</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/385501987">听说有人不了解柔性数组？</a></li></ul><h4 id="3-2-2-寻找合适的block">3.2.2 寻找合适的block</h4><p>现在考虑如何在block链中查找合适的block。一般来说有两种查找算法：</p><ul><li><strong>First fit</strong>：从头开始，使用第一个数据区大小大于要求size的块所谓此次分配的块</li><li><strong>Best fit</strong>：从头开始，遍历所有块，使用数据区大小大于size且差值最小的块作为此次分配的块</li></ul><p>两种方法各有千秋，best fit具有较高的内存使用率（payload较高），而first fit具有更好的运行效率。这里我们采用first fit算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* First fit */</span></span><br><span class="line"><span class="function">t_block <span class="title">find_block</span><span class="params">(t_block *last, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">  t_block b = first_block;</span><br><span class="line">  <span class="keyword">while</span>(b &amp;&amp; !(b-&gt;free &amp;&amp; b-&gt;size &gt;= size)) &#123;</span><br><span class="line">     *last = b;</span><br><span class="line">     b = b-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>find_block从frist_block开始，查找第一个符合要求的block并返回block起始地址，如果找不到这返回NULL。</p><p>这里在遍历时会更新一个叫last的指针，这个指针始终指向当前遍历的block。这是为了如果找不到合适的block而开辟新block使用的，具体会在接下来的一节用到。</p><h4 id="3-2-3-开辟新的block">3.2.3 开辟新的block</h4><p>如果现有block都不能满足size的要求，则需要在链表最后开辟一个新的block。这里关键是如何只使用sbrk创建一个struct：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE 24 <span class="comment">/* 由于存在虚拟的data字段，sizeof不能正确计算meta长度，这里手工设置 */</span></span></span><br><span class="line"><span class="function">t_block <span class="title">extend_heap</span><span class="params">(t_block last, <span class="type">size_t</span> s)</span> </span>&#123;</span><br><span class="line">    t_block b;</span><br><span class="line">    b = <span class="built_in">sbrk</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sbrk</span>(BLOCK_SIZE + s) == (<span class="type">void</span> *)<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    b-&gt;size = s;</span><br><span class="line">    b-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(last)</span><br><span class="line">        last-&gt;next = b;</span><br><span class="line">    b-&gt;free = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-分裂block">3.2.4 分裂block</h4><p>First fit有一个比较致命的缺点，就是可能会让很小的size占据很大的一块block，此时，为了提高payload，应该在剩余数据区足够大的情况下，将其分裂为一个新的block，示意如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425171653204.png" alt="image-20240425171653204"></p><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split_block</span><span class="params">(t_block b, <span class="type">size_t</span> s)</span> </span>&#123;</span><br><span class="line">    t_block <span class="keyword">new</span>;</span><br><span class="line">    <span class="keyword">new</span> = b-&gt;data + s;</span><br><span class="line">    <span class="keyword">new</span>-&gt;size = b-&gt;size - s - BLOCK_SIZE ;</span><br><span class="line">    <span class="keyword">new</span>-&gt;next = b-&gt;next;</span><br><span class="line">    <span class="keyword">new</span>-&gt;free = <span class="number">1</span>;</span><br><span class="line">    b-&gt;size = s;</span><br><span class="line">    b-&gt;next = <span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-5-malloc的实现">3.2.5 malloc的实现</h4><p>有了上面的代码，我们可以利用它们整合成一个简单但初步可用的malloc。注意首先我们要定义个block链表的头first_block，初始化为NULL；另外，我们需要剩余空间至少有BLOCK_SIZE + 8才执行分裂操作。【因为BLOCK_SIZE保存的4个INT的内存大小】</p><p>由于我们希望malloc分配的数据区是按8字节对齐，所以在size不为8的倍数时，我们需要将size调整为大于size的最小的8的倍数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">align8</span><span class="params">(<span class="type">size_t</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s &amp; <span class="number">0x7</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">return</span> ((s &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE 24</span></span><br><span class="line"><span class="type">void</span> *first_block=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">/* other functions... */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">malloc</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    t_block b, last;</span><br><span class="line">    <span class="type">size_t</span> s;</span><br><span class="line">    <span class="comment">/* 对齐地址 */</span></span><br><span class="line">    s = <span class="built_in">align8</span>(size);</span><br><span class="line">    <span class="keyword">if</span>(first_block) &#123;</span><br><span class="line">    / *查找合适的block */</span><br><span class="line">        last = first_block;</span><br><span class="line">        b = <span class="built_in">find_block</span>(&amp;last, s);</span><br><span class="line">        <span class="keyword">if</span>(b) &#123;</span><br><span class="line">    <span class="comment">/* 如果可以，则分裂*/</span></span><br><span class="line">            <span class="keyword">if</span> ((b-&gt;size - s) &gt;= ( BLOCK_SIZE + <span class="number">8</span>))</span><br><span class="line">                <span class="built_in">split_block</span>(b, s);</span><br><span class="line">            b-&gt;free = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    / *没有合适的block，开辟一个新的 */</span><br><span class="line">        b = <span class="built_in">extend_heap</span>(last, s);</span><br><span class="line">        <span class="keyword">if</span>(!b)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    b = <span class="built_in">extend_heap</span>(<span class="literal">NULL</span>, s);</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    first_block = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-6-calloc的实现">3.2.6 calloc的实现</h4><p>有了malloc，实现calloc只要两步：</p><ol><li>malloc一段内存</li><li>将数据区内容置为0</li></ol><p>由于我们的数据区是按8字节对齐的，所以为了提高效率，我们可以每8字节一组置0，而不是一个一个字节设置。我们可以通过新建一个size_t指针，将内存区域强制看做size_t类型来实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">calloc</span><span class="params">(<span class="type">size_t</span> number, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> *<span class="keyword">new</span>;</span><br><span class="line">    <span class="type">size_t</span> s8, i;</span><br><span class="line">    <span class="keyword">new</span> = <span class="built_in">malloc</span>(number * size);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span>) &#123;</span><br><span class="line">        s8 = <span class="built_in">align8</span>(number * size) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; s8; i++)</span><br><span class="line">            <span class="keyword">new</span>[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-7-free的实现">3.2.7 free的实现</h4><p>free的实现并不像看上去那么简单，这里我们要解决两个关键问题：</p><ol><li>如何验证所传入的地址是有效地址，即确实是通过malloc方式分配的数据区首地址</li><li>如何解决碎片问题</li></ol><p>首先我们要保证传入free的地址是有效的，这个有效包括两方面：</p><ul><li>地址应该在之前malloc所分配的区域内，即在first_block和当前break指针范围内</li><li>这个地址确实是之前通过我们自己的malloc分配的</li></ul><p>第一个问题比较好解决，只要进行地址比较就可以了，关键是第二个问题。</p><p>这里有两种解决方案：一是在结构体内埋一个magic number字段，free之前通过相对偏移检查特定位置的值是否为我们设置的magic number，另一种方法是在结构体内增加一个magic pointer，这个指针指向数据区的第一个字节（也就是在合法时free时传入的地址），我们在free前检查magic pointer是否指向参数所指地址。这里我们采用第二种方案：</p><p>首先我们在结构体中增加magic pointer（同时要修改BLOCK_SIZE）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">s_block</span> *t_block;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">s_block</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> size;  <span class="comment">/* 数据区大小 */</span></span><br><span class="line">    t_block next; <span class="comment">/* 指向下个块的指针 */</span></span><br><span class="line">    <span class="type">int</span> free;     <span class="comment">/* 是否是空闲块 */</span></span><br><span class="line">    <span class="type">int</span> padding;  <span class="comment">/* 填充4字节，保证meta块长度为8的倍数 */</span></span><br><span class="line">    <span class="type">void</span> *ptr;    <span class="comment">/* Magic pointer，指向data */</span></span><br><span class="line">    <span class="type">char</span> data[<span class="number">1</span>]  <span class="comment">/* 这是一个虚拟字段，表示数据块的第一个字节，长度不应计入meta */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们定义检查地址合法性的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">t_block <span class="title">get_block</span><span class="params">(<span class="type">void</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *tmp;  </span><br><span class="line">    tmp = p;</span><br><span class="line">    <span class="keyword">return</span> (p = tmp -= BLOCK_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">valid_addr</span><span class="params">(<span class="type">void</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first_block) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p &gt; first_block &amp;&amp; p &lt; <span class="built_in">sbrk</span>(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> p == (<span class="built_in">get_block</span>(p))-&gt;ptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当多次malloc和free后，整个内存池可能会产生很多碎片block，这些block很小，经常无法使用，甚至出现许多碎片连在一起，虽然总体能满足malloc要求，但是由于分割成了多个小block而无法fit，这就是碎片问题。</p><p>一个简单的解决方式是当free某个block时，如果发现它相邻的block也是free的，则将block和相邻block合并。为了满足这个实现，需要将s_block改为双向链表。</p><p>修改后的block结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">s_block</span> *t_block;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">s_block</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> size;  <span class="comment">/* 数据区大小 */</span></span><br><span class="line">    t_block prev; <span class="comment">/* 指向上个块的指针 */</span></span><br><span class="line">    t_block next; <span class="comment">/* 指向下个块的指针 */</span></span><br><span class="line">    <span class="type">int</span> free;     <span class="comment">/* 是否是空闲块 */</span></span><br><span class="line">    <span class="type">int</span> padding;  <span class="comment">/* 填充4字节，保证meta块长度为8的倍数 */</span></span><br><span class="line">    <span class="type">void</span> *ptr;    <span class="comment">/* Magic pointer，指向data */</span></span><br><span class="line">    <span class="type">char</span> data[<span class="number">1</span>]  <span class="comment">/* 这是一个虚拟字段，表示数据块的第一个字节，长度不应计入meta */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>合并方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">t_block <span class="title">fusion</span><span class="params">(t_block b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b-&gt;next &amp;&amp; b-&gt;next-&gt;free) &#123;</span><br><span class="line">  b-&gt;size += BLOCK_SIZE + b-&gt;next-&gt;size;</span><br><span class="line">  b-&gt;next = b-&gt;next-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(b-&gt;next)</span><br><span class="line">  b-&gt;next-&gt;prev = b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了上述方法，free的实现思路就比较清晰了：首先检查参数地址的合法性，如果不合法则不做任何事；否则，将此block的free标为1，并且在可以的情况下与后面的block进行合并。</p><p>如果当前是最后一个block，则回退break指针释放进程内存，如果当前block是最后一个block，则回退break指针并设置first_block为NULL。实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">(<span class="type">void</span> *p)</span> </span>&#123;</span><br><span class="line">    t_block b;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">valid_addr</span>(p)) &#123;</span><br><span class="line">        b = <span class="built_in">get_block</span>(p);</span><br><span class="line">        b-&gt;free = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(b-&gt;prev &amp;&amp; b-&gt;prev-&gt;free)</span><br><span class="line">            b = <span class="built_in">fusion</span>(b-&gt;prev);</span><br><span class="line">        <span class="keyword">if</span>(b-&gt;next)</span><br><span class="line">            <span class="built_in">fusion</span>(b);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(b-&gt;prev)</span><br><span class="line">                b-&gt;prev-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                first_block = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">brk</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-8-realloc的实现">3.2.8 realloc的实现</h4><p>为了实现realloc，我们首先要实现一个内存复制方法。如同calloc一样，为了效率，我们以8字节为单位进行复制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy_block</span><span class="params">(t_block src, t_block dst)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> *sdata, *ddata;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    sdata = src-&gt;ptr;</span><br><span class="line">    ddata = dst-&gt;ptr;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; (i * <span class="number">8</span>) &lt; src-&gt;size &amp;&amp; (i * <span class="number">8</span>) &lt; dst-&gt;size; i++)</span><br><span class="line">        ddata[i] = sdata[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们开始实现realloc。一个简单（但是低效）的方法是malloc一段内存，然后将数据复制过去。但是我们可以做得更高效，具体可以考虑以下几个方面：</p><ul><li>如果当前block的数据区大于等于realloc所要求的size，则不做任何操作</li><li>如果新的size变小了，考虑split</li><li>如果当前block的数据区不能满足size，但是其后继block是free的，并且合并后可以满足，则考虑做合并</li></ul><p>下面是realloc的实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">realloc</span><span class="params">(<span class="type">void</span> *p, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> s;</span><br><span class="line">    t_block b, <span class="keyword">new</span>;</span><br><span class="line">    <span class="type">void</span> *newp;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="comment">/* 根据标准库文档，当p传入NULL时，相当于调用malloc */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">valid_addr</span>(p)) &#123;</span><br><span class="line">        s = <span class="built_in">align8</span>(size);</span><br><span class="line">        b = <span class="built_in">get_block</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(b-&gt;size &gt;= s) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b-&gt;size - s &gt;= (BLOCK_SIZE + <span class="number">8</span>))</span><br><span class="line">                <span class="built_in">split_block</span>(b,s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 看是否可进行合并 */</span></span><br><span class="line">            <span class="keyword">if</span>(b-&gt;next &amp;&amp; b-&gt;next-&gt;free</span><br><span class="line">                    &amp;&amp; (b-&gt;size + BLOCK_SIZE + b-&gt;next-&gt;size) &gt;= s) &#123;</span><br><span class="line">                <span class="built_in">fusion</span>(b);</span><br><span class="line">                <span class="keyword">if</span>(b-&gt;size - s &gt;= (BLOCK_SIZE + <span class="number">8</span>))</span><br><span class="line">                    <span class="built_in">split_block</span>(b, s);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* 新malloc */</span></span><br><span class="line">                newp = <span class="built_in">malloc</span> (s);</span><br><span class="line">                <span class="keyword">if</span> (!newp)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">new</span> = <span class="built_in">get_block</span>(newp);</span><br><span class="line">                <span class="built_in">copy_block</span>(b, <span class="keyword">new</span>);</span><br><span class="line">                <span class="built_in">free</span>(p);</span><br><span class="line">                <span class="keyword">return</span>(newp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">malloc的幕后机制</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
    <category term="操作系统" scheme="https://penge666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="https://penge666.github.io/posts/51d1b1e7.html"/>
    <id>https://penge666.github.io/posts/51d1b1e7.html</id>
    <published>2024-04-24T01:47:49.000Z</published>
    <updated>2024-04-25T06:59:11.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-引言">第一章 引言</h2><p>学技术最快速的方式就是根据官方文档学习：<a href="https://redis.com.cn/documentation.html">redis技术文档</a></p><p>redis的重点是在如何用好先，在谈设计，就像朱哥说的。</p><h2 id="第二章-简单动态字符串">第二章 简单动态字符串</h2><p>Redis没有直接使用C语言传统的字符串表示（以空字符结尾的字符数组，以下简称C字符串)，而是自己构建了一种名为简单动态字符串（ simple dynamic string，SDS)的抽象类型，并将SDS用作 Redis 的默认字符串表示。</p><h3 id="2-1-SDS的定义">2.1 SDS的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sdshdr</span> &#123;</span><br><span class="line">    <span class="comment">// 记录 buf 数组中已使用字节的数量</span></span><br><span class="line">    <span class="comment">// 等于 SDS 所保存字符串的长度</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// 记录 buf 数组中未使用字节的数量</span></span><br><span class="line">    <span class="type">int</span> free;</span><br><span class="line">    <span class="comment">// 字节数组，用于保存字符串，会自动在数组末尾添加一个字节，用于保存&#x27;\0&#x27;，不计入 len 值中</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424095542031.png" alt="image-20240424095542031"></p><h3 id="2-2-SDS与C字符串的区别">2.2 SDS与C字符串的区别</h3><p><strong>1.常数复杂度获取字符串长度</strong></p><p>通过使用SDS而不是C字符串，Redis 将获取字符串长度所需的复杂度从O(N)降低到了O(1)，这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。</p><p><strong>2.杜绝缓冲区溢出</strong></p><p>除了获取字符串长度的复杂度高之外，C字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出 ( buffer overflow)。</p><p>SDS的空间分配策略完全杜绝了发生缓冲区溢出的可能性:当SDS-API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，API会自动将SDS的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题。</p><p><strong>3.减少修改字符串时带来的内存重分配次数</strong></p><p>3.1 预分配空间</p><p>空间预分配用于优化SDS字符串增长操作。在扩展SDS空间前，SDS API会先检查未使用空间够不够，如果不够，则进行空间预分配。此时，程序不仅会为SDS分配修改所必须要的空间，还为其分配额外未使用的空间。</p><ul><li>修改后的SDS&lt;1MB，程序分配和len属性同样大小的未使用空间，此时SDS的len与free大小相等。比如修改后实际存储字符串的空间变为13字节，那么len=13，free=13，buf数组整体的长度=13+13+1（额外1字节保存空字符）。</li><li>修改后SDS&gt;=1MB。程序会分配1MB的未使用空间。比如修改后实际存储字符串的空间变为2MB，那么len=2M，free=1MB，buf数组整体的长度=2MB+1MB+1byte。</li></ul><p>通过空间的预分配，将连续增长N次字符串需要的内存分配次数从一定需要N次变为最多N次。因而可以减少连续执行字符串增长操作所需的内存重分配的次数。</p><p>3.2 惰性空间释放</p><p>惰性空间释放用于优化SDS的字符串缩短操作:当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</p><p><strong>4.二进制安全</strong></p><p>为了确保 Redis 可以适用于各种不同的适用场景，SDS 的 API 都是二进制安全的，因此使得 Redis 不仅可以保存文本数据，还可以保存任意格式的二进制数据，因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束。简单来说，就是得益于SDS结构体存储的数据信息。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424100127306.png" alt="image-20240424100127306"></p><p><strong>5.兼容部分C字符串函数</strong></p><p>通过遵循C字符串以空字符结尾的惯例，SDS 可以在有需要时重用 <code>&lt;string.h&gt;</code> 函数库，从而避免了不必要的代码重复。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424100136783.png" alt="image-20240424100136783"></p><h2 id="第三章-链表">第三章 链表</h2><p>链表在Redis中的应用非常广泛，比如列表键的底层实现之一就是链表。当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis就会使用链表作为列表键的底层实现。</p><p>Redis 的链表是由一个 <code>list</code> 结构和 n 个 <code>listNode</code> 结构组成，list 里面可以存储该链表的头指针、尾指针、以及长度计数器和用于实现多态链表所需的类型特定函数，Redis 的链表是 <strong>双端</strong>、<strong>无环</strong> 的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个链表节点使用一个 adlist.h/listNode</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">listNode</span> &#123;</span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">listNode</span> * prev;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">listNode</span> * next;</span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="type">void</span> * value;</span><br><span class="line">&#125;listNode;</span><br><span class="line"><span class="comment">// 虽然仅仅使用多个listNode结构就可以构成链表，</span></span><br><span class="line"><span class="comment">// 但使用adlist.h/list来持有链表的话，操作起来会更方便</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">list</span> &#123;</span><br><span class="line">    <span class="comment">// 表头节点</span></span><br><span class="line">    listNode * head;</span><br><span class="line">    <span class="comment">// 表尾节点</span></span><br><span class="line">    listNode * tail;</span><br><span class="line">    <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;</span><br><span class="line">    <span class="comment">// 节点值复制函数</span></span><br><span class="line">    <span class="type">void</span> *(*dup)(<span class="type">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="built_in">void</span> (*free)(<span class="type">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值对比函数</span></span><br><span class="line">    <span class="built_in">int</span> (*match)(<span class="type">void</span> *ptr, <span class="type">void</span> *key);</span><br><span class="line">&#125;list;</span><br></pre></td></tr></table></figure><h2 id="第四章-字典">第四章 字典</h2><p>字典，又称为符号表( symbol table)、关联数组( associative array)或映射( map)，是一种用于保存键值对( key-value pair)的抽象数据结构。<br>在字典中，一个键( key)可以和一个值( value)进行关联（或者说将键映射为值)，这些关联的键和值就称为键值对。</p><p>Redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。可以想象成类似这种结构 Map&lt;String,Map&lt;String,T&gt; &gt; MP;</p><h3 id="4-1-哈希表">4.1 哈希表</h3><ul><li>Redis 字典所使用的哈希表由 <code>dict.h/dictht</code> 结构定义：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dicht</span> &#123;</span><br><span class="line">    <span class="comment">// 哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="comment">// 总是等于 size - 1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sizemask;</span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> used;</span><br><span class="line">&#125;dictht;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424100659824.png" alt="image-20240424100659824"></p><h3 id="4-2-哈希表节点">4.2 哈希表节点</h3><p>哈希表节点使用dictEntry实现，每个dictEntry都存储着一个键值对：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictEntry</span>&#123;</span><br><span class="line">    <span class="comment">//键</span></span><br><span class="line">    <span class="type">void</span> *key;</span><br><span class="line">    <span class="comment">//值</span></span><br><span class="line">    <span class="keyword">union</span>&#123;</span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="comment">//指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dictEntry</span> *next;</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>键值对的值可以是一个指针，或一个uint64_t整数，或一个int64_整数。next是指向另一个哈希节点的指针，可将多个哈希值相同的键值对连接在一起，以此来解决冲突。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424100809559.png" alt="image-20240424100809559"></p><h3 id="4-3-字典">4.3 字典</h3><p>Redis中的字典由<code>dict.h/dict</code>实现，由这个数据结构将字典组织在一起。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span>&#123;</span></span><br><span class="line">    <span class="comment">//类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="comment">//私有数据</span></span><br><span class="line">    <span class="type">void</span> *privdata;</span><br><span class="line">    <span class="comment">//哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//rehash索引</span></span><br><span class="line">    <span class="comment">//当rehash不在进行时，值为-1</span></span><br><span class="line">    <span class="type">int</span> rehashidx;</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>type和privdata属性是针对不同类型的键值对，为丰富键值对的使用场景而设置的。</p><ul><li>type属性是一个指向dictType的结构指针，每个dictType结构保存了一簇用于操作特定类型键值对的函数，Redis为用途不同的字典设置不同类型特定函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictType</span>&#123;</span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key)</span></span>;</span><br><span class="line">    <span class="comment">// 复制键的函数</span></span><br><span class="line">    <span class="type">void</span> *(*keyDup)(<span class="type">void</span> *privdata,<span class="type">const</span> <span class="type">void</span> *key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>privdata属性保存了需要传给那些类型特定函数的可选参数。</li><li>ht属性是包含两个项的数组，每项都是一个哈希表，ht[0]平时使用，而ht[1]仅在rehash时使用。</li><li>rehashidx记录了rehash的进度，初始为-1。</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424100919619.png" alt="image-20240424100919619"></p><h3 id="4-4-哈希算法">4.4 哈希算法</h3><p>Redis计算哈希值方法： hash=dict-&gt;type-&gt;hashFunction(key);<br>计算索引值的方法：index=hash &amp; dict-&gt;ht[x].sizemask;</p><p>当字典被用作数据库的底层实现或哈希键的底层实现时，Redis使用<strong>MurmurHash2算法</strong>来计算键的哈希值。优点在于即使输入的键是有规律的，算法仍然能给出<strong>很好的随机分布性</strong>，并且计算<strong>速度飞快</strong>。</p><h3 id="4-5-解决键冲突">4.5 解决键冲突</h3><p>当有两个或以上的键被分配到哈希表的同个索引，那么就发生了冲突。Redis使用链地址法来解决冲突，被分配到索引的多个节点使用链表连接。为了提高速度，每次都是将新节点添加到链表的表头位置。</p><h3 id="4-6-rehash">4.6 rehash</h3><blockquote><p><strong>执行扩展或收缩操作的条件</strong></p></blockquote><p><strong>Dict的扩容</strong></p><p>Dict中的HashTable就是数组结合单向链表的实现，当集合中元素较多时，必然导致哈希冲突增多，链表过长，则查询效率会大大降低。</p><p>Dict在每次新增键值对时都会检查负载因子（LoadFactor） ，满足以下两种情况时会触发哈希表扩容。</p><ul><li>服务目前没有在执行 BGSAVE 命令或者 BGREWRITEAOF 命令，并且哈希表的负载因子大于等于 1 。</li><li>服务器目前正在执行BGSAVE命令或者 BGREWRITEAOF 命令，并且哈希表的负载因子大于等于 5 。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ 负载因子 = 哈希表已保存的节点数量 / 哈希表大小</span><br><span class="line">load_factor = ht[0].used / ht[0].size;</span><br></pre></td></tr></table></figure><p><strong>Dict的收缩</strong></p><p>Dict除了扩容以外，每次删除元素时，也会对负载因子做检查，当LoadFactor &lt; 0.1 时，会做哈希表收缩。</p><blockquote><p><strong>rehash</strong></p></blockquote><p><strong>Dict的rehash</strong></p><p>不管是扩容还是收缩，必定会创建新的哈希表，导致哈希表的size和sizemask变化，而key的查询与sizemask有关。因此必须对哈希表中的每一个key重新计算索引，插入新的哈希表，这个过程称为rehash。过程是这样的：</p><ul><li>计算新hash表的realeSize，值取决于当前要做的是扩容还是收缩：<br>如果是扩容，<a href="http://xn--sizedict-309lrnyf93ba308jhyz009bulyebpa.ht">则新size为第一个大于等于dict.ht</a>[0].used + 1的2^n<br>如果是收缩，<a href="http://xn--sizedict-309lrnyf93ba308jhyz009bulyebpa.ht">则新size为第一个大于等于dict.ht</a>[0].used的2^n （不得小于4）</li><li>按照新的realeSize申请内存空间，创建dictht，<a href="http://xn--dict-9k7fo76ei05chfya.ht">并赋值给dict.ht</a>[1]</li><li>设置dict.rehashidx = 0，标示开始rehash</li><li><a href="http://xn--dict-fw9g.ht">将dict.ht</a>[0]<a href="http://xn--dictEntryrehashdict-f673ahz3bw09ldr4l367by3xi.ht">中的每一个dictEntry都rehash到dict.ht</a>[1]</li><li><a href="http://xn--dict-fw9g.ht">将dict.ht</a>[1]<a href="http://xn--dict-9k7f028vteva.ht">赋值给dict.ht</a>[0]，<a href="http://xn--dict-z95k.ht">给dict.ht</a>[1]初始化为空哈希表，<a href="http://xn--dict-430gi74gild203bjk5c.ht">释放原来的dict.ht</a>[0]的内存</li></ul><p>rehash前</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424102112213.png" alt="image-20240424102112213"></p><p>rehash后</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424102044457.png" alt="image-20240424102044457"></p><h3 id="4-7-渐进式rehash">4.7 渐进式rehash</h3><p>Dict的rehash并不是一次性完成的。试想一下，如果Dict中包含数百万的entry，要在一次rehash完成，极有可能导致主线程阻塞。因此Dict的rehash是分多次、渐进式的完成，因此称为<strong>渐进式rehash</strong>。流程如下：</p><ul><li>计算新hash表的size，值取决于当前要做的是扩容还是收缩：<br>如果是扩容，<a href="http://xn--sizedict-309lrnyf93ba308jhyz009bulyebpa.ht">则新size为第一个大于等于dict.ht</a>[0].used + 1的2^n<br>如果是收缩，<a href="http://xn--sizedict-309lrnyf93ba308jhyz009bulyebpa.ht">则新size为第一个大于等于dict.ht</a>[0].used的2^n （不得小于4）</li><li>按照新的size申请内存空间，创建dictht，<a href="http://xn--dict-9k7fo76ei05chfya.ht">并赋值给dict.ht</a>[1]</li><li>设置dict.rehashidx = 0，标示开始rehash</li><li><s><a href="http://xn--dict-fw9g.ht">将dict.ht</a>[0]<a href="http://xn--dictEntryrehashdict-f673ahz3bw09ldr4l367by3xi.ht">中的每一个dictEntry都rehash到dict.ht</a>[1]</s></li><li>每次执行新增、查询、修改、删除操作时，都检查一下dict.rehashidx是否大于-1，<a href="http://xn--dict-fj9fn60b3meqtz33c.ht">如果是则将dict.ht</a>[0].table[rehashidx]<a href="http://xn--entryrehashdict-df7y2036bukvcc86b.ht">的entry链表rehash到dict.ht</a>[1]，并且将rehashidx++。<a href="http://xn--dict-907j085c.ht">直至dict.ht</a>[0]<a href="http://xn--rehashdict-s11qz55mghdu3ijtgvl6e2byf.ht">的所有数据都rehash到dict.ht</a>[1]</li><li><a href="http://xn--dict-fw9g.ht">将dict.ht</a>[1]<a href="http://xn--dict-9k7f028vteva.ht">赋值给dict.ht</a>[0]，<a href="http://xn--dict-z95k.ht">给dict.ht</a>[1]初始化为空哈希表，<a href="http://xn--dict-430gi74gild203bjk5c.ht">释放原来的dict.ht</a>[0]的内存</li><li>将rehashidx赋值为-1，代表rehash结束<br>在rehash过程中，新增操作，则直接写入ht[1]，查询、<a href="http://xn--dict-ue6fy7b90hub348a7phvn7bvk9i.ht">修改和删除则会在dict.ht</a>[0]<a href="http://xn--dict-z21g.ht">和dict.ht</a>[1]依次查找并执行。这样可以确保ht[0]的数据只减不增，随着rehash最终为空</li></ul><p><strong>总结</strong>：</p><p>Q：为什么哈希表操作变慢了？</p><p>A：哈希表的冲突问题和 rehash 可能带来的操作阻塞。因此提出渐进式rehash</p><p><strong>渐进式 rehash介绍</strong></p><p>简单来说就是在第二步拷贝数据时，Redis 仍然正常处理客户端请求，每处理一个请求时，从哈希表 1 中的第一个索引位置开始，顺带着将这个索引位置上的所有 entries 拷贝到哈希表 2 中；等处理下一个请求时，再顺带拷贝哈希表 1 中的下一个索引位置的 entries。如下图所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425135541925.png" alt="image-20240425135541925"></p><h2 id="第五章-跳跃表">第五章 跳跃表</h2><p>跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。</p><p>跳跃表支持平均 O(logN) 、最坏 O(N) 度的节点查找，还可以通过顺序性操作来批量处理节点。Redis 只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424102514122.png" alt="image-20240424102514122"></p><p>之前实现过跳表的原理，欢迎start:<a href="https://github.com/Penge666/SkipList">基于跳表实现的K-V存储引擎</a></p><p>总结：</p><p><strong>跳表</strong></p><p>跳表在链表的基础上，<strong>增加了多级索引，通过索引位置的几个跳转，实现数据的快速定位</strong>。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425135851173.png" alt="image-20240425135851173"></p><p>第一次：如果我们要在链表中查找 33 这个元素，只能从头开始遍历链表，查找 6 次，直到找到 33 为止。O(N)</p><p>第二次：增加一级索引，从第一个元素开始，每两个元素选一个出来作为索引。这些索引再通过指针指向原始的链表。例如，从前两个元素中抽取元素 1 作为一级索引，从第三、四个元素中抽取元素 11 作为一级索引。此时，我们只需要 4 次查找就能定位到元素 33 了。</p><p>第三次：增加二级索引：从一级索引中，再抽取部分元素作为二级索引。例如，从一级索引中抽取 1、27、100 作为二级索引，二级索引指向一级索引。这样，我们只需要 3 次查找，就能定位到元素 33 了。</p><p>时间复杂度：O（lgN）</p><h2 id="第六章-整数集合">第六章 整数集合</h2><p>整数集合（intset）是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis 就会使用整数集合作为集合键的底层实现。</p><h3 id="6-1-整数集合的实现">6.1 整数集合的实现</h3><p>整数集合(intset)是 Redis用于保存整数值的集合抽象数据结构，它可以保存类型为int16_t、 int32_t或者int64_t的整数值，并且保证集合中不会出现重复元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">intset</span> &#123;</span><br><span class="line">    <span class="comment">// 编码方式</span></span><br><span class="line">    <span class="type">uint32_t</span> encoding;</span><br><span class="line">    <span class="comment">// 集合中包含的元素数量</span></span><br><span class="line">    <span class="type">uint32_t</span> length;</span><br><span class="line">    <span class="comment">// 保存元素的数组</span></span><br><span class="line">    <span class="type">int8_t</span> contents[];</span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>contents数组是整数集合的底层实现：整数集合的每个元素都是 contents数组的一个数组项（item），各个项在数组中按值的大小从小到大有序的排列，并且数组中不包含任何重复项。</p><h3 id="6-2-升级">6.2 升级</h3><p>当我们要将一个新元素添加至集合时，并且新元素的类型比现有集合类型都长时，整数集合就要升级。</p><p>步骤：</p><ol><li>根据新元素类型，扩展数组空间，为新元素分配空间。</li><li>将底层数组现有所有元素都转为新元素相同类型，并将类型转换后的元素放到正确位置。</li><li>将新元素添加到底层数组。</li></ol><p>由于每次向整数集合添加新元素都可能会引起升级，而每次升级都需要对底层数组中已有元素进行类型转换，所以添加的时间复杂度为O(N)。</p><h3 id="6-3-升级的好处">6.3 升级的好处</h3><ul><li><p>整数集合的升级策略有两个好处，一个是提升整数集合的灵活性，另一个是尽可能的节约内存。</p><p>Note：整数集合不支持降级操作，一旦对数组进行了升级，编码就会一直保持升级后的状态。</p></li></ul><h2 id="第七章-压缩列表">第七章 压缩列表</h2><p>ZipList 是一种特殊的“双端链表” ，由一系列特殊编码的连续内存块组成。可以在任意一端进行压入/弹出操作, 并且该操作的时间复杂度为 O(1)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424103109865.png" alt="image-20240424103109865"></p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>zlbytes</td><td>uint32_t</td><td>4 字节</td><td>记录整个压缩列表占用的内存字节数</td></tr><tr><td>zltail</td><td>uint32_t</td><td>4 字节</td><td>记录压缩列表表尾节点距离压缩列表的起始地址有多少字节，通过这个偏移量，可以确定表尾节点的地址。</td></tr><tr><td>zllen</td><td>uint16_t</td><td>2 字节</td><td>记录了压缩列表包含的节点数量。 最大值为UINT16_MAX （65534），如果超过这个值，此处会记录为65535，但节点的真实数量需要遍历整个压缩列表才能计算得出。</td></tr><tr><td>entry</td><td>列表节点</td><td>不定</td><td>压缩列表包含的各个节点，节点的长度由节点保存的内容决定。</td></tr><tr><td>zlend</td><td>uint8_t</td><td>1 字节</td><td>特殊值 0xFF （十进制 255 ），用于标记压缩列表的末端。</td></tr></tbody></table><p><strong>ZipListEntry</strong></p><p>ZipList 中的Entry并不像普通链表那样记录前后节点的指针，因为记录两个指针要占用16个字节，浪费内存。而是采用了下面的结构：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424103141314.png" alt="image-20240424103141314"></p><ul><li>previous_entry_length：前一节点的长度，占1个或5个字节。<br>如果前一节点的长度小于254字节，则采用1个字节来保存这个长度值<br>如果前一节点的长度大于254字节，则采用5个字节来保存这个长度值，第一个字节为0xfe，后四个字节才是真实长度数据</li><li>encoding：编码属性，记录content的数据类型（字符串还是整数）以及长度，占用1个、2个或5个字节</li><li>contents：负责保存节点的数据，可以是字符串或整数</li></ul><p><strong>ZipList的连锁更新问题</strong></p><ul><li>ZipList的每个Entry都包含previous_entry_length来记录上一个节点的大小，长度是1个或5个字节：<br>如果前一节点的长度小于254字节，则采用1个字节来保存这个长度值<br>如果前一节点的长度大于等于254字节，则采用5个字节来保存这个长度值，第一个字节为0xfe，后四个字节才是真实长度数据</li></ul><p>现在，假设我们有N个连续的、长度为250~253字节之间的entry，因此entry的previous_entry_length属性用1个字节即可表示，如图所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424103344907.png" alt="image-20240424103344907"></p><p><strong>ZipList这种特殊情况下产生的连续多次空间扩展操作称之为连锁更新</strong>（Cascade Update）。新增、删除都可能导致连锁更新的发生。</p><h2 id="第八章-对象">第八章 对象</h2><p>Redis<strong>没有直接使用</strong>前文的数据结构来实现键值对数据库，而是基于这些数据结构构建了一个对象系统，通过对象组织数据结构，包括字<strong>符串对象，列表对象，哈希对象，集合对象</strong>和<strong>有序集合对象这</strong>5种对象。</p><p>使用对象的一个好处是可以针对不同的使用场景，为对象<strong>设置多种不同的数据结构实现</strong>，从而优化对象在不同场景下的使用效率。</p><h3 id="8-1-对象的类型与编码">8.1 对象的类型与编码</h3><p>Redis使用对象来表示数据库中的键和值，每次当我们在Redis 的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键（键对象)，另一个对象用作键值对的值（值对象)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424103518790.png" alt="image-20240424103518790"></p><p><strong>8.1.1 类型</strong></p><p>对象的 type属性记录了对象的类型，其值可以是字符串对象、列表对象、哈希对象、集合对象、有序集合对象。</p><p>对于 Redis 数据库保存的键值对来说，键总是一个字符串对象，而值则可以是其他类型对象中的一种，因此：</p><ul><li>当我们称呼一个数据库键为 “字符串键” 时，我们指的是 “这个数据库键所对应的值为字符串对象”；</li><li>当我们称呼一个键为 “列表键” 时，我们指的是 “这个数据库键所对应的值为列表对象” 。</li></ul><p>TYPE命令的实现方式也与此类似，当我们对一个数据库键执行TYPE命令时，命令返回的结果为数据库键对应的值对象的类型，而不是键对象的类型。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424103820248.png" alt=""></p><p><strong>7.1.2 编码和底层实现</strong></p><p>对象的 ptr指针指向对象的底层实现数据结构，而这些数据结构由对象的 encoding 属性决定。</p><p>encoding属性记录了对象所使用的编码，也即是说这个对象使用了什么数据结构作为对象的底层实现。</p><p>使用OBJECT ENCODING命令可以查看一个数据库键的值对象的编码</p><p>Redis中会根据存储的数据类型不同，选择不同的编码方式。每种数据类型的使用的编码方式如下：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424104027791.png" alt="image-20240424104027791"></p><h3 id="8-2-字符串对象">8.2 字符串对象</h3><p>字符串对象的编码可以是 int 、raw 、或者 embstr 。</p><ul><li>如果一个字符串对象保存的是整数值，并且这个整数值可以用 long 类型来表示，那么字符串对象会将整数值保存在字符串对象结构的 ptr 属性里面（将 void* 转换成 long），并将字符串对象的编码设置为 int。</li><li>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度大于 32 字节，那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值，并将对象的编码设置为 raw。</li><li>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度小于等于 32 字节，那么字符串对象将使用 embstr编码的方式来保存这个字符串值 。</li></ul><p>raw编码的字符串对象</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424104214996.png" alt="image-20240424104214996"></p><p>embstr编码的字符串对象</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424104231320.png" alt="image-20240424104231320"></p><p><strong>raw 与 embstr 的区别</strong>是：raw编码会调用两次内存分配函数来分别创建 redisObject 结构和 sdshdr 结构，而 embstr编码则通过一次内存分配函数来分配一块连续的空间，空间中依次包含 redisObject和 sdshdr 两个结构 。</p><p><strong>编码转换</strong></p><p>对于int编码的字符串对象来说，如果我们向对象执行了一些命令，使得这个对象保存的不再是整数值，而是一个字符串值，那么字符串对象的编码将从int变为raw。</p><p>另外，因为Redis没有为embstr编码的字符串对象编写任何相应的修改程序（只有int编码的字符串对象和raw编码的字符串对象有这些程序)，所以embstr编码的字符串对象实际上是只读的。当我们对embstr编码的字符串对象执行任何修改命令时，程序会先将对象的编码从embstr转换成raw，然后再执行修改命令。因为这个原因，embstr编码的字符串对象在执行修改命令之后，总会变成一个raw编码的字符串对象。</p><h3 id="8-3-列表对象">8.3 列表对象</h3><p>列表对象的编码可以是 ziplist或者 linkedlist 。</p><ul><li>ziplist编码的列表对象使用压缩列表作为底层实现，每个压缩列表节点（entry）保存了一个列表元素。</li><li>linkedlist编码的列表对象使用双端链表作为底层实现，每个双端链表节点（node）都保存了一个字符串对象，而每个字符串对象都保存了一个列表元素</li></ul><p><strong>编码转换</strong></p><p>当列表对象可以同时满足以下两个条件时，列表对象使用 ziplist 编码：</p><ul><li>列表对象保存的所有字符串元素的长度都小于 64 字节；</li><li>列表对象保存的元素数量小于 512 个；</li></ul><p>不能满足这两个条件的列表对象需要使用 linkedlist 编码。注意这两个条件的上限值是可以修改的。</p><h3 id="8-4-哈希对象">8.4 哈希对象</h3><p>哈希对象的编码可以是 ziplist或者 hashtable 。</p><p>使用 ziplist编码的哈希对象有以下特点：</p><ol><li>保存了同一键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点在后。</li><li>先添加到哈希对象中的键值对会被放在压缩列表的表头方向，而后来添加到哈希对象中的键值对会被放在压缩列表的表尾方向。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424104719359.png" alt="image-20240424104719359"></p><p>使用 hashtable编码的哈希对象有以下特点：</p><ol><li>字典的每个键都是一个字符串对象，对象中保存了键值对的键；</li><li>字典的每个值都是一个字符串对象，对象中保存了键值对的值；</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424104728270.png" alt="image-20240424104728270"></p><p><strong>编码转换</strong></p><p>当哈希对象可以同时满足以下两个条件时，哈希对象使用 ziplist 编码：</p><ol><li>哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节；</li><li>哈希对象保存的键值对数量小于 512 个；</li></ol><p>这两个条件的上限值也是可以修改的，不满足条件的哈希对象需要使用 hashtable 编码。</p><h3 id="8-5-集合对象">8.5 集合对象</h3><p>集合对象的编码可以是 intset或者 hashtable 。</p><ul><li>intset 编码的集合对象使用整数集合作为底层实现，集合对象包含的所有元素都被保存在整数集合里面。</li><li>hashtable 编码的集合对象使用字典作为底层实现，字典的每个键都是一个字符串对象，每个字符串对象包含了一个集合元素，而字典的值则全部被设置为 null 。</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424104835719.png" alt="image-20240424104835719"></p><p><strong>编码转换</strong></p><p>当集合对象可以同时满足以下两个条件时，对象使用 intset编码：</p><ol><li>集合对象保存的所有元素都是整数值；</li><li>集合对象保存的元素数量不超过 512 个；</li></ol><p>第二个条件的上限值是可以修改的，不满足这两个条件的集合对象需要使用 hashtable编码。</p><h3 id="8-6-有序集合对象">8.6 有序集合对象</h3><p>有序集合的编码可以是 ziplist 或者 skiplist 。</p><p>ziplist 编码的压缩对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员（member），而第二个元素则保存元素的分值（score），压缩列表内的集合元素按分值从小到大进行排序。</p><p>因此，zset底层数据结构必须满足键值存储、键必须唯一、可排序这几个需求。</p><ul><li>SkipList：可以排序，并且可以同时存储score和ele值（member）</li><li>HT（Dict）：可以键值存储，并且可以根据key找value</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424105059158.png" alt="image-20240424105059158"></p><p><strong>编码转换</strong></p><p>当有序集合对象可以同时满足以下两个条件时，对象使用 ziplist编码：</p><ol><li>有序集合保存的元素数量小于 128 个；</li><li>有序集合保存的所有元素成员长度都小于 64 字节；</li></ol><p>以上两个上限值都是可以修改的，不能满足这两个条件的有序集合对象将使用 skiplist编码</p><h3 id="8-7-类型检查的实现">8.7 类型检查的实现</h3><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424105213455.png" alt="image-20240424105213455"></p><h3 id="8-8-内存回收">8.8 内存回收</h3><p>因为C语言并不具备自动内存回收功能，所以Redis在自己的对象系统中构建了一个引用计数（ reference counting)技术实现的内存回收机制，通过这一机制，程序可以通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。</p><h3 id="8-9-对象共享">8.9 对象共享</h3><p>除了用于实现引用计数内存回收机制之外，对象的引用计数属性还带有对象共享的作用。</p><h3 id="8-10-对象的空转时长">8.10 对象的空转时长</h3><p>除了之前介绍了 type、encoding 、ptr 和 refcount 四个属性之外，redisObject 结构包含的最后一个属性为 lru 属性，该属性记录了对象最后一次被命令程序访问的时间。</p><p>使用命令OBJECT IDLETIME 给定键 可以打印出给定键的空转时长，这一空转时长就是通过将当前时间减去键的值对象的 lru 时间计算得出的。</p><p>总结：</p><p>对象：String,List,Hash,Set,Sorted Set</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425134220304.png" alt="image-20240425134220304"></p><p>特点：<strong>一个键对应了一个集合的数据</strong></p><h2 id="第九章-数据库">第九章 数据库</h2><h3 id="9-1-服务器中的数据库">9.1 服务器中的数据库</h3><p>Redis服务器将所有数据库都保存在服务器状态redis.h/redisserver结构的db数组中，db 数组的每个项都是一个redis.h/redisDb结构，每个redisDb结构代表一个数据库:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">redisServer</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 一个数组，保存着服务器中的所有数据库</span></span><br><span class="line">    redisDb *db;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 初始化服务器时，程序会根据服务器状态的 dbnum 属性</span></span><br><span class="line">    <span class="comment">// 来决定应该创建多少个数据库，默认是 16</span></span><br><span class="line">    <span class="type">int</span> dbnum;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>dbnum：来决定应该创建多少个数据库，默认是 16</p><h3 id="9-2-切换数据库">9.2 切换数据库</h3><p>可以通过命令SELECT n来切换到 n 号数据库。</p><h3 id="9-3-数据库键空间">9.3 数据库键空间</h3><p>redisDb结构的 dict 字典保存了数据库中所有键值对，我们将这个字典称为键空间（key space）。</p><p>键空间和用户所见的数据库是直接对应的</p><ul><li>键空间的键也就是数据库的键，每个键都是一个字符串对象。</li><li>键空间的值也就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、集合对象和有序集合对象中的任意一种 Redis 对象。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">redisDb</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 数据库键空间，保存着数据库中的所有键值对</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    <span class="comment">// 过期字典，保存着键的过期时间</span></span><br><span class="line">    dict *expires;</span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424105713099.png" alt="image-20240424105713099"></p><h3 id="9-4-键的生存时间或过期时间">9.4 键的生存时间或过期时间</h3><p><strong>保存过期时间</strong></p><p>redisDb 结构的expires字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：</p><ul><li>过期字典的键是一个指针，这个指针指向键空间中某个键对象（也即是某个数据库键）。</li><li>过期字典的值是一个 long long 类型的整数，这个整数保存了键所指向的数据库键的过期时间–一个毫秒精度的 UNIX 时间戳。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">redisDb</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 数据库键空间，保存着数据库中的所有键值对</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    <span class="comment">// 过期字典，保存着键的过期时间</span></span><br><span class="line">    dict *expires;</span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424110005819.png" alt="image-20240424110005819"></p><h3 id="9-5-过期键的删除策略">9.5 过期键的删除策略</h3><p>有三种不同的删除策略：</p><ol><li>定时删除：在设置键的过期时间的同时，创建一个定时器（timer），让定时器在键的过期时间来临时，立即执行对键的删除操作。</li><li>惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话就删除该键；如果没有，就返回该键。</li><li>定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。</li></ol><p>为了更好更合理的在 CPU 时间以及避免浪费内存空间之间取得平衡，Redis 服务器使用 <strong>惰性删除</strong> 和 <strong>定期删除</strong> 两种策略。</p><h3 id="9-6-Redis的过期键删除策略">9.6 Redis的过期键删除策略</h3><h3 id="9-7-AOF、RDB-和复制功能对过期键的处理">9.7 AOF、RDB 和复制功能对过期键的处理</h3><p><strong>生成RDB文件</strong></p><p>在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的RDB文件中。</p><p><strong>载入 RDB 文件</strong></p><p>在启动服务器时，如果服务器开启了 RDB 功能，那么服务器将对 RDB 文件进行载入：</p><ul><li>如果服务器以主服务器模式运行，那么在载入 RDB 文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而过期键则会被忽略，所以过期键对载入 RDB 文件的主服务器不会造成影响。</li><li>如果服务器以从服务器模式运行，那么在载入 RDB 文件时，文件中保存的所有键，不论是否过期，都会被载入到数据库中。不过，因为主从服务器在进行数据同步的时候，从服务器的数据库就会被清空，所以一般来讲，过期键对载入 RDB 文件的从服务器也不会造成影响。</li></ul><p><strong>AOF 文件写入</strong></p><p>当服务器以 AOF 持久化模式运行时，如果数据库中的某个键已经过期，但它还没有被惰性删除或者定期删除，那么 AOF 文件不会因为这个过期键而产生任何影响。</p><p>当过期键被惰性删除或者定期删除之后，程序回向 AOF 文件追加（append）一条 DEL 命令，来显式地记录该键已经被删除。</p><p><strong>AOF 重写</strong></p><p>和生成 RDB 文件时类似，在执行 AOF 重写的过程中，程序会对数据库中的键进行检查，已过期的键不会被保存到重写后的 AOF 文件中。</p><p><strong>复制</strong></p><p>当服务器运行在复制模式下时，从服务器的过期键删除动作由主服务器控制：</p><ul><li>主服务器在删除一个过期键之后，会显式的向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。</li><li>从服务器在执行客户端发送的读命令时，即使碰到过期键也不会将过期键删除，而是继续像处理未过期的键一样来处理过期键。</li><li>从服务器只有在接到主服务器发来的 DEL命令之后，才会删除过期键。</li></ul><p>通过由主服务器来控制从服务器统一地删除过期键，可以保证主从服务器数据的一致性，也正是因为这个原因，当一个过期键仍然存在于主服务器的数据库时，这个过期键在从服务器里的复制品也会继续存在。</p><p>下面用2张图简单了解下这个过程</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424110408994.png" alt="image-20240424110408994"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424110436186.png" alt="image-20240424110436186"></p><p><strong>数据库通知</strong></p><p>数据库通知是Redis 2.8版本新增加的功能，这个功能可以让客户端通过订阅给定的频道或者模式，来获知数据库中键的变化，以及数据库中命令的执行情况。</p><p>这一类关注“某个键执行了什么命令”的通知称为键空间通知（ key-space notification ),除此之外，还有另一类称为键事件通知( key-event notification )的通知，它们关注的是“某个命令被什么键执行了”&quot;。</p><h2 id="第十章-RDB持久化">第十章 RDB持久化</h2><p>因为 Redis是内存数据库,它将自己的数据库状态储存在内存里面,所以如果不想办法将储存在内存中的数据库状态保存到磁盘里面，那么一旦服务器进程退出，服务器中的数据库状态也会消失不见。</p><p>RDB持久化功能所生成的RDB文件是一个经过压缩的二进制文件，通过该文件可以还原生成RDB文件时的数据库状态,如图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424110626725.png" alt="image-20240424110626725"></p><h3 id="10-1-RDB文件的创建与载入">10.1 RDB文件的创建与载入</h3><p>有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。</p><ul><li><p>SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求。</p></li><li><p>和SAVE命令直接阻塞服务器进程的做法不同，BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求。</p></li></ul><p>RDB 文件的载入工作是在服务器启动时自动执行的，所以 Redis 并没有专门用于载入 RDB 文件的命令，只要 Redis 服务器在启动时检测到 RDB 文件存在，它就会自动载入 RDB 文件。</p><p>另外，因为 AOF 文件的更新频率通常比 RDB 文件的更新频率高，所以：</p><ul><li>如果服务器开启了 AOF 持久化功能，那么服务器会优先使用 AOF 文件来还原数据库状态。</li><li>只有在 AOF 持久化功能处于关闭状态时，服务器才会使用 RDB 文件来还原数据库状态。</li></ul><p>服务器在载入 RDB 文件期间，会一直处于阻塞状态，直到载入工作完成为止。</p><h3 id="10-2-自动间隔性保存">10.2 自动间隔性保存</h3><p>因为 BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以 Redis 允许用户通过设置服务器配置的 save 选项，让服务器每个一段时间自动执行一次 BGSAVE命令。</p><p>用户可以通过 save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 BGSAVE命令。</p><p>Redis 的服务器周期性操作函数 serverCron默认每个 100 毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，它的其中一项工作就是检查 save选项所设置的保存条件是否已经满足，如果满足的话，就执行 BGSAVE 命令。</p><h3 id="10-3-RDB文件结构">10.3 RDB文件结构</h3><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424110918715.png" alt="image-20240424110918715"></p><h2 id="第十一章-AOF持久化">第十一章 AOF持久化</h2><p>与 RDB 持久化通过保存数据库中的键值对来记录数据库状态不同，AOF（Append Only File）持久化时通过保存 Redis 服务器所执行的写命令来记录数据库状态的。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424111013241.png" alt="image-20240424111013241"></p><p><strong>补充</strong>：</p><p>Q：AOF日志写入时机？</p><p>A：AOF日志是写后日志。</p><p>解释：我们常常写日志都是WAL技术，就是先记录，再写日志。但是AOF写日志是反的。</p><p>原因：</p><ol><li>不会阻塞当前命令执行</li><li>如果当前命令成功执行，也就说明这个命令没有问题，那么写入日志很ok。</li></ol><h3 id="11-1-AOF持久化的实现">11.1 AOF持久化的实现</h3><p>AOF持久化功能的实现可以分为命令追加（ append)、文件写入、文件同步( sync)三个步骤。</p><p><strong>命令追加</strong></p><p>当 AOF 持久化功能处于打开状态时，服务器在执行完一个写命令之后，会以协议格式将被执行的写命令追加到服务器状态的 aof_buf缓冲区的末尾。</p><p><strong>AOF文件的写入与同步</strong></p><p>为了提高文件的写入效率，在现代操作系统中，当用户调用 write函数，将一些数据写入到文件的时候，操作系统通常会将写入数据暂时保存在一个内存缓冲区里面，等到缓冲区的空间被填满、或者超过了指定的时限之后，才真正的将缓冲区中的数据写入到磁盘里面。<br>这种做法虽然提高了效率，但也为写入数据带来了安全问题，因为如果计算机发生停机，那么保存在内存缓冲区里面的写入数据将会丢失。</p><p>因此，Redis 服务器配置 appendfsync 选项的值直接决定 AOF 持久化功能的效率和安全性。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424111144986.png" alt="image-20240424111144986"></p><p>AOF 配置项 appendfsync 的三个可选值。</p><ul><li><p><strong>Always</strong>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</p></li><li><p><strong>Everysec</strong>，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</p></li><li><p><strong>No</strong>，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p></li></ul><p>三种策略的写回时机:</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425142848519.png" alt="image-20240425142848519"></p><p>简单一句话：要高性能，选择 No 策略；要高可靠性，选择 Always 策略；如果允许数据有一点丢失，又希望性能别受太大影响的话，那么就选择 Everysec 策略。</p><h3 id="11-2-AOF-文件的载入与数据还原">11.2 AOF 文件的载入与数据还原</h3><p>因为 AOF 文件里面包含了重建数据库状态所需的所有写命令，所以服务器只要读入并重新执行一遍 AOF 文件里面保存的写命令，就可以还原服务器关闭之前的数据库状态。</p><p>步骤如下：</p><ol><li>创建一个不带网络连接的伪客户端（fake client）</li><li>从 AOF 文件中分析并读取一条写命令</li><li>使用伪客户端执行被读出的写命令</li><li>重复执行步骤 2 与 步骤 3 ，直到 AOF 中的所有写命令都被处理完毕为止。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424111221484.png" alt="image-20240424111221484"></p><h3 id="11-3-AOF重写">11.3 AOF重写</h3><p>为什么要重写？</p><p>因为AOF持久化是通过保存被执行的写命令来记录数据库状态的，所以随着服务器运行时间的流逝，AOF 文件中的内容会越来越多，文件的体积也会越来越大，如果不加以控制的话，体积过大的AOF文件很可能对Redis服务器、甚至整个宿主计算机造成影响，并且AOF 文件的体积越大，使用AOF 文件来进行数据还原所需的时间就越多。</p><p>为了解决AOF文件体积膨胀的问题，Redis提供了AOF文件重写（ rewrite）功能。通过该功能，Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个AOF 文件所保存的数据库状态相同，但新AOF文件不会包含任何浪费空间的冗余命令，所以新AOF文件的体积通常会比旧AOF 文件的体积要小得多。</p><p><strong>AOF文件重写实现</strong></p><p>虽然 Redis将生成新AOF文件替换旧AOF 文件的功能命名为“AOF文件重写”，<strong>但实际上，AOF 文件重写并不需要对现有的AOF 文件进行任何读取、分析或者写入操作，这个功能是通过读取服务器当前的数据库状态来实现的。</strong></p><p>首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，<strong>这就是AOF重写功能的实现原理</strong>。</p><p><strong>AOF后台重写</strong></p><p>上面介绍的AOF重写程序aof_rewrite函数可以很好地完成创建一个新AOF文件的任务，但是，因为这个函数会进行大量的写人操作，所以调用这个函数的线程将被长时间阻塞,所以 Redis 决定将AOF重写程序放到子进程里执行。</p><ul><li>子进程进行AOF重写期间，服务器进程（父进程）可以继续处理命令请求。</li><li>子进程带有服务器进程的数据副本，使用子进程而不是线程，可以在避免使用锁的情况下，保证数据的安全性。</li></ul><p>不过，使用子进程也有一个问题需要解决，因为子进程在进行AOF重写期间，服务器进程还需要继续处理命令请求，而新的命令可能会对现有的数据库状态进行修改，从而使得服务器当前的数据库状态和重写后的AOF文件所保存的数据库状态不一致。</p><p>为了解决这种数据不一致问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，它会同时将这个写命令发送给AOF缓冲区和AOF重写缓冲区，如图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424112203933.png" alt="image-20240424112203933"></p><p>当子进程完成 AOF 重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：</p><ol><li>将 AOF 重写缓冲区中的所有内容写入到新 AOF 文件中，这时新 AOF 文件所保存的数据库状态将和服务器当前的数据库状态一致。</li><li>对新的 AOF 文件进行改名，原子地（atomic）覆盖现有的 AOF 文件，完成新旧两个 AOF 文件的替换。</li></ol><p>这个信号处理函数执行完毕之后，父进程就可以继续像往常一样接受命令请求了。</p><p>在整个 AOF 后台重写过程中，只有信号处理函数执行时会对服务器进程（父进程）造成阻塞，在其它时候，AOF 后台重写都不会阻塞父进程，这将 AOF 重写对服务器性能造成的影响降到了最低。</p><p><strong>总结</strong>：</p><p>在执行BGREWRITEAOF命令时，Redis服务器会维护一个AOF重写缓冲区，该缓冲区会在子进程创建新AOF文件期间，记录服务器执行的所有写命令。当子进程完成创建新AOF文件的工作后，服务器就会重写缓冲区中的所有内容追加到新的AOF文件的末尾，使得新旧两个AOF文件所保存的数据库状态一致。最后，服务器用新的AOF文件替换旧的AOF文件，以此来完成AOF文件重写操作。</p><p>这里，对AOF和做个总结</p><table><thead><tr><th></th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td>持久化方式</td><td>定时对整个内存做快照</td><td>记录每一次执行的命令</td></tr><tr><td>数据完整性</td><td>不完整，两次备份之间会丢失</td><td>相对完整，取决于刷盘策略</td></tr><tr><td>文件大小</td><td>会有压缩，文件体积小</td><td>记录命令，文件体积很大</td></tr><tr><td>宕机恢复速度</td><td>很快</td><td>慢</td></tr><tr><td>数据恢复优先级</td><td>低，因为数据完整性不如AOF</td><td>高，因为数据完整性更高</td></tr><tr><td>系统资源占用</td><td>高，大量CPU和内存消耗</td><td>低，主要是磁盘IO资源但AOF重写时会占用大量CPU和内存资源</td></tr><tr><td>使用场景</td><td>可以容忍数分钟的数据丢失，追求更快的启动速度</td><td>对数据安全性要求较高常见</td></tr></tbody></table><blockquote><p><strong>极客时间中重写总结</strong></p></blockquote><p>重写的过程总结为<strong>一个拷贝，两处日志</strong>。</p><p>重写过程是由后台线程 bgrewriteaof 来完成的。</p><ol><li>“一个拷贝”是指什么？</li></ol><ul><li>每次执行重写时，主线程 fork 出后台的 bgrewriteaof 子进程。此时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</li></ul><ol start="2"><li>“两处日志”又是什么呢？</li></ol><ul><li><p>因为主线程未阻塞，仍然可以处理新来的操作。此时，如果有写操作，第一处日志就是指正在使用的 AOF 日志，Redis 会把这个操作写到它的缓冲区。这样一来，即使宕机了，这个 AOF 日志的操作仍然是齐全的，可以用于恢复。</p></li><li><p>而第二处日志，就是指新的 AOF 重写日志。这个操作也会被写到重写日志的缓冲区。这样，重写日志也不会丢失最新的操作。等到拷贝数据的所有操作记录重写完成后，重写日志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我们就可以用新的 AOF 文件替代旧文件了。</p></li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240425143725321.png" alt="image-20240425143725321"></p><h2 id="第十二章-事件">第十二章 事件</h2><p>Redis 服务器是一个事件驱动器，服务器需要处理以下两类事件：</p><ul><li>文件事件（file event）：Redis 服务器通过套接字与客户端（或者其它 Redis 服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其它服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作。</li><li>时间事件（time event）：Redis 服务器中的一些操作（比如 serverCron 函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。</li></ul><h3 id="12-1-文件事件">12.1 文件事件</h3><p>Redis 基于 Reactor 模式开发了自己的网络事件处理器：这个处理器被称为文件事件处理器（file event handler）：</p><ul><li>文件事件处理器使用 I / O 多路复用（multiplexing）程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其它同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。</p><p>文件事件分为 AE_READABLE事件（读事件）和 AE_WRITEABLE 事件（写事件）两类。</p><h3 id="12-2-时间事件">12.2 时间事件</h3><p>Redis 的时间事件分为以下两类：</p><ul><li>定时事件：让一段程序在指定的时间之后执行一次。比如说，让程序 X 在当前时间的 30 毫秒之后执行一次。</li><li>周期性事件：让一段程序每隔指定时间就执行一次。比如说，让程序 X 每隔 30 毫秒就执行一次。</li></ul><p>服务器在一般情况下只执行 serverCron 函数一个时间事件，并且这个事件是周期性事件。</p><p>时间事件的实际处理时间通常会比设定的到达时间晚一些。</p><blockquote><p>文件事件和时间事件之间是合作关系，服务器会轮流处理这两种事件，并且处理事件的过程中也不会进行抢占。</p></blockquote><h2 id="第十三章-客户端">第十三章 客户端</h2><h2 id="第十四章-服务器">第十四章 服务器</h2><p>Q：为什么单线程Redis能那么快？</p><p>A：</p><p>首先，先理清下概念：Redis 是单线程，主要是指 <strong>Redis 的网络 IO 和键值对读写是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程</strong>。但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p><p>快呢，有4点原因：</p><ol><li><p>内存DB</p></li><li><p>单线程，没有线程切换开销</p></li><li><p>IO多路复用</p></li><li><p>底层数据结构</p></li></ol><h2 id="第十五章-复制">第十五章 复制</h2><p>在 Redis 中，用户可以通过执行 SLAVEOF命令或者设置 slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器被称为从服务器（slave）。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424112727043.png" alt="image-20240424112727043"></p><blockquote><p>Redis中可以通过 SLAVEOF 命令来设置一个服务器为从服务器，从而复制指定的主服务器的数据。</p></blockquote><h3 id="15-1-旧版复制功能的实现">15.1 旧版复制功能的实现</h3><p>旧版复制功能包括 同步(sync) 和 命令传播 两个操作。</p><p><strong>同步</strong></p><p>从服务器对主服务器的同步操作需要发送 SYNC命令来实现，该命令的执行步骤包括：</p><ol><li>从服务器向主服务器发送SYNC命令；</li><li>主服务器接收到命令后，执行 BGSAVE 命令，在后台生成一个 RDB 文件，并使用一个缓冲区来记录从当前开始的写命令；</li><li>当主服务器的 BGSAVE命令执行完成后就将 RDB 文件发送给从服务器，从服务器开始接受并且载入这个RDB 文件；</li><li>主服务器将记录在缓冲区里面的所有写命令发送给从服务器执行，从服务器来将自己的数据库状态更新为主服务器的状态。</li></ol><p><strong>命令传播</strong></p><p>在同步操作完成后，主服务器一旦有一些新命令的执行导致数据库发生改变就需要将改变立刻同步到从服务器，因此对于会导致数据库更改的命令，主服务器会同样发送到从服务器。</p><h3 id="15-2-旧版复制功能的缺陷">15.2 旧版复制功能的缺陷</h3><p>在Redis中的复制可以分为初次复制和断线后的重复制。旧版复制对于初次复制没有问题，但是断线后的重复制效率比较低。<br>因为当复制过程中出现断线后，当从服务器再次连接上时由于没有记录上次的复制位置，所以需要重新从头开始复制，执行SYNC 命令(初次复制)。<br>但是主从服务器断开的时间比较短，导致主服务器在断线期间执行的写命令较少，而每次断线时为了这点命令选择执行 SYNC命令，效率非常低效。</p><p><strong>SYNC 命令是一种非常耗时的操作</strong></p><ul><li>主服务器要执行 BGSAVE 指令来生成 RDB 文件，这个操作会消耗主服务器大量的 CPU、内存和磁盘 I/O 资源。</li><li>主服务器将 RDB 文件发送到从服务器会消耗网络资源。</li><li>从服务器接受 RDB 文件后会载入，这个期间从服务器会阻塞没有办法处理命令请求。</li></ul><h3 id="15-3-新版复制功能的实现">15.3 新版复制功能的实现</h3><p>新版复制采用 PSYNC 命令代替旧版的 SYNC 命令。</p><p>这不就是增量复制麻Qwq</p><p>该命令包含两个部分：</p><ul><li>完整重同步：和旧版复制的初次复制操作一样。</li><li>部分重同步：用于断线后的处理，采用 复制偏移量、复制积压缓冲区、服务器运行ID来实现搞笑的重连接复制操作。</li></ul><p><strong>部分重同步</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424150947810.png" alt="image-20240424150947810"></p><p>主服务器和从服务器各保存一份复制偏移量，每次主服务器发送数据和从服务器成功接受数据就增加相应的偏移量。通过复制偏移量能够确保主从服务器的数据状态是否一致。</p><p><strong>复制积压缓冲区</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424151008569.png" alt="image-20240424151008569"></p><p>复制积压缓冲区的特点：</p><ul><li>复制积压缓冲区是由主服务器维护的一个<strong>固定长度</strong>的先进先出队列，默认大小为 1MB。</li><li>每当主服务器进行命令传播时，它不仅会将数据发送给从服务器，还要将数据写入到复制积压缓冲区中，复制积压缓冲区同时还会为队列中的每个字节记录相应的复制偏移量。</li><li>那么当从服务器断线重连后，它会将自己的复制偏移量发送给主服务器，主服务器就会检查该偏移量之后的数据是否全部存在于复制积压缓冲区中，如果全部存在就执行部分重同步操作；否则必须执行完整重同步操作。</li></ul><p>复制积压缓冲区大小可以动态调整：</p><ul><li>默认大小是 1MB，但是如果断线时间过长，断线时写入的数据较多，就会由于缓冲区大小太小而不得不进行完整重同步操作。</li><li>缓冲区大小的计算公式：second * write_size_per_second来估算，second表示从服务器断线后重新连接上主服务器所需的时间；write_size_per_second 表示主服务器每秒钟写入的命令数据量。</li><li>可以通过修改配置文件中的 repl-backlog-size 选项调整缓冲区大小；通过repl-backlog-ttl调整缓冲区的存活时间，超过会被销毁。</li></ul><p><strong>服务器ID</strong></p><p>每个服务器启动时都会分配一个服务器ID，当从服务器对主服务器进行初次同步操作时，主服务器会将自己的服务器ID发送给从服务器，从服务器会保存起来。<br>如果从服务器断开后重连到一个主服务器，它会发送之前保存的主服务器ID，如果ID和当前主服务器ID相同就执行部分重同步操作，否则执行完整重同步操作。</p><p>从服务器发送指令：</p><ul><li>如果从服务器初次同步主服务器，它会发送 PSYNC ? -1命令，请求完整重同步操作；</li><li>如果从服务器已经复制过某个主服务器后，当它开始一次新复制时会发送 PSYNC &lt; runid &gt; &lt; offset &gt; 命令，runid 是上次主服务器的ID， offset 是自己当前的复制偏移量。</li></ul><p>主服务器回复指令：</p><ul><li>+FULLRESYNC &lt; runid &gt; &lt; offset &gt;：主服务器与从服务器执行完整的重同步操作；</li><li>+CONTINUE：执行部分重同步操作，等待主服务器发送数据；</li><li>-ERR：识别不了命令，出现问题。</li></ul><p>明了概念</p><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在repl_baklog中能找到offset时</li></ul><h3 id="15-7-心跳检测">15.7 心跳检测</h3><p>在命令传播阶段，从服务器默认会以每秒一次的频率，向主服务器发送命令 REPLCONF ACK &lt;replication_offset&gt; ，其中 replication_offset 是从服务器当前的复制偏移量。</p><p>发送 REPLCONF ACK命令对于从服务器有三个作用：</p><ul><li>检测主从服务器的网络连接状态。</li><li>辅助实现 min-slaves选项。</li><li>检测命令是否丢失。</li></ul><h2 id="第十六章-Sentinel">第十六章 Sentinel</h2><p>这个大致思路和raft协议很像。</p><p>Sentinel（哨岗、哨兵）是 Redis 的高可用性解决方案：由一个或多个 Sentinel 实例（instance）组成的 Sentinel 系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。</p><p>哨兵的作用</p><ul><li>监控：Sentinel 会不断检查您的master和slave是否按预期工作</li><li>自动故障恢复：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li>通知：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424113707465.png" alt="image-20240424113707465"></p><p><strong>主观下线</strong></p><p>在默认情况下，Sentinel 会以每秒一次的频率向所有与它创建了命令连接的实例（包括主服务器、从服务器、其它 Sentinel 在内）发送 PING 命令，并通过实例返回的 PING命令回复来判断实例是否在线。</p><p>如果在默认配置的间隔时间内，有一服务器并没有进行有效回复，那此 Sentinel 就会将此服务器标记为主观下线。</p><p><strong>客观下线</strong></p><p>当 Sentinel 将一个服务器判断为主观下线之后，为了确定此服务器是否是真的下线了，它会去询问其它 Sentinel 此服务器是否已下线，当得到足够数量的确定回复之后，Sentinel 就会将此服务器标记为客观下线状态，如果此服务器是主服务器，就执行故障转移操作。</p><p><strong>选举领头 Sentinel</strong></p><p>当一个主服务器被判定为客观下线之后，监视这个下线主服务器的各个 Sentinel 会进行协商，选举出一个领头 Sentinel，并由领头 Sentinel 对下线主服务器执行故障转移操作。</p><p><strong>故障转移</strong></p><p>在选举产生领头 Sentinel 之后，领头 Sentinel 将对已下线的主服务器执行故障转移操作，包含以下三个步骤：</p><ol><li>在已下线主服务器的所有从服务器中，选择一个从服务器将其转换为新的主服务器。</li><li>让已下线主服务器的所有从服务器改为复制新的从服务器。</li><li>将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线时，他就会成为新的主服务器的从服务器</li></ol><p><strong>总结</strong></p><p>Sentinel的三个作用是什么？</p><ul><li>监控</li><li>故障转移</li><li>通知</li></ul><p>Sentinel如何判断一个redis实例是否健康？</p><ul><li>每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线</li><li>如果大多数sentinel都认为实例主观下线，则判定服务下线</li></ul><p>故障转移步骤有哪些？</p><ul><li>首先选定一个slave作为新的master，执行slaveof no one</li><li>然后让所有节点都执行slaveof 新master</li><li>修改故障节点，执行slaveof 新master</li></ul><h2 id="第十七章-集群">第十七章 集群</h2><p>Redis 集群是 Redis 提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能。</p><p>一个 Redis 集群通常由多个节点组成，在刚开始的时候，每个节点都是相互独立的，它们都处于一个只包含自己的集群当中，要组建一个真正可工作的集群，我们必须将各个独立的节点连接起来，构成一个包含多个节点的集群。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接各个节点的工作可以使用这个命令来完成</span></span><br><span class="line">CLUSTER MEET  </span><br></pre></td></tr></table></figure><h3 id="槽指派">槽指派</h3><p>Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424114229008.png" alt="image-20240424114229008"></p><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li><p>key中包含&quot;{}&quot;，且“{}”中至少包含1个字符，“{}”中的部分是有效部分</p></li><li><p>key中不包含“{}”，整个key都是有效部分</p></li></ul><p>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424114234608.png" alt="image-20240424114234608"></p><p>Redis如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key的有效部分计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>这一类数据使用相同的有效部分，例如key都以{typeId}为前缀</li></ul><h2 id="第十八章-发布与订阅">第十八章 发布与订阅</h2><p>Redis 的发布与订阅功能由 PUBLISH、SUBSCRIBE、PSUBSCRIBE等命令组成</p><ul><li>SUBSCRIBE是频道订阅，客户端可以订阅一个或多个频道，成为这些频道的订阅者（subscriber），每当有其它客户端向被订阅的频道发送消息时，频道的所有订阅者都会收到这条消息</li><li>PSUBSCRIBE是基于模式的订阅，除了订阅频道之外，客户端还可以通过执行 PSUBSCRIBE 命令订阅一个或多个模式，从而成为这些模式的订阅者，每当有其它客户端向某个频道发送消息时，消息不仅会被发送给这个频道的所有订阅者，它还会发送给所有与这个频道相匹配的模式的订阅者。</li></ul><p>客户端可以通过 PUBSUB命令来查看频道或者模式的相关信息，比如某个频道目前有多少订阅者，又或者某个模式目前有多少订阅者等等。</p><p>当一个 Redis 客户端执行 PUBLISH  &lt; channel &gt; &lt; message &gt; 命令将消息 message 发送给频道 channel 的时候，服务器需要执行以下两个动作：</p><ol><li>将消息 message 发送给 channel 频道的所有订阅者。</li><li>如果有一个或多个模式的 pattern 与频道 channel 相匹配，那么将消息 message 发送给 pattern 模式的订阅者。</li></ol><h2 id="第十九章-事务">第十九章 事务</h2><p>Redis通过MULTI、EXEC、WATCH等命令来实现事务( transaction)功能。事务提供了一种将多个命令请求打包，然后一次性、按顺序地执行多个命令的机制，并且在事务执行期间，服务器不会中断事务而改去执行其他客户端的命令请求，它会将事务中的所有命令都执行完毕，然后才去处理其他客户端的命令请求。</p><h3 id="19-1-事务的实现">19.1 事务的实现</h3><p>一个事务从开始到结束通常会经历以下三个阶段:</p><p>1）事务开始</p><p>2）命令入队</p><p>3）事务执行</p><p>本节接下来的内容将对这三个阶段进行介绍，说明一个事务从开始到结束的整个过程。</p><p><strong>事务开始</strong></p><ol><li>MULTI 命令的执行代表事务的开始，MULTI通过将客户端状态的 flags 属性中的 REDIS_MULTI标识打开来将执行该命令的客户端切换至事务状态。</li><li>每个客户端都有自己的事务状态，它保存在客户端状态的 mstate 属性里面，mstate 里面包含一个事务队列，以及一个已入队命令的计数器，事务队列是一个 multiCmd类型的数组，每个 multiCmd 结构都保存着一个已入队命令的相关信息，事务队列以先进先出（FIFO）的方式保存入队命令。</li><li>当一个处于事务状态的客户端向服务器发送 EXEC命令时，这个 EXEC命令会立即被执行。服务器会遍历这个客户端的事务队列，执行队列中保存的所有命令，最后将执行命令所得的结果全部返回给客户端。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424142426360.png" alt="image-20240424142426360"></p><h3 id="19-2-WATCH命令的实现">19.2 WATCH命令的实现</h3><p>WATCH命令是一个乐观锁（ optimistic locking )，它可以在EXEC命令执行之前，监视任意数量的数据库键，并在EXEC命令执行时，检查被监视的键是否至少有一个已经被修改过了，如果是的话，服务器将拒绝执行事务，并向客户端返回代表事务执行失败的空回复。</p><p>接下来，我将详细介绍下watch命令的实现原理。</p><p>每个Redis数据库都保存着一个watched_keys字典，这个字典的键是某个被WATCH命令监视的数据库键，而字典的值则是一个链表，链表中记录了所有监视相应数据库键的客户端:</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424142552387.png" alt="image-20240424142552387"></p><p>下图展示的watched_keys字典将被更新的状态。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424142606928.png" alt="image-20240424142606928"></p><p><strong>监视机制的触发</strong></p><p>所有对数据库进行修改的命令，比如SET、LPUSH、SADD、ZREM、DEL、FLUSHDB等等，在执行之后都会调用multi.c/touchWatchKey函数对watched_keys字典进行检查，查看是否有客户端正在监视刚刚被命令修改过的数据库键，如果有的话，那么touchwatchKey函数会将监视被修改键的客户端的REDIS_DIRTY_CAs标识打开，表示该客户端的事务安全性已经被破坏。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240424142724988.png" alt="image-20240424142724988"></p><h3 id="19-3-事务的ACID性质">19.3 事务的ACID性质</h3><p>在 Redis 中，事务总是具有原子性(Atomicity )、一致性( Consistency)和隔离性( Isolation )，并且当Redis运行在某种特定的持久化模式下时，事务也具有耐久性( Durability )。</p><h2 id="第二十章-Lua脚本">第二十章 Lua脚本</h2><h2 id="第二十一章-二进制位数组">第二十一章 二进制位数组</h2><p>Redis 提供了 SETBIT、GETBIT、BITCOUNT、BITOP 四个命令用于处理二进制位数组，又称 “位数组”</p><ul><li>SETBIT命令用于为位数组指定偏移量上的二进制位设置值，可以是 0 或者 1</li><li>GETBIT 用于获取指定偏移量上的二进制位的值</li><li>BITCOUNT 用于统计位数组里面，值为 1 的二进制位的数量</li><li>BITOP可以对多个位数组进行按位与（and）、按位或（or）、按位异或（xor）、取反（not）运算</li></ul><p>Redis 使用 SDS 来保存位数组。</p><h2 id="第二十二章-慢查询日志">第二十二章 慢查询日志</h2><ul><li>Redis 的慢查询日志功能用于记录执行时间超过给定时长的命令请求，用户可以通过这个功能产生的日志来监视和优化查询速度。</li></ul><h2 id="第二十三章-监视器">第二十三章 监视器</h2><ul><li>客户端可以通过执行 MONITOR 命令，将客户端转换成监视器，接收并打印服务器处理的每个命令请求的相关信息</li><li>当一个客户端从普通客户端变为监视器时，该客户端的 REDIS_MONITOR标识会被打开</li><li>服务器将所有监视器都记录在 monitors 链表中</li><li>每次处理命令时，服务器都会遍历 monitors 链表，将相关信息发送给监视器</li></ul>]]></content>
    
    
    <summary type="html">《Redis设计与实现》</summary>
    
    
    
    <category term="Redis" scheme="https://penge666.github.io/categories/Redis/"/>
    
    <category term="读书笔记" scheme="https://penge666.github.io/categories/Redis/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Redis" scheme="https://penge666.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>内存屏障</title>
    <link href="https://penge666.github.io/posts/a5a0c60f.html"/>
    <id>https://penge666.github.io/posts/a5a0c60f.html</id>
    <published>2024-04-23T09:58:36.000Z</published>
    <updated>2024-04-24T09:01:56.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU缓存">CPU缓存</h2><p>来个问题先=-=</p><p>Q：为什么加缓存？</p><p>A：因为CPU和主存的速度差异。</p><p>Q：缓存的设计是根据程序局部性原理</p><p>A：程序局部性包括时间局部性和空间局部性。</p><ol><li>时间局部性是指被访问过一次的内存位置很可能在不远的将来会被再次访问。</li><li>空间局部性是指如果一个内存位置被引用过，那么它邻近的位置在不远的将来也有很大概率会被访问。</li></ol><p>开始正题^-^</p><p>缓存是由 SRAM（静态随机存储）组成的，它的本质是一种时序逻辑电路，具体的每个单元（比特）由一个个锁存器构成，锁存器的功能就是让电路具有记忆功能。</p><p>缓存集成到芯片的方式有多种，在多核芯片上，缓存集成的方式主要有以下三种：</p><ul><li><p><strong>集中式缓存</strong>：一个缓存和所有处理器直接相连，多个核共享这一个缓存</p></li><li><p><strong>分布式缓存</strong>：一个处理器仅和一个缓存相连，一个处理器对应一个缓存</p></li><li><p><strong>混合式缓存</strong>：在 L3 采用集中式缓存，在 L1 和 L2 采用分布式缓存</p></li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423160952647.png" alt="image-20240423160952647"></p><p>越靠近 CPU 核心的缓存其访问速度越快，CPU 访问 L1 Cache 只需要 2~4个时钟周期，访问 L2 Cache 大约 10~20 个时钟周期，访问 L3 Cache 大约 20~60 个时钟周期，而访问内存速度大概在 200~300 个时钟周期之间。如下表格：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423161038790.png" alt="image-20240423161038790"></p><h3 id="缓存的工作原理">缓存的工作原理</h3><p><strong>介绍</strong></p><p>先来学习下cache line（缓存行/缓存块），cache line 是缓存进行管理的一个最小存储单元，也叫缓存块。从内存向缓存加载数据也是按缓存块进行加载的，一个缓存块和一个内存中相同容量的数据块（下称内存块）对应。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423161303297.png" alt=""></p><p>上图中的小方框就代表一个缓存块。</p><p>整个缓存由组（set）构成，每个组由路（way）构成。所以整个缓存容量等于组数、路数和缓存块大小的乘积：</p><p>计算公式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整个缓存容量=组数×路数×缓存块大小</span><br></pre></td></tr></table></figure><p><strong>简单认识</strong></p><p>CPU Cache 的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个数组元素来读取数据的，在 CPU Cache 中的，这样一小块一小块的数据，称为 <strong>Cache Line（缓存块）</strong>。</p><p>我们可以根据以下命令查看linux L1 Cache的缓存大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ✘ penge@penge-virtual-machine  ~/Desktop/MordenCpp/tmp1  <span class="built_in">cat</span>  /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size </span><br><span class="line">64</span><br></pre></td></tr></table></figure><p>L1 Cache 一次载入数据的大小是 64 字节。</p><p>比如，有一个 int array[100]的数组，当载入 array[0]时，由于这个数组元素的大小在内存只占 4 字节，不足 64 字节，CPU 就会<strong>顺序加载</strong>数组元素到 array[15]，意味着 array[0]~array[15] 数组元素都会被缓存在 CPU Cache 中了，因此当下次访问这些数组元素时，会直接从 CPU Cache 读取，而不用再从内存中读取，大大提高了 CPU 读取数据的性能。</p><p><strong>读取流程</strong></p><p>先来个问题：CPU 怎么知道要访问的内存数据，是否在 Cache 里？如果在的话，如何找到 Cache 对应的数据呢？</p><p>为了简化寻址方式，内存地址确定的数据块总是会被放在一个固定的组，但可以放在组内的任意路上，也就是说，对于一个特定地址数据的访问，它如果要载入缓存，那么它放在上图中的行数是固定的，但是具体放到哪一列是不固定的。</p><p>根据缓存中组数和路数的不同，缓存的映射方式分为三类：</p><ul><li><p><strong>直接相连映射</strong>：缓存只有一个路，一个内存块只能放置在特定的组上</p><ul><li>问题：对于直接相连映射，当多个内存块映射到同一组时，会产生冲突，因为只有一列，会导致缓存块被频繁替换。</li></ul></li><li><p><strong>全相连映射</strong>：缓存只有一个组，所有的内存块都放在这一个组的不同路上</p><ul><li>问题：当要查询某个缓存块时，需要逐个遍历每个路。</li></ul></li><li><p><strong>组组相连映射</strong>：缓存同时由多个组和多个路。</p></li></ul><p>下面以直接相连映射举例：</p><p>对于直接映射 Cache 采用的策略，就是把内存块的地址始终「映射」在一个 CPU Line（缓存块） 的地址，至于映射关系实现方式，则是使用「取模运算」，取模运算的结果就是内存块地址对应的 CPU Line（缓存块） 的地址。</p><p>补充：我们提到 CPU 访问内存数据时，是一小块一小块数据读取的，具体这一小块数据的大小，取决于 coherency_line_size的值，一般 64 字节。在内存中，这一块的数据我们称为<strong>内存块（Bock）</strong>，读取的时候我们要拿到数据所在内存块的地址。</p><p>举个例子，内存共被划分为 32 个内存块，CPU Cache 共有 8 个 CPU Line，假设 CPU 想要访问第 15 号内存块，如果 15 号内存块中的数据已经缓存在 CPU Line 中的话，则是一定映射在 7 号 CPU Line 中，因为 15 % 8的值是 7。</p><p>机智的你肯定发现了，使用取模方式映射的话，就会出现多个内存块对应同一个 CPU Line，比如上面的例子，除了 15 号内存块是映射在 7 号 CPU Line 中，还有 7 号、23 号、31 号内存块都是映射到 7 号 CPU Line 中。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423162615794.png" alt="image-20240423162615794"></p><p>因此，为了区别不同的内存块，在对应的 CPU Line 中我们还会存储一个<strong>组标记（Tag）</strong>。这个组标记会记录当前 CPU Line 中存储的数据对应的内存块，我们可以用这个组标记来区分不同的内存块。</p><p>除了组标记信息外，CPU Line 还有两个信息：</p><ul><li>一个是，从内存加载过来的实际存放<strong>数据（Data）</strong>。</li><li>另一个是，<strong>有效位（Valid bit）</strong>，它是用来标记对应的 CPU Line 中的数据是否是有效的，如果有效位是 0，无论 CPU Line 中是否有数据，CPU 都会直接访问内存，重新加载数据。</li></ul><p>CPU 在从 CPU Cache 读取数据的时候，并不是读取 CPU Line 中的整个数据块，而是读取 CPU 所需要的一个数据片段，这样的数据统称为一个<strong>字（Word）</strong>。那怎么在对应的 CPU Line 中数据块中找到所需的字呢？答案是，需要一个<strong>偏移量（Offset）</strong>。</p><p>因此，一个内存的访问地址，包括<strong>组标记、CPU Line 索引、偏移量</strong>这三种信息，于是 CPU 就能通过这些信息，在 CPU Cache 中找到缓存的数据。而对于 CPU Cache 里的数据结构，则是由<strong>索引 + 有效位 + 组标记 + 数据块</strong>组成。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423162643672.png" alt="image-20240423162643672"></p><p>如果内存中的数据已经在 CPU Cahe 中了，那 CPU 访问一个内存地址的时候，会经历这 4 个步骤：</p><ol><li>根据内存地址中索引信息，计算在 CPU Cahe 中的索引，也就是找出对应的 CPU Line 的地址；</li><li>找到对应 CPU Line 后，判断 CPU Line 中的有效位，确认 CPU Line 中数据是否是有效的，如果是无效的，CPU 就会直接访问内存，并重新加载数据，如果数据有效，则往下执行；</li><li>对比内存地址中组标记和 CPU Line 中的组标记，确认 CPU Line 中的数据是不是我们要访问的内存数据，如果不是的话，CPU 就会直接访问内存，并重新加载数据，如果是的话，则往下执行；</li><li>根据内存地址中偏移量信息，从 CPU Line 的数据块中，读取对应的字。</li></ol><p><strong>程序优化</strong></p><p>如果下次访问内存时，数据已经在缓存中了，这就是缓存命中，它获取目标数据的速度非常快。如果数据没在缓存中，这就是缓存缺失，此时要启动内存数据传输，而内存的访问速度相比缓存差很多。</p><p>下面，将举出一些和缓存相关的例子，加深在程序上面的应用。</p><blockquote><p>例子</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="comment">// pro1:</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">a[i][j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pro2:</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">a[j][i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，pro1的执行时间更短，也就是我们常常说的程序局部一致性原理。</p><p>为什么pr2的性能不够好呢？</p><p>原因：主要原因是当按行访问时地址是连续的，下次访问的元素和当前大概率在同一个 cache line（一个元素 8 字节，而一个 cache line 可以容纳 8 个元素），但是当按列访问时，由于地址跨度大，下次访问的元素基本不可能还在同一个 cache line，因此就会增加 cache line 被替换的次数，所以性能劣化。</p><blockquote><p>例子2</p></blockquote><p>伪共享（false-sharing）的意思是说，<strong>当两个线程同时各自修改两个相邻的变量，由于缓存是按缓存块来组织的，当一个线程对一个缓存块执行写操作时，必须使其他线程含有对应数据的缓存块无效。这样两个线程都会同时使对方的缓存块无效，导致性能下降</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span>&#123;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> b;</span><br><span class="line">&#125; s;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">thread1</span><span class="params">(<span class="type">void</span> *args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100000000</span>; i++)&#123;</span><br><span class="line">        s.a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">thread2</span><span class="params">(<span class="type">void</span> *args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100000000</span>; i++)&#123;</span><br><span class="line">        s.b++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> t1, t2;</span><br><span class="line">    s.a = <span class="number">0</span>;</span><br><span class="line">    s.b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t1, <span class="literal">NULL</span>, thread1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t2, <span class="literal">NULL</span>, thread2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(t1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(t2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %lld, b = %lld\n&quot;</span>, s.a, s.b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，main 函数中创建了两个线程，分别修改结构体 S 中的 a 、b 变量。a 、b 均为 long long 类型，都占 8 字节，所以 a 、b 在同一个 cache line 中，因此会发生为伪共享的情况。</p><p>根据上述知识，知道解决伪共享的办法是，将 a 、b 不要放在同一个 cache line，这样两个线程分别操作不同的 cache line 不会相互影响。</p><p>将结构体修改成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span>&#123;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_0;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_1;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_2;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_3;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_4;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_5;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_6;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> nop_7;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> b;</span><br><span class="line">&#125; s;</span><br></pre></td></tr></table></figure><p>因为在 a、b 中间插入了 8 个 long long 类型的变量，中间隔了 64 字节，所以 a、b 会被映射到不同的缓存块。</p><p>分别运行上述的程序，具体运行时间如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">penge@penge-virtual-machine  ~/Desktop/MordenCpp/tmp1  ./main                        </span><br><span class="line">a = 100000000, b = 100000000</span><br><span class="line">520934.0000000000%</span><br><span class="line">penge@penge-virtual-machine  ~/Desktop/MordenCpp/tmp1  g++ example.c -o main -pthread</span><br><span class="line">penge@penge-virtual-machine  ~/Desktop/MordenCpp/tmp1  ./main                        </span><br><span class="line">a = 100000000, b = 100000000</span><br><span class="line">342973.0000000000%   </span><br></pre></td></tr></table></figure><h2 id="缓存一致性协议MESI">缓存一致性协议MESI</h2><blockquote><p>基本术语</p></blockquote><p><strong>缓存和内存的更新策略</strong></p><ul><li><p>写回 （ Write Back）：对缓存的修改不会立刻传播到主存，只有当缓存块被替换时，这些被修改的缓存块，才会写回并覆盖内存中过时的数据</p></li><li><p>写直达 （Write Through）：缓存中任何一个字节的修改，都会立刻传播到内存</p></li></ul><p><strong>写缓存时 CPU 之间的更新策略</strong></p><ul><li>写更新（Write Update）：如果 CPU 采取写更新策略，每次它的缓存写入新的值，该 CPU 都必须发起一次总线请求，通知其他 CPU 将它们的缓存值更新为刚写入的值，所以写更新会很占用总线带宽。</li><li>写无效（Write Invalidate）：如果在一个 CPU 修改缓存时，将其他 CPU 中的缓存全部设置为无效</li></ul><p><strong>从写缓存时数据是否被加载</strong></p><ul><li>写分配（Write Allocate）：在写入数据前将数据读入缓存</li><li>写不分配（Not Write Allocate）：在写入数据时，直接将要写入的数据传播内存，而并不将数据块读入缓存</li></ul><p>开始正题：</p><p>Q：为什么要设计这个协议呢？</p><p>A：因为当多核CPU对缓存数据进行读写操作的时候，导致不一致性。因此引入这个协议保证不让系统数据混乱。</p><p>MESI 是指4中状态的首字母。每个Cache line有4个状态，可用2个bit表示，它们分别是：</p><blockquote><p>缓存行（Cache line）:缓存存储数据的单元。</p></blockquote><table><thead><tr><th>状态</th><th>描述</th><th>监听任务</th></tr></thead><tbody><tr><td>M 修改 (Modified)</td><td>该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td><td>缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td></tr><tr><td>E 独享、互斥 (Exclusive)</td><td>该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td><td>缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td></tr><tr><td>S 共享 (Shared)</td><td>该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td><td>缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td></tr><tr><td>I 无效 (Invalid)</td><td>该Cache line无效。</td><td>无</td></tr></tbody></table><p><strong>MESI状态转换</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423155851866.png" alt="image-20240423155851866"></p><p>触发事件：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423155500901.png" alt=""></p><p>各个状态转移情况</p><ul><li>M状态</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423160109457.png" alt="image-20240423160109457"></p><ul><li>E状态</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423160152951.png" alt="image-20240423160152951"></p><ul><li>S状态</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423160251531.png" alt="image-20240423160251531"></p><ul><li>I状态</li></ul><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423160319450.png" alt="image-20240423160319450"></p><p><strong>总结</strong></p><p>MESI协议：当CPU写数据(M)时，如果发现操作的变量是共享变量(s) ，会发出信号通知其他CPU将该变量的缓存行置为无效状态(1) ，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取，确保一致性。</p><h2 id="内存模型">内存模型</h2><p>在上面的章节我们学习到，在 Share 状态下，如果一个核想独占缓存进行修改，就需要先给所有 Share 状态的同伴发出 Invalid 消息，等所有同伴确认并回复它“Invalid acknowledgement”以后，它才能把这块缓存的状态更改为 Modified，这是保持多核信息同步的必然要求。但是这个过程是很耗费时间的。【简单来说，一个CPU每次的修改都要等待另外的CPU的确认信息，这是比较耗费时间的】</p><p>那就继续优化！！！</p><h3 id="写缓冲与写屏障">写缓冲与写屏障</h3><p>CPU 的设计者为每个核都添加了一个名为 <strong>store buffer</strong> 的结构，store buffer 是硬件实现的缓冲区，它的读写速度比缓存的速度更快，所有面向缓存的写操作都会先经过 store buffer。</p><p>增加了 store buffer 以后的 CPU 缓存结构</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423164905953.png" alt=""></p><p>这里，如果 CPU 的某个核再要对一个变量进行赋值，它就不必等到所有的同伴都确认完，而是直接把新的值放入 store buffer，然后再由 store buffer 慢慢地去做核间同步，并且将新的值刷入到 cache 中去就好了。而且，每个核的 store buffer 都是私有的，其他核不可见。</p><p>但是有个Bug：就是<strong>它并不能保证变量写入缓存和主存的顺序</strong>。</p><p>来个看经典的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPU0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CPU1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">assert</span>(a == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423170726938.png" alt="image-20240423170726938"></p><p>在这个代码块中，CPU0 执行 foo 函数，CPU1 执行 bar 函数。但在对变量 a 和 b 进行赋值的时候，有两种情况会导致它们的赋值顺序被打乱。</p><p><strong>第一种情况是 CPU 的乱序执行</strong>。可能会b先执行，然后再执行a。这是因为CPU 为了提升运行效率和提高缓存命中率，采用了乱序执行。</p><p><strong>第二种情况是 store buffer 在写入时，有可能 b 所对应的缓存行会先于 a 所对应的缓存行进入独占状态，也就是说 b 会先写入缓存。</strong>【store buffer将变量放进缓存的顺序不一致】</p><p>简单来说就是因为Store Buffer的存在，最后结果不确定。</p><ol><li>a的值可能因为是Share（共享）先被写入了Store Buffer，并发送通知其他cpu置为Invalid(失效)。</li><li>b的值，可能因为在cache中已经存在并且是Exclusive（独占）直接被写进cache中。</li><li>读取的时候因为先读b的值，b被刷进主存供读取。</li><li>后面要读a，因为还没收到失效通知，从cache中直接拿到a，断言失败。</li></ol><p>为此，CPU 设计者就引入了<strong>内存屏障，屏障的作用是前边的读写操作未完成的情况下，后面的读写操作不能发生</strong>。</p><p>来看看加了内存屏障的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPU0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">smp_mb</span>();</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CPU1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">assert</span>(a == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>smp_mb 就代表了多核体系结构上的内存屏障。由于在不同的体系结构上，指令各不相同，我们使用一个函数对它进行封装。加上这一道屏障以后，CPU 会保证 a 和 b 的赋值指令不会乱序执行，同时写入 cache 的顺序也与程序代码保持一致。</p><p><strong>所以说，内存屏障保证了，其他 CPU 能观察到 CPU0 按照我们期望的顺序更新变量</strong>。</p><p>总的来说，store buffer 的存在是为提升写性能，放弃了缓存的顺序一致性，我们把这种现象称为<strong>弱缓存一致性</strong>。</p><h3 id="失效队列与读屏障">失效队列与读屏障</h3><p>上述过程中还存在问题，当一个 CPU 向同伴发出 Invalid 消息的时候，它的同伴要先把自己的缓存置为 Invalid，然后再发出 acknowledgement。这个从“把缓存置为 Invalid”到“发出 acknowledgement”的过程所需要的时间也是比较长的。由于 store buffer 的存在提升了写入速度，那么 invalid 消息确认速度相比起来就慢了，这就带来了速度的不匹配。很容易导致 store buffer 的内容还没有及时更新到 cache 里，自己的容量就被撑爆了，从而失去了加速的作用。</p><p>为此，引入了失效队列（invalid queue）。</p><p>失效队列工作流程：收到 Invalid 消息的 CPU，比如我们称它为 CPU1，在收到 Invalid 消息时立即向 CPU0 发回确认消息，但这个时候 CPU1 并没有把自己的 cache 由 Share 置为 Invalid，而是把这个失效的消息放到一个队列中，等到空闲的时候再去处理失效消息，这个队列就是 invalid queue。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240423172524418.png" alt="image-20240423172524418"></p><p>运行上面增加内存屏障的代码，第 11 行的断言又可能失败了。</p><p>核心0 中 a 所对应的缓存行是 <strong>S</strong> 状态，b 所对应的缓存行是 <strong>E</strong> 状态；核心1中 a 所对应的缓存行是 <strong>S</strong> 状态，b 所对应的缓存行是 <strong>I</strong> 状态；</p><ul><li>因为有内存屏障在，a 和 b的写入缓存的顺序不会乱。</li><li>a 先向其他核心发送 Invalid 消息，并且等待 Invalid 确认消息；</li><li>Invalid 消息先入 核心1 对应的 Invalid Queue 并立刻返回确认消息，等待 核心1 处理；</li><li>核心0 收到确认消息后把 a 写入缓存，继续处理 b 的写入，由于 b 是 <strong>E</strong> 状态，直接写入缓存；</li><li>核心1 发送 BusRd 消息，读取到新的 b 值，然后获取 a（<strong>S</strong> 状态）值是0，因为使其无效的消息还在 Invalid Queue 中，第 11 行断言失败。</li></ul><p>引入 Invalid Queue 后，对核心1 来说看到的 a 和 b 的写入又出现乱序了。</p><p>解决办法是继续加内存屏障，核心1 想越过屏障必须清空 Invalid Queue，及时处理了对 a 的无效，然后读取到新的 a 值，如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// CPU0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">smp_mb</span>();</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CPU1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">smp_mb</span>(); <span class="comment">//继续加内存屏障</span></span><br><span class="line">    <span class="built_in">assert</span>(a == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的内存屏障是<strong>全屏障</strong>，包括读写屏障，过于严格了，会导致性能下降，所以有了细粒度的<strong>读屏障</strong>和<strong>写屏障</strong>。</p><h3 id="读写屏障分离">读写屏障分离</h3><p>完全遵守MESI协议CPU性能下降，但是增加了这两个队列就无法保证一致性。</p><p>分离的写屏障和读屏障的出现，是为了更加精细地控制 Store Buffer 和 Invalid Queue 的顺序。</p><p>也就是说</p><ul><li>写屏障之前的写操作一定会比之后的写操作先写到缓存中。</li><li>屏障前后的读操作都不能翻过屏障。</li></ul><p>【store buffer写进缓存顺序写，失效队列消费完成了再读】</p><p>优化前面的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// CPU0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">smp_wmb</span>(); <span class="comment">//写屏障</span></span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CPU1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">smp_rmb</span>(); <span class="comment">//读屏障</span></span><br><span class="line">    <span class="built_in">assert</span>(a == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这种修改只有在区分读写屏障的体系结构里才会有作用，比如 alpha 结构。而在 X86 和 Arm 中是没有作用的，这是因为 X86 采用的 TSO 模型不存在缓存一致性的问题，而 Arm 则是采用了另一种称为单向屏障的分类方式。</p><h3 id="单向屏障">单向屏障</h3><p>单向屏障 (<strong>half-way barrier</strong>) 也是一种内存屏障，但它不是以读写来区分的，而是像单行道一样，只允许单向通行，例如 ARM 中的 stlr 和 ldar 指令就是这样。</p><ul><li><strong>stlr</strong> 的全称是 store release register，包括 StoreStore barrier 和 LoadStore barrier（场景少），通常使用 release 语义将寄存器的值写入内存；</li><li><strong>ldar</strong> 的全称是 load acquire register，包括 LoadLoad barrier 和 LoadStore barrier（对，你没看错，我没写错），通常使用 acquire 语义从内存中将值加载入寄存器；</li><li><strong>release</strong> 语义的内存屏障只不允许其前面的读写向后越过屏障，<strong>挡前不挡后</strong>；</li><li><strong>acquire</strong> 语义的内存屏障只不允许其后面的读写向前越过屏障，<strong>挡后不挡前;</strong></li><li>StoreLoad barrier 就只能使用 <strong>dmb</strong>（全屏障） 代替了。</li></ul><h2 id="参考资料">参考资料</h2><ul><li><a href="https://blog.csdn.net/rong_toa/article/details/109274448">CPU Cache Line：CPU缓存行/缓存块</a></li><li><a href="https://www.bilibili.com/video/BV1fK4y1E7NC/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d6efee335659a376be8deb6c0654e9f7">缓存一致性协议MESI</a></li><li><a href="https://zhuanlan.zhihu.com/p/467782159">全知乎最详细的并发研究之CPU缓存一致性协议(MESI)有这一篇就够了！</a></li><li>[金阶之路：内存屏障（Memory Barriers）](<a href="https://zhuanlan.zhihu.com/p/606658179">金阶之路：内存屏障（Memory Barriers） - 知乎 (zhihu.com)</a>)</li><li>《极客时间》</li></ul>]]></content>
    
    
    <summary type="html">Memory Barriers</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>MySQL实战45讲</title>
    <link href="https://penge666.github.io/posts/cc27ac8a.html"/>
    <id>https://penge666.github.io/posts/cc27ac8a.html</id>
    <published>2024-04-21T10:50:21.000Z</published>
    <updated>2024-04-24T07:35:45.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>极客时间《MySQL实战45讲》学习笔记</p><h2 id="01-基础架构：-一条SQL查询语句是如何执行的"><strong>01 | 基础架构：</strong> <strong>一条SQL查询语句是如何执行的 ?</strong></h2><p>MySQL基本架构示意图：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421185512876.png" alt="image-20240421185512876"></p><p>MySQL可以分为Server层和存储引擎层两部分。</p><ul><li><p>Server层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p></li><li><p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。</p></li></ul><p><strong>连接器</strong></p><p>第一步，会先连接到这个数据库上， 这时候接待你的就是连接器。 连接器负责跟客户端建立连接、 获取权限、 维持和管理连接。</p><blockquote><p><strong>长连接</strong></p></blockquote><p>数据库中<strong>长连接</strong>是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><p>问题：MySQL在执行过程中临时使用的内存是管理在连接对象里面的，可能导致MySQL占用内存涨得特别快。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是MySQL异常重启了。</p><p>解决方法：</p><ol><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li>MySQL 5.7及以上，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><p><strong>查询缓存</strong></p><p>MySQL拿到一个查询请求后， 会先到查询缓存看看， 之前是不是执行过这条语句。 之前执行过的语句及其结果可能会以key-value对的形式， 被直接缓存在内存中。 key是查询的语句， value是查询的结果。 如果你的查询能够直接在这个缓存中找到key， 那么这个value就会被直接返回给客户端。</p><p>查询缓存往往弊大于利 ，大多数时候建议不要使用。</p><p>原因：查询缓存的失效频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p><p><strong>分析器</strong></p><p>如果没有命中查询缓存， 就要开始真正执行语句了。 分析器先会做“词法分析”。 你输入的是由多个字符串和空格组成的一条SQL语句， MySQL需要识别出里面的字符串分别是什么， 代表什么 。做完了这些识别以后， 就要做“语法分析”。 根据词法分析的结果， 语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。</p><p><strong>优化器</strong></p><p>在开始执行之前， 还要先经过优化器的处理。优化器是在表里面有多个索引的时候， 决定使用哪个索引； 或者在一个语句有多表关联（join）的时候， 决定各个表的连接顺序。</p><p><strong>执行器</strong></p><p>开始执行的时候， 要先判断一下你对这个表T有没有执行查询的权限 。如果有权限， 就打开表继续执行。 打开表的时候， 执行器就会根据表的引擎定义， 去使用这个引擎提供的接口。</p><h2 id="02-日志系统：-一条SQL更新语句是如何执行的？"><strong>02 | 日志系统：</strong> <strong>一条SQL更新语句是如何执行的？</strong></h2><p>与查询流程不一样的是， 更新流程还涉及两个重要的日志模块： redo log（重做日志） 和 binlog（归档日志）。 当有一条记录需要更新的时候， InnoDB引擎就会先把记录写到redo log里面， 并更新内存， 这个时候更新就算完成了。然后Server层更新binlog,刷到磁盘。 同时， InnoDB引擎会在适当的时候， 将这个操作记录更新到磁盘里面。</p><p><strong>Redo log</strong></p><p>文中举了《孔乙己》粉板和账本配合的故事，即对应MySQL中的WAL技术，WAL的全称是Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。</p><p>具体来说，当有一条记录需要更新的时候，InnoDB引擎就会先把记录写到redo log（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p><p>这里来介绍下redo log：</p><p>InnoDB的redo log是固定大小的， 比如可以配置为一组4个文件， 每个文件的大小是1GB， 那么这块“粉板”总共就可以记录4GB的操作。 从头开始写， 写到末尾就又回到开头循环写， 如下面这个图所示。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421190252047.png" alt="image-20240421190252047"></p><p>write pos是当前记录的位置， 一边写一边后移， 写到第3号文件末尾后就回到0号文件开头。checkpoint是当前要擦除的位置， 也是往后推移并且循环的， 擦除记录前要把记录更新到数据文件。write pos和checkpoint之间的是“粉板”上还空着的部分， 可以用来记录新的操作。 如果write pos追上checkpoint， 表示“粉板”满了， 这时候不能再执行新的更新， 得停下来先擦掉一些记录， 把checkpoint推进一下。</p><blockquote><p><strong>补充</strong></p></blockquote><p>redo log其实是由两部分组成的，一部分是重做日志缓冲（redo log buffer），这部分是确实存在于内存中的；而另一部分则是重做日志文件（redo log file），这部分是存储在磁盘中的。当事务提交后，所有修改的信息会先存到内存中的重做日志缓冲，然后再被写入到磁盘的重做日志文件中。所以，我们不能简单地说redo log是在内存还是在磁盘，它其实是同时在内存和磁盘中都有存在的部分</p><p><strong>Binlog</strong></p><p>另外一个日志就是Binlog啦，先看看和redo log有啥差异。</p><p><strong>思考</strong>：为啥要有这个binlog日志呢，我认为是用于备份用的，即主从备份，分布式raft那一套。而redo log是用于优化效率用的。</p><p>有以下三点不同</p><ol><li><p>redo log是InnoDB引擎特有的； binlog是MySQL的Server层实现的， 所有引擎都可以使用。</p></li><li><p>redo log是物理日志， 记录的是“在某个数据页上做了什么修改”； binlog是逻辑日志， 记录的是这个语句的原始逻辑， 比如“给ID=2这一行的c字段加1 ”。</p></li><li><p>redo log是循环写的， 空间固定会用完； binlog是可以追加写入的。 “追加写”是指binlog文件写到一定大小后会切换到下一个， 并不会覆盖以前的日志。</p></li></ol><p>接下来，看看下面这条update SQL的执行流程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>执行流程图</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421191135808.png" alt="image-20240421191135808"></p><p>解释：</p><ol><li>执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。</li></ol><p><strong>两阶段提交</strong></p><p>这个两阶段提交在分布式也极为常见的概念，2阶段提交的<strong>2阶段</strong>分别是<strong>提交请求阶段</strong>和<strong>提交执行阶段</strong>。</p><p><strong>怎样让数据库恢复到半个月内任意一秒的状态？</strong></p><ul><li>首先，找到最近的一次全量备份，从这个备份恢复到临时库。</li><li>然后，从备份的时间点开始，将备份的binlog依次取出来，重放到误删表之前的那个时刻。</li></ul><p><strong>为什么需要2阶段提交呢？</strong></p><p>这里通过反证明法说明。</p><p>由于redo log和binlog是两个独立的逻辑， 如果不用两阶段提交， 要么就是先写完redo log再写binlog， 或者采用反过来的顺序。仍然用前面的update语句来做例子。 假设当前ID=2的行， 字段c的值是0， 再假设执行update语句过程中在写完第一个日志后， 第二个日志还没有写完期间发生了crash， 会出现什么情况呢？</p><p><strong>先写redo log后写binlog。</strong> 假设在redo log写完， binlog还没有写完的时候， MySQL进程异常重启。 由redo log写完之后， 系统即使崩溃， 仍然能够把数据恢复回来， 所以恢复后这一行c的值是1。但是由于binlog没写完就crash了， 这时候binlog里面就没有记录这个语句。 因此， 之后备份日志的时候， 存起来的binlog里面就没有这条语句。如果需要用这个binlog来恢复临时库的话，恢复出来的这一行c的值就是0， 与原库的值不同。</p><p><strong>先写binlog后写redo log。</strong> 如果在binlog写完之后crash， 由于redo log还没写， 崩溃恢复以后这个事务无效， 所以这一行c的值是0。 但是binlog里面已经记录了“把c从0改成1”这个日志。 所以， 在之后用binlog来恢复的时候就多了一个事务出来， 恢复出来的这一行c的值就是1， 与原库的值不同。</p><p>简单说， redo log和binlog都可以用于表示事务的提交状态， 而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h2 id="03-事务隔离：-为什么你改了我还看不见？"><strong>03 | 事务隔离：</strong> <strong>为什么你改了我还看不见？</strong></h2><p>简单来说， 事务就是要保证一组数据库操作， 要么全部成功， 要么全部失败。 在MySQL中， <strong>事务支持是在引擎层实现的</strong>。 你现在知道， MySQL是一个支持多引擎的系统， 但并不是所有的引擎都支持事务。 比如MySQL原生的MyISAM引擎就不支持事务， 这也是MyISAM被InnoDB取代的重要原因之一。</p><p><strong>隔离性与隔离级别</strong></p><p>提到事务，脑海里肯定有ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）。这里重点说隔离性。</p><p>当数据库上有多个事务同时执行的时候， 就可能出现脏读（dirtyread） 、 不可重复读（non repeatable read） 、 幻读（ phantom read） 的问题， 为了解决这些问题， 就有了“隔离级别”的概念。SQL标准的事务隔离级别包括： 读未提交（ read uncommitted） 、读提交（read committed） 、 可重复读（ repeatable read） 和串行化（ serializable ） 。</p><ul><li>读未提交是指， 一个事务还没提交时， 它做的变更就能被别的事务看到。</li><li>读提交是指， 一个事务提交之后， 它做的变更才会被其他事务看到。<br>可重复读是指， 一个事务执行过程中看到的数据， 总是跟这个事务在启动时看到的数据是一致的。 当然在可重复读隔离级别下， 未提交变更对其他事务也是不可见的。</li><li>串行化， 顾名思义是对于同一行记录， “写”会加“写锁”， “读”会加“读锁”。 当出现读写锁冲突的时候， 后访问的事务必须等前一个事务执行完成， 才能继续执行。</li></ul><p>假设数据表T中只有一列， 其中一行的值为1， 下面是按照时间顺序执行两个事务的行为。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(c <span class="type">int</span>) engine<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(c) <span class="keyword">values</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421191725626.png" alt="image-20240421191725626"></p><ul><li>若隔离级别是“读未提交”， 则V1的值就是2。 这时候事务B虽然还没有提交， 但是结果已经被A看到了。 因此， V2、 V3也都是2。</li><li>若隔离级别是“读提交”， 则V1是1， V2的值是2。 事务B的更新在提交后才能被A看到。 所以，V3的值也是2。</li><li>若隔离级别是“可重复读”， 则V1、 V2是1， V3是2。 之所以V2还是1， 遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</li><li>若隔离级别是“串行化”， 则在事务B执行“将1改成2”的时候， 会被锁住。 直到事务A提交后，事务B才可以继续执行。 所以从A的角度看， V1、 V2值是1， V3的值是2。</li></ul><p>在实现上， 数据库里面会创建一个视图， 访问的时候以视图的逻辑结果为准。</p><ul><li>在“可重复读”隔离级别下， 这个视图是在事务启动时创建的， 整个事务存在期间都用这个视图。</li><li>在“读提交”隔离级别下， 这个视图是在每个SQL语句开始执行的时候创建的。 这里需要注意的是，</li><li>“读未提交”隔离级别下直接返回记录上的最新值， 没有视图概念。</li><li>“串行化”隔离级别下直接用加锁的方式来避免并行访问。</li></ul><p>Note：Oracle数据库的默认隔离级别是“读提交”，MySQL数据库的默认隔离级别是可重复读。因此，从Oracle迁移到MySQL的应用，为保证数据库隔离级别的一致，一定要将MySQL的隔离级别设置为“读提交”。</p><p><strong>事务隔离的实现</strong></p><p>可重复读 ：在MySQL中， 实际上每条记录在更新的时候都会同时记录一条回滚操作。 记录上的最新值， 通过回滚操作， 都可以得到前一个状态的值。假设一个值从1被按顺序改成了2、 3、 4， 在回滚日志里面就会有类似下面的记录。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192045780.png" alt="image-20240421192045780"></p><p><strong>为什么建议你尽量不要使用长事务</strong></p><ul><li>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</li><li>长事务还占用锁资源，也可能拖垮整个库。</li></ul><p><strong>事务的启动方式</strong></p><ol><li><p>显式启动事务语句， begin 或 start transaction。 配套的提交语句是commit， 回滚语句是rollback。</p></li><li><p>set autocommit=0， 这个命令会将这个线程的自动提交关掉。 意味着如果你只执行一个select语句， 这个事务就启动了， 而且并不会自动提交。 这个事务持续存在直到你主动执行commit 或 rollback 语句， 或者断开连接。因此，建议总是使用set autocommit=1, 通过显式语句的方式来启动事务。</p></li></ol><h2 id="04-深入浅出索引（上）"><strong>04 | 深入浅出索引（上）</strong></h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNjg4OTcyNA==&amp;mid=2247484419&amp;idx=1&amp;sn=534c25b454a48d182849c551e4e063d0&amp;chksm=e8d1b710dfa63e06a7d807c873ee6ce432e2c1b48b82560ccd14ea2ab3e22a2eb26df73ca410&amp;cur_album_id=2138177096085471232&amp;scene=189#wechat_redirect">MySQL索引经典15问！</a></li></ul><p>索引的出现其实就是为了提高数据查询的效率， 就像书的目录一样。</p><p><strong>索引的常见模型</strong></p><p>哈希表、 有序数组和搜索树。</p><p><strong>哈希表</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192109123.png" alt="image-20240421192109123"></p><p>哈希表这种结构适用于只有等值查询的场景。</p><p><strong>有序数组</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192116542.png" alt="image-20240421192116542"></p><p>有序数组在等值查询和范围查询场景中的性能就都非常优秀。但是有序数组索引只适用于静态存储引擎。</p><p><strong>搜索树</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192123739.png" alt="image-20240421192123739"></p><p><strong>InnoDB的索引模型</strong></p><p>InnoDB中， 表都是根据主键顺序以索引的形式存放的， 这种存储方式的表称为索引组织表。又因为前面我们提到的， InnoDB使用了B+树索引模型， 所以数据都是存储在B+树中的。每一个索引在InnoDB里面对应一棵B+树。<br>假设， 我们有一个主键列为ID的表， 表中有字段k， 并且在k上有索引。<br>这个表的建表语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key, </span><br><span class="line">k <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">index (k))engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>表中R1~R5的(ID,k)值分别为(100,1)、 (200,2)、 (300,3)、 (500,5)和(600,6)， 两棵树的示例示意图如下。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192319244.png" alt="image-20240421192319244"></p><p>从图中不难看出， 根据叶子节点的内容， 索引类型分为主键索引和非主键索引。主键索引的叶子节点存的是整行数据。 在InnoDB里， 主键索引也被称为聚簇索引（clustered index） 。非主键索引的叶子节点内容是主键的值。 在InnoDB里， 非主键索引也被称为二级索引（secondaryindex）。</p><p><strong>基于主键索引和普通索引的查询有什么区别？</strong></p><p>如果语句是select * from Twhere ID=500， 即主键查询方式， 则只需要搜索ID这棵B+树；</p><p>如果语句是select * from Twhere k=5， 即普通索引查询方式， 则需要先搜索k索引树， 得到ID的值为500， 再到ID索引树搜索一次。 这个过程称为回表。</p><p><strong>索引维护</strong></p><p>主要是由于页分裂和合并。</p><p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。</p><p>自增主键的插入数据模式，符合递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。</p><p>显然， 主键长度越小， 普通索引的叶子节点就越小， 普通索引占用的空间也就越小。</p><p><strong>如何避免长事务对业务的影响</strong> <strong>？</strong></p><p>首先， 从应用开发端来看：</p><ol><li>确认是否使用了set autocommit=0。 这个确认工作可以在测试环境中开展， 把MySQL的general_log开起来， 然后随便跑一个业务逻辑， 通过general_log的日志来确认。 一般框架如果会设置这个值， 也就会提供参数来控制行为， 你的目标就是把它改成1。</li><li>确认是否有不必要的只读事务。 有些框架会习惯不管什么语句先用begin/commit框起来。 我见过有些是业务并没有这个需要， 但是也把好几个select语句放到了事务中。 这种只读事务可以去掉。</li><li>业务连接数据库的时候， 根据业务本身的预估， 通过SETMAX_EXECUTION_TIME命令，来控制每个语句执行的最长时间， 避免单个语句意外执行太长时间。 （为什么会意外？ 在后续的文章中会提到这类案例）</li></ol><p><strong>其次，</strong> <strong>从数据库端来看</strong></p><ol><li>监控 information_schema.Innodb_trx表， 设置长事务阈值， 超过就报警/或者kill；</li><li>Percona的pt-kill这个工具不错， 推荐使用；</li><li>在业务功能测试阶段要求输出所有的general_log， 分析日志行为提前发现问题；</li><li>如果使用的是MySQL 5.6或者更新版本， 把innodb_undo_tablespaces设置成2（或更大的值） 。 如果真的出现大事务导致回滚段过大， 这样设置后清理起来更方便。</li></ol><h2 id="05-深入浅出索引（下）"><strong>05 | 深入浅出索引（下）</strong></h2><p>执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Twhere k <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>需要执行几次树的搜索操作，会扫描多少行？</p><p>表的初始化语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T (</span><br><span class="line">ID <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">k <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, </span><br><span class="line">s <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">index k(k))</span><br><span class="line">engine<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T <span class="keyword">values</span>(<span class="number">100</span>,<span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>),(<span class="number">200</span>,<span class="number">2</span>,<span class="string">&#x27;bb&#x27;</span>),(<span class="number">300</span>,<span class="number">3</span>,<span class="string">&#x27;cc&#x27;</span>),(<span class="number">500</span>,<span class="number">5</span>,<span class="string">&#x27;ee&#x27;</span>),(<span class="number">600</span>,<span class="number">6</span>,<span class="string">&#x27;ff&#x27;</span>),(<span class="number">700</span>,<span class="number">7</span>,<span class="string">&#x27;gg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192628068.png" alt="image-20240421192628068"></p><p>我们一起来看看这条SQL查询语句的执行流程：</p><ol><li>在k索引树上找到k=3的记录，取得 ID = 300；</li><li>再到ID索引树查到ID=300对应的R3；</li><li>在k索引树取下一个值k=5，取得ID=500；</li><li>再回到ID索引树查到ID=500对应的R4；</li><li>在k索引树取下一个值k=6，不满足条件，循环结束。</li></ol><p>回到主键索引树搜索的过程， 我们称为回表。</p><p><strong>覆盖索引</strong></p><p>由于覆盖索引可以减少树的搜索次数， 显著提升查询性能， 所以使用覆盖索引是一个常用的性能优化手段。</p><p><strong>最左前缀原则</strong></p><p>如果为每一种查询都设计一个索引， 索引是不是太多了。B+树这种索引结构， 可以利用索引的“最左前缀”， 来定位记录。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192809647.png" alt="image-20240421192809647"></p><p>可以看到， 索引项是按照索引定义里面出现的字段顺序排序的。</p><p><strong>索引下推</strong></p><p>什么是索引下推？拿到索引之后根据where条件看看能不能再进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> ismale<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在MySQL 5.6之前， 只能从ID3开始一个个回表。 到主键索引上找出数据行， 再对比字段值。<br>而MySQL 5.6 引入的索引下推优化（indexcondition pushdown)， 可以在索引遍历过程中， 对索引中包含的字段先做判断， 直接过滤掉不满足条件的记录， 减少回表次数。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192816713.png" alt="image-20240421192816713"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192822945.png" alt="image-20240421192822945"></p><p>区别是， InnoDB在(name,age)索引内部就判断了age是否等于10， 对于不等于10的记录， 直接判断并跳过。 在我们的这个例子中， 只需要对ID4、 ID5这两条记录回表取数据判断， 就只需要回表2次。</p><h2 id="06-全局锁和表锁-：-给表加个字段怎么有这么多阻碍？"><strong>06 | 全局锁和表锁</strong> <strong>：</strong> <strong>给表加个字段怎么有这么多阻碍？</strong></h2><p>数据库锁设计的初衷是处理并发问题。</p><p>根据加锁的范围， MySQL里面的锁大致可以分成全局锁、 表级锁和行锁三类。</p><p><strong>全局锁</strong></p><p>当你需要让整个库处于只读状态的时候， 可以使用这个命令， 之后其他线程的以下语句会被阻塞： 数据更新语句（数据的增删改） 、 数据定义语句（包括建表、 修改表结构等） 和更新类事务的提交语句。</p><p><strong>全局锁的典型使用场景是， 做全库逻辑备份。</strong></p><p>但是让整库都只读， 听上去就很危险：<br>如果你在主库上备份， 那么在备份期间都不能执行更新， 业务基本上就得停摆；<br>如果你在从库上备份， 那么备份期间从库不能执行主库同步过来的binlog， 会导致主从延迟 。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421192903605.png" alt="image-20240421192903605"></p><p>这个备份结果里， 用户A的数据状态是“账户余额没扣， 但是用户课程表里面已经多了一门课”。 如果后面用这个备份来恢复数据的话， 用户A就发现， 自己赚了。但是，如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果【狗头】。</p><p>官方自带的逻辑备份工具是mysqldump。当mysqldump使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。</p><p><strong>表级锁</strong></p><p>MySQL里面表级别的锁有两种： 一种是表锁， 一种是元数据锁（meta data lock， MDL) 。</p><p>表锁的语法是 lock tables …read/write。举个例子, 如果在某个线程A中执行lock tables t1 read, t2 write; 这个语句， 则其他线程写t1、 读写t2的语句都会被阻塞。 同时， 线程A在执行unlock tables之前， 也只能执行读t1、 读写t2的操作。 连写t1都不允许， 自然也不能访问其他表。</p><p>另一类表级的锁是MDL（ metadata lock)。 MDL不需要显式使用， 在访问一个表的时候会被自动加上。 MDL的作用是， 保证读写的正确性。 你可以想象一下， 如果一个查询正在遍历一个表中的数据， 而执行期间另一个线程对这个表结构做变更， 删了一列， 那么查询线程拿到的结果跟表结构对不上， 肯定是不行的。</p><p>MDL读锁之间不互斥， 因此你可以有多个线程同时对一张表增删改查。</p><p>读写锁之间、 写锁之间是互斥的， 用来保证变更表结构操作的安全性。</p><p>因此， 如果有两个线程要同时给一个表加字段， 其中一个要等另一个执行完才能开始执行。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421193106335.png" alt="image-20240421193106335"></p><ol><li>session A先启动，对表t加一个MDL读锁。</li><li>由于session B需要的也是MDL读锁。</li><li>session C会被blocked，是因为session A的MDL读锁还没有释放，而session C需要MDL写锁，因此只能被阻塞。</li><li>问题来了，之后所有要在表t上新申请MDL读锁的请求也会被session C阻塞。等于这个表现在完全不可读写了。</li></ol><p>上面的例子如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新session再请求的话，这个库的线程很快就会爆满。</p><p><strong>事务中的MDL锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</strong></p><p><strong>pro1:如何安全地给小表加字段？</strong></p><p>**solution1:**首先我们要解决长事务，事务不提交，就会一直占着MDL锁。在MySQL的information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做DDL变更的表刚好有长事务在执行，要考虑先暂停DDL，或者kill掉这个长事务。</p><p><strong>pro2:你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？</strong></p><p>这时候kill可能未必管用，因为新的请求马上就来了。比较理想的机制是，在alter table语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到MDL写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者DBA再通过重试命令重复这个过程。</p><h2 id="07-行锁功过：-怎么减少行锁对性能的影响？"><strong>07 | 行锁功过：</strong> <strong>怎么减少行锁对性能的影响？</strong></h2><p>MySQL的行锁是在引擎层由各个引擎自己实现的。 但并不是所有的引擎都支持行锁。 InnoDB是支持行锁的。MyISAM引擎就不支持行锁。</p><p><strong>从两阶段锁说起</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194317901.png" alt="image-20240421194317901"></p><p>实际上事务B的update语句会被阻塞， 直到事务A执行commit之后， 事务B才能继续执行。 在InnoDB事务中， 行锁是在需要的时候才加上的， 但并不是不需要了就立刻释放， 而是要等到事务结束时才释放。 这个就是两阶段锁协议。</p><p><strong>在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</strong></p><p><strong>结论</strong>：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p><p><strong>死锁和死锁检测</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194324791.png" alt="image-20240421194324791"></p><p>这时候， 事务A在等待事务B释放id=2的行锁， 而事务B在等待事务A释放id=1的行锁。 事务A和事务B在互相等待对方的资源释放， 就是进入了死锁状态。</p><p>当出现死锁以后， 有两种策略：</p><ul><li>一种策略是， 直接进入等待， 直到超时。 这个超时时间可以通过参数innodb_lock_wait_timeout来设置。<ul><li>在InnoDB中，innodb_lock_wait_timeout的默认值是50s。意味着当出现死锁以后，第一个被锁住的线程要过50s才会超时退出，然后其他线程才有可能继续执行。如果我们把这个时间设置成一个很小的值，比如1s，会伤害到普通的锁等待。</li></ul></li><li>另一种策略是， 发起死锁检测， 发现死锁后， 主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。 将参数innodb_deadlock_detect设置为on， 表示开启这个逻辑。</li></ul><p>背景：</p><p>每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p><p>那如果是我们上面说到的所有事务都要更新同一行的场景呢？</p><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是O(n)的操作。假设有1000个并发线程要同时更新同一行，那么死锁检测操作就是100万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的CPU资源。因此，你就会看到CPU利用率很高，但是每秒却执行不了几个事务。</p><p>根据上面的分析，我们来讨论一下，怎么解决由这种热点行更新导致的性能问题呢？</p><p>问题：</p><p>问题的关键在于死锁检测要耗费大量的CPU资源。</p><p>解决方法：</p><ol><li>如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。</li><li>控制并发度。比如同一行同时最多只有10个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。</li></ol><h2 id="08-事务到底是隔离的还是不隔离的？"><strong>08 | 事务到底是隔离的还是不隔离的？</strong></h2><p>这部分主要是MVCC原理，可以到B站上学习下。</p><p>网上看到不错的作图，贴在这里啦~</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194150016.png" alt="image-20240421194150016"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194201861.png" alt="image-20240421194201861"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194212043.png" alt="image-20240421194212043"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194233781.png" alt="image-20240421194233781"></p><p><a href="https://www.processon.com/view/link/65eaae60eaba490be1941ae3">https://www.processon.com/view/link/65eaae60eaba490be1941ae3</a></p><p>好文推荐</p><ul><li><a href="https://mp.weixin.qq.com/s/yyMI3uPvovEr1EgndGro5g">看一遍就懂：MVCC原理详解</a></li></ul><p>如果是可重复读隔离级别， 事务T启动的时候会创建一个视图read-view， 之后事务T执行期间， 即使有其他事务修改了数据， 事务T看到的仍然跟在启动时看到的一样。</p><p>begin/start transaction 命令并不是一个事务的起点， 在执行到它们之后的第一个操作InnoDB表的语句， 事务才真正启动。 如果你想要马上启动一个事务， 可以使用start transaction withconsistent snapshot 这个命令。</p><p>在MySQL里， 有两个“视图”的概念：一个是view。 它是一个用查询语句定义的虚拟表， 在调用的时候执行查询语句并生成结果。创建视图的语法是create view …， 而它的查询方法与表一样。另一个是InnoDB在实现MVCC时用到的一致性读视图， 即consistent read view， 用于支持RC（Read Committed， 读提交） 和RR（ Repeatable Read， 可重复读） 隔离级别的实现。</p><p><strong>“快照”在MVCC里是怎么工作的？</strong></p><p>InnoDB里面每个事务有一个唯一的事务ID， 叫作transaction id。 它是在事务开始的时候向InnoDB的事务系统申请的， 是按申请顺序严格递增的。而每行数据也都是有多个版本的。 每次事务更新数据的时候， 都会生成一个新的数据版本， 并且把transaction id赋值给这个数据版本的事务ID， 记为row trx_id。 同时， 旧的数据版本要保留，并且在新的数据版本中， 能够有信息可以直接拿到它。也就是说， 数据表中的一行记录， 其实可能有多个版本(row)， 每个版本有自己的row trx_id。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194335011.png" alt="image-20240421194335011"></p><p>实际上， 图2中的三个虚线箭头， 就是undo log； 而V1、 V2、 V3并不是物理上真实存在的， 而是每次需要的时候根据当前版本和undo log计算出来的。 比如， 需要V2的时候， 就是通过V4依次执行U3、 U2算出来。</p><p>InnoDB为每个事务构造了一个数组， 用来保存这个事务启动瞬间， 当前正在“活跃”的所有事务ID。 “活跃”指的就是， 启动了但还没提交。</p><p>更新数据都是先读后写的， 而这个读， 只能读当前的值， 称为“当前读”（ current read） 。</p><p>InnoDB的行数据有多个版本， 每个数据版本有自己的row trx_id， 每个事务或者语句有自己的一致性视图。 普通查询语句是一致性读， 一致性读会根据row trx_id和一致性视图确定数据版本的可见性。</p><p>￮ 对于可重复读， 查询只承认在事务启动前就已经提交完成的数据；</p><p>￮ 对于读提交， 查询只承认在语句启动前就已经提交完成的数据；</p><p>￮ 而当前读， 总是读取已经提交完成的最新版本。</p><h2 id="09-普通索引和唯一索引，-应该怎么选择？"><strong>09 | 普通索引和唯一索引，</strong> <strong>应该怎么选择？</strong></h2><p>从性能的角度考虑， 你选择唯一索引还是普通索引呢？ 选择的依据是什么呢？</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421194340923.png" alt="image-20240421194340923"></p><p><strong>查询过程</strong></p><p>假设，执行查询的语句是 select id from T where k=5。这个查询语句在索引树上查找的过程，先是通过B+树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录(5,500)后，需要查找下一个记录，直到碰到第一个不满足k=5条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><p>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</p><p>InnoDB的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在InnoDB中，每个数据页的大小默认是16KB。</p><p>因为引擎是按页读写的，所以说，当找到k=5的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p><strong>更新过程</strong></p><p>先介绍一下change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB会将这些更新操作缓存在change buffer中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行change buffer中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>虽然名字叫作change buffer，实际上它是可以持久化的数据。也就是说，change buffer在内存中有拷贝，也会被写入到磁盘上。</p><p>将change buffer中的操作应用到原数据页，得到最新结果的过程称为merge。除了访问这个数据页会触发merge外，系统有后台线程会定期merge。在数据库正常关闭（shutdown）的过程中，也会执行merge操作。</p><p><strong>pro</strong>:什么条件下可以使用change buffer呢？</p><p><strong>ans</strong>：唯一索引的更新就不能使用change buffer，实际上也只有普通索引可以使用。</p><p>介绍完change buffer,来说说更新过程，分为2个case。</p><p>第一种情况是，<strong>这个记录要更新的目标页在内存中</strong>。这时，InnoDB的处理流程如下：</p><ul><li>对于唯一索引来说，找到3和5之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到3和5之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的CPU时间。</p><p>第二种情况是，<strong>这个记录要更新的目标页不在内存中</strong>。这时，InnoDB的处理流程如下：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，则是将更新记录在change buffer，语句执行就结束了。</li></ul><p>将数据从磁盘读入内存涉及随机IO的访问，是数据库里面成本最高的操作之一。change buffer因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p><strong>change buffer使用场景</strong></p><p>先来一个问题：普通索引的所有场景，使用change buffer都可以起到加速作用吗？</p><p>心中有个最初的原则：change buffer的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做merge之前，change buffer记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p><p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时change buffer的使用效果最好。</p><p>有好的场景当然也有不好的场景。</p><p>不好的场景就是假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在change buffer，但之后由于马上要访问这个数据页，会立即触发merge过程。这样随机访问IO的次数不会减少，反而增加了change buffer的维护代价。所以，对于这种业务模式来说，change buffer反而起到了副作用。</p><p><strong>索引选择和实践</strong></p><p>普通索引和唯一索引应该怎么选择。其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，建议你尽量选择普通索引</p><p>如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭change buffer。而在其他情况下，change buffer都能提升更新性能。</p><p><strong>change buffer 和 redo log</strong></p><p>接下来其实主要就是区分redo log和change buffer。</p><p>现在，我们要在表上执行这个插入语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t(id,k) <span class="keyword">values</span>(id1,k1),(id2,k2);</span><br></pre></td></tr></table></figure><p>这里，我们假设当前k索引树的状态，查找到位置后，k1所在的数据页在内存(InnoDB buffer pool)中，k2所在的数据页不在内存中。如图2所示是带change buffer的更新状态图。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421195152846.png" alt="image-20240421195152846"></p><p>分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。</p><p>这条更新语句做了如下的操作（按照图中的数字顺序）：</p><ol><li>Page 1在内存中，直接更新内存；</li><li>Page 2没有在内存中，就在内存的change buffer区域，记录下“我要往Page 2插入一行”这个信息</li><li>将上述两个动作记入redo log中（图中3和4）。</li></ol><p>做完上面这些，事务就可以完成了。所以，你会看到，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。</p><p>同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。</p><p>现在要执行 select * from t where k in (k1, k2)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421195257043.png" alt="image-20240421195257043"></p><ol><li>读Page 1的时候，直接从内存返回。有几位同学在前面文章的评论中问到，WAL之后如果读数据，是不是一定要读盘，是不是一定要从redo log里面把数据更新以后才可以返回？其实是不用的。你可以看一下图3的这个状态，虽然磁盘上还是之前的数据，但是这里直接从内存返回结果，结果是正确的。</li><li>要读Page 2的时候，需要把Page 2从磁盘读入内存中，然后应用change buffer里面的操作日志，生成一个正确的版本并返回结果。</li></ol><p>可以看到，直到需要读Page 2的时候，这个数据页才会被读入内存。</p><p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的IO消耗（转成顺序写），而change buffer主要节省的则是随机读磁盘的IO消耗。</strong></p><p>**来个问题：**如果某次写入使用了change buffer机制，之后主机异常重启，是否会丢失change buffer和数据。</p><p>这个问题的答案是不会丢失。虽然是只更新内存，但是在事务提交的时候，我们把change buffer的操作也记录到redo log里了，所以崩溃恢复的时候，change buffer也能找回来。</p><h2 id="10-MySQL为什么有时候会选错索引？"><strong>10 | MySQL为什么有时候会选错索引？</strong></h2><p>【优化器工作原理】</p><p>一种方法是， 像我们第一个例子一样， 采用force index强行选择一个索引。</p><p>第二种方法就是， 我们可以考虑修改 语句， 引导MySQL使用我们期望的索引。 比如， 在这个例子里， 显然把“order byb limit 1” 改成 “order byb,a limit 1” ， 语义的逻辑是相同的。</p><p>第三种方法是， 在有些场景下， 我们可以新建一个更合适的索引， 来提供给优化器做选择， 或删掉误用的索引。</p><h2 id="11-怎么给字符串字段加索引？"><strong>11 | 怎么给字符串字段加索引？</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> SUser <span class="keyword">add</span> index index1(email);</span><br><span class="line">或</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> SUser <span class="keyword">add</span> index index2(email(<span class="number">6</span>));</span><br></pre></td></tr></table></figure><p>第一个语句创建的index1索引里面， 包含了每个记录的整个字符串； 而第二个语句创建的index2索引里面， 对于每个记录都是只取前6个字节。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421195513438.png" alt="image-20240421195513438"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421195518185.png" alt="image-20240421195518185"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;zhangssxyz@xxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>如果使用的是index1</strong>（即email整个字符串的索引结构），执行顺序是这样的：</p><ol><li>从index1索引树找到满足索引值是’zhangssxyz@xxx.com’的这条记录，取得ID2的值；</li><li>到主键上查到主键值是ID2的行，判断email的值是正确的，将这行记录加入结果集；</li><li>取index1索引树上刚刚查到的位置的下一条记录，发现已经不满足email='zhangssxyz@xxx.com’的条件了，循环结束。</li></ol><p>这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</p><p><strong>如果使用的是index2</strong>（即email(6)索引结构），执行顺序是这样的：</p><ol><li>从index2索引树找到满足索引值是’zhangs’的记录，找到的第一个是ID1；</li><li>到主键上查到主键值是ID1的行，判断出email的值不是’zhangssxyz@xxx.com’，这行记录丢弃；</li><li>取index2上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出ID2，再到ID索引上取整行然后判断，这次值对了，将这行记录加入结果集；</li><li>重复上一步，直到在idxe2上取到的值不是’zhangs’时，循环结束。</li></ol><p>在这个过程中，要回主键索引取4次数据，也就是扫描了4行。</p><p>通过这个对比，你很容易就可以发现，使用前缀索引后，可能会导致查询语句读数据的次数变多。</p><p><strong>结论：使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong></p><p>来个问题：当要给字符串创建前缀索引时，有什么方法能够确定我应该使用多长的前缀呢？</p><p>实际上，我们在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。因此，我们可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</p><p>常用方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email) <span class="keyword">as</span> L <span class="keyword">from</span> SUser;</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> </span><br><span class="line">  <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">4</span>)）<span class="keyword">as</span> L4,</span><br><span class="line">  <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">5</span>)）<span class="keyword">as</span> L5,</span><br><span class="line">  <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">6</span>)）<span class="keyword">as</span> L6,</span><br><span class="line">  <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">7</span>)）<span class="keyword">as</span> L7,</span><br><span class="line"><span class="keyword">from</span> SUser;</span><br></pre></td></tr></table></figure><p><strong>前缀索引对覆盖索引的影响</strong></p><p>先来看看这个SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,email <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;zhangssxyz@xxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p>与前面例子中的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;zhangssxyz@xxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果使用index1（即email整个字符串的索引结构）的话，可以利用覆盖索引，从index1查到结果后直接就返回了，不需要回到ID索引再去查一次。而如果使用index2（即email(6)索引结构）的话，就不得不回到ID索引再去判断email字段的值。</p><p>即使你将index2的定义修改为email(18)的前缀索引，这时候虽然index2已经包含了所有的信息，但InnoDB还是要回到id索引再查一下，因为系统并不确定前缀索引的定义是否截断了完整信息。</p><p><strong>使用前缀索引就用不上覆盖索引对查询性能的优化</strong>了， 这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p><p><strong>其他方式</strong></p><p>第一种方式是使用倒序存储。</p><p>第二种方式是使用hash字段。</p><p>首先， 它们的相同点是， 都不支持范围查询。 倒序存储的字段上创建的索引是按照倒序字符串的方式排序的， 已经没有办法利用索引方式查出身份证号码在[ID_X, ID_Y]的所有市民了。 同样地， hash字段的方式也只能支持等值查询。</p><p>它们的区别， 主要体现在以下三个方面：</p><ol><li>从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而hash字段方法需要增加一个字段。当然，倒序存储方式使用4个字节的前缀长度应该是不够的，如果再长一点，这个消耗跟额外这个hash字段也差不多抵消了。</li><li>在CPU消耗方面，倒序方式每次写和读的时候，都需要额外调用一次reverse函数，而hash字段的方式需要额外调用一次crc32()函数。如果只从这两个函数的计算复杂度来看的话，reverse函数额外消耗的CPU资源会更小些。</li><li>从查询效率上看，使用hash字段方式的查询性能相对更稳定一些。因为crc32算出来的值虽然有冲突的概率，但是概率非常小，可以认为每次查询的平均扫描行数接近1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</li></ol><p><strong>总结</strong></p><ol><li>直接创建完整索引，这样可能比较占用空间；</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；</li><li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。</li></ol><h2 id="12-为什么我的MySQL会“抖”一下？"><strong>12 | 为什么我的MySQL会“抖”一下？</strong></h2><p>【数据库代码】</p><p>当内存数据页跟磁盘数据页内容不一致的时候， 我们称这个内存页为“脏页”。 内存数据写入到磁盘后， 内存和磁盘上的数据页的内容就一致了， 称为“干净页”。</p><p>什么时候flush？</p><p>1：是InnoDB的redo log写满了。 这时候系统会停止所有更新操作， 把:checkpoint往前推进， redo log留出空间可以继续写。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421195941651.png" alt="image-20240421195941651"></p><p>checkpoint可不是随便往前修改一下位置就可以的。 比如图中， 把checkpoint位置从CP推进到CP’， 就需要将两个点之间的日志（浅绿色部分） ， 对应的所有脏页都flush到磁盘上。 之后， 图中从write pos到CP’之间就是可以再写入的redo log的区域。</p><p>2：系统内存不足。 当需要新的内存页， 而内存不够用的时候， 就要淘汰一些数据页， 空出内存给别的数据页使用。 如果淘汰的是“脏页”， 就要先将脏页写到磁盘。</p><p>3：MySQL认为系统“空闲”的时候。</p><p>4：MySQL正常关闭的情况。 这时候， MySQL会把内存的脏页都flush到磁盘上， 这样下次MySQL启动的时候， 就可以直接从磁盘上读数据， 启动速度会很快。</p><p>第一种是“redo log写满了， 要flush脏页”， 这种情况是InnoDB要尽量避免的。 因为出现这种情况的时候， 整个系统就不能再接受更新了， 所有的更新都必须堵住。</p><p>第二种是“内存不够用了， 要先将脏页写到磁盘”， 这种情况其实是常态。InnoDB用缓冲池（ buffer pool） 管理内存， 缓冲池中的内存页有三种状态：第一种是， 还没有使用的；第二种是， 使用了并且是干净页；第三种是， 使用了并且是脏页。</p><p>InnoDB的刷盘速度就是要参考这两个因素： 一个是脏页比例， 一个是redo log写盘速度。 InnoDB会根据这两个因素先单独算出两个数字。</p><p>InnoDB每次写入的日志都有一个序号， 当前写入的序号跟checkpoint对应的序号之间的差值，我们假设为N。 InnoDB会根据这个N算出一个范围在0到100之间的数字， 这个计算公式可以记为F2(N)。 F2(N)算法比较复杂， 你只要知道N越大， 算出来的值越大就好了。然后， 根据上述算得的F1(M)和F2(N)两个值， 取其中较大的值记为R， 之后引擎就可以按照innodb_io_capacity定义的能力乘以R%来控制刷脏页的速度。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421195954851.png" alt="image-20240421195954851"></p><p>现在你知道了， InnoDB会在后台刷脏页， 而刷脏页的过程是要将内存页写入磁盘。 所以， 无论是你的查询语句在需要内存的时候可能要求淘汰一个脏页， 还是由于刷脏页的逻辑会占用IO资源并可能影响到了你的更新语句</p><p>而MySQL中的一个机制， 可能让你的查询会更慢： 在准备刷一个脏页的时候， 如果这个数据页旁边的数据页刚好是脏页， 就会把这个“邻居”也带着一起刷掉； 而且这个把“邻居”拖下水的逻辑还可以继续蔓延， 也就是对于每个邻居数据页， 如果跟它相邻的数据页也还是脏页的话， 也会被放到一起刷</p><h2 id="13-为什么表数据删掉一半，-表文件大小不变？"><strong>13 | 为什么表数据删掉一半，</strong> <strong>表文件大小不变？</strong></h2><p>【B+树代码】</p><p>InnoDB引擎只会把R4这个记录标记为删除。 如果之后要再插入一个ID在300和600之间的记录时， 可能会复用这个位置。 但是， 磁盘文件的大小并不会缩小。</p><p>delete命令其实只是把记录的位置， 或者数据页标记为了“可复用”， 但磁盘文件的大小是不会变的。 也就是说， 通过delete命令是不能回收表空间的。 这些可以复用， 而没有被使用的空间， 看起来就像是“空洞”。</p><p>不止是删除数据会造成空洞， 插入数据也会。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200036775.png" alt="image-20240421200036775"></p><p>page A满了， 再插入一个ID是550的数据时， 就不得不再申请一个新的页面page B来保存数据了。 页分裂完成后， page A的末尾就留下了空洞（注意： 实际上， 可能不止1个记录的位置是空洞） 。</p><p><strong>重建表</strong></p><p>你可以新建一个与表A结构相同的表B， 然后按照主键ID递增的顺序， 把数据一行一行地从表A里读出来再插入到表B中。由于表B是新建的表， 所以表A主键索引上的空洞， 在表B中就都不存在了。 显然地， 表B的主键索引更紧凑， 数据页的利用率也更高。 如果我们把表B作为临时表， 数据从表A导入表B的操作完成后， 用表B替换A，从效果上看， 就起到了收缩表A空间的作用。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200044232.png" alt="image-20240421200044232"></p><p>引入了Online DDL之后， 重建表的流程：</p><ol><li>建立一个临时文件，扫描表A主键的所有数据页；</li><li>用数据页中表A的记录生成B+树，存储到临时文件中；</li><li>生成临时文件的过程中，将所有对A的操作记录在一个日志文件（row log）中，对应的是图中state2的状态；</li><li>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表A相同的数据文件，对应的就是图中state3的状态；</li><li>用临时文件替换表A的数据文件。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200108974.png" alt="image-20240421200108974"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200122892.png" alt="image-20240421200122892"></p><h2 id="14-count-这么慢，-我该怎么办？"><strong>14 | count(*)这么慢，</strong> <strong>我该怎么办？</strong></h2><p>【不同引擎工作以及常见count】</p><p><strong>count(*)的实现方式</strong></p><p>在不同的MySQL引擎中， count( * )有不同的实现方式。</p><ul><li>MyISAM引擎把一个表的总行数存在了磁盘上， 因此执行count( * )的时候会直接返回这个数，效率很高</li><li>InnoDB引擎就麻烦了， 它执行count(*)的时候， 需要把数据一行一行地从引擎里面读出来， 然后累积计数</li></ul><p>那为什么InnoDB不跟MyISAM一样， 也把数字存起来呢？ <strong>这是因为即使是在同一个时刻的多个查询， 由于多版本并发控制（MVCC） 的原因</strong>， InnoDB表“应该返回多少行”也是不确定的。 这里， 我用一个算count(*)的例子来为你解释一下。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200223518.png" alt="image-20240421200223518"></p><p>这和InnoDB的事务设计有关系， 可重复读是它默认的隔离级别， 在代码上就是通过多版本并发控制， 也就是MVCC来实现的。 每一行记录都要判断自己是否对这个会话可见， 因此对于count(*)请求来说， InnoDB只好把数据一行一行地读出依次判断， 可见的行才能够用于计算“基于这个查询”的表的总行数。</p><p><strong>不同的count用法</strong></p><p><strong>对于count(主键id)来说</strong>，InnoDB引擎会遍历整张表，把每一行的id值都取出来，返回给server层。server层拿到id后，判断是不可能为空的，就按行累加。</p><p><strong>对于count(1)来说</strong>，InnoDB引擎遍历整张表，但不取值。server层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p><strong>对于count(字段)来说</strong>：</p><ol><li>如果这个“字段”是定义为not null的话，一行行地从记录里面读出这个字段，判断不能为null，按行累加；</li><li>如果这个“字段”定义允许为null，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是null才累加。</li></ol><p><strong>但是count(*)是例外</strong>，并不会把全部字段取出来，而是专门做了优化，不取值。count(*)肯定不是null，按行累加。</p><p><strong>结论是</strong>：按照效率排序的话，count(字段)&lt;count(主键id)&lt;count(1)≈count(<em>)，所以我建议你，尽量使用count(</em>)。</p><h2 id="15-答疑文章（一）-：-日志和索引相关问题"><strong>15 | 答疑文章（一）</strong> <strong>：</strong> <strong>日志和索引相关问题</strong></h2><p>这个部分好好看看平台文章。</p><p><strong>日志相关问题</strong></p><p><strong>在两阶段提交的不同瞬间，MySQL如果发生异常重启，是怎么保证数据完整性的？</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200445846.png" alt="image-20240421200445846"></p><p>崩溃恢复时的判断规则。</p><ol><li>如果redo log里面的事务是完整的，也就是已经有了commit标识，则直接提交；</li><li>如果redo log里面的事务只有完整的prepare，则判断对应的事务binlog是否存在并完整：<br>a. 如果是，则提交事务；<br>b. 否则，回滚事务。</li></ol><p><strong>MySQL怎么知道binlog是完整的?</strong></p><p>回答：一个事务的binlog是有完整格式的：</p><ul><li>statement格式的binlog，最后会有COMMIT；</li><li>row格式的binlog，最后会有一个XID event。</li></ul><p>另外，在MySQL 5.6.2版本以后，还引入了binlog-checksum参数，用来验证binlog内容的正确性。对于binlog日志由于磁盘原因，可能会在日志中间出错的情况，MySQL可以通过校验checksum的结果来发现。所以，MySQL还是有办法验证事务binlog的完整性的。</p><p><strong>redo log 和 binlog是怎么关联起来的?</strong></p><p>回答： 它们有一个共同的数据字段， 叫XID。 崩溃恢复的时候， 会按顺序扫描redo log：<br>如果碰到既有prepare、 又有commit的redo log， 就直接提交；<br>如果碰到只有parepare、 而没有commit的redo log， 就拿着XID去binlog找对应的事务。</p><p><strong>redo log一般设置多大？</strong></p><p>redo log太小的话， 会导致很快就被写满， 然后不得不强行刷redo log， 这样WAL机制的能力就发挥不出来了。所以， 如果是现在常见的几个TB的磁盘的话， 就不要太小气了， 直接将redo log设置为4个文件、 每个文件1GB吧。</p><p><strong>redo log buffer是什么？是先修改内存，还是先写redo log文件？</strong></p><p>在一个事务的更新过程中，日志是要写多次的。比如下面这个事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 ...</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 ...</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>这个事务要往两个表中插入记录，插入数据的过程中，生成的日志都得先保存起来，但又不能在还没commit的时候就直接写到redo log文件里。</p><p>所以，redo log buffer就是一块内存，用来先存redo日志的。也就是说，在执行第一个insert的时候，数据的内存被修改了，redo log buffer也写入了日志。</p><p>但是，真正把日志写到redo log文件（文件名是 ib_logfile+数字），是在执行commit语句的时候做的。</p><h2 id="16-“order-by”是怎么工作的？"><strong>16 | “order by”是怎么工作的？</strong></h2><p>【流程及其优化】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> city,name,age <span class="keyword">from</span> t <span class="keyword">where</span> city<span class="operator">=</span><span class="string">&#x27;杭州&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> name limit <span class="number">1000</span>  ;</span><br></pre></td></tr></table></figure><p><strong>全字段排序</strong></p><p>为避免全表扫描， 我们需要在city字段加上索引。在city字段上创建索引之后， 我们用explain命令来看看这个语句的执行情况。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200729385.png" alt="image-20240421200729385"></p><p>Extra这个字段中的“Using filesort”表示的就是需要排序，MySQL会给每个线程分配一块内存用于排序，称为sort_buffer。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200739061.png" alt="image-20240421200739061"></p><p>通常情况下，这个语句执行流程如下所示 ：</p><ol><li>初始化sort_buffer，确定放入name、city、age这三个字段；</li><li>从索引city找到第一个满足city='杭州’条件的主键id，也就是图中的ID_X；</li><li>到主键id索引取出整行，取name、city、age三个字段的值，存入sort_buffer中；</li><li>从索引city取下一个记录的主键id；</li><li>重复步骤3、4直到city的值不满足查询条件为止，对应的主键id也就是图中的ID_Y；</li><li>对sort_buffer中的数据按照字段name做快速排序；</li><li>按照排序结果取前1000行返回给客户端。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421200817067.png" alt="image-20240421200817067"></p><p><strong>这里，我们要熟悉OPTIMIZER_TRACE命，explain以及慢查询查看结果。</strong></p><p><strong>rowid排序</strong></p><p>新的算法放入sort_buffer的字段， 只有要排序的列（ 即name字段） 和主键id。但这时， 排序的结果就因为少了city和age字段的值， 不能直接返回了， 整个执行流程就变成如<br>下所示的样子：</p><ol><li>初始化sort_buffer，确定放入两个字段，即name和id；</li><li>从索引city找到第一个满足city='杭州’条件的主键id，也就是图中的ID_X；</li><li>到主键id索引取出整行，取name、id这两个字段，存入sort_buffer中；</li><li>从索引city取下一个记录的主键id；</li><li>重复步骤3、4直到不满足city='杭州’条件为止，也就是图中的ID_Y；</li><li>对sort_buffer中的数据按照字段name进行排序；</li><li>遍历排序结果，取前1000行，并按照id的值回到原表中取出city、name和age三个字段返回给客户端。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201012251.png" alt="image-20240421201012251"></p><p><strong>全字段排序 VS rowid排序</strong></p><p>使用索引优化从而优化排序。</p><h2 id="17-如何正确地显示随机消息？"><strong>17 | 如何正确地显示随机消息？</strong></h2><p>【学习SQL执行过程】</p><p><strong>背景</strong></p><p>这个英语学习App首页有一个随机显示单词的功能，也就是根据每个用户的级别有一个单词表，然后这个用户每次访问首页的时候，都会随机滚动显示三个单词。他们发现随着单词表变大，选单词这个逻辑变得越来越慢，甚至影响到了首页的打开速度。</p><p>现在对这个例子进行了简化：去掉每个级别的用户都有一个对应的单词表这个逻辑，直接就是从一个单词表中随机选出三个单词。</p><p><strong>内存临时表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> word <span class="keyword">from</span> words <span class="keyword">order</span> <span class="keyword">by</span> rand() limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这个语句的意思很直白，随机排序取前3个。使用explain命令来看看这个语句的执行情况。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201253209.png" alt="image-20240421201253209"></p><p>对于内存表， 回表过程只是简单地根据数据行的位置， 直接访问内存得到数据， 根本不会导致多访问磁盘。</p><p>这条语句的执行流程是这样的：</p><ol><li>创建一个临时表。这个临时表使用的是memory引擎，表里有两个字段，第一个字段是double类型，为了后面描述方便，记为字段R，第二个字段是varchar(64)类型，记为字段W。并且，这个表没有建索引。</li><li>从words表中，按主键顺序取出所有的word值。对于每一个word值，调用rand()函数生成一个大于0小于1的随机小数，并把这个随机小数和word分别存入临时表的R和W字段中，到此，扫描行数是10000。</li><li>现在临时表有10000行数据了，接下来你要在这个没有索引的内存临时表上，按照字段R排序。</li><li>初始化 sort_buffer。sort_buffer中有两个字段，一个是double类型，另一个是整型。</li><li>从内存临时表中一行一行地取出R值和位置信息（我后面会和你解释这里为什么是“位置信息”），分别存入sort_buffer中的两个字段里。这个过程要对内存临时表做全表扫描，此时扫描行数增加10000，变成了20000。</li><li>在sort_buffer中根据R的值进行排序。注意，这个过程没有涉及到表操作，所以不会增加扫描行数。</li><li>排序完成后，取出前三个结果的位置信息，依次到内存临时表中取出word值，返回给客户端。这个过程中，访问了表的三行数据，总扫描行数变成了20003。</li></ol><p>接下来，我们通过慢查询日志（slow log）来验证一下我们分析得到的扫描行数是否正确。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Query_time: <span class="number">0.900376</span>  Lock_time: <span class="number">0.000347</span> Rows_sent: <span class="number">3</span> Rows_examined: <span class="number">20003</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">timestamp</span><span class="operator">=</span><span class="number">1541402277</span>;</span><br><span class="line"><span class="keyword">select</span> word <span class="keyword">from</span> words <span class="keyword">order</span> <span class="keyword">by</span> rand() limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>其中，Rows_examined：20003就表示这个语句执行过程中扫描了20003行，也就验证了我们分析得出的结论。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201352186.png" alt="image-20240421201352186"></p><p><strong>总结：order by rand()使用了内存临时表，内存临时表排序的时候使用了rowid排序方法。</strong></p><p>MySQL的表是用什么方法来定位“一行数据”的。 如果你创建的表没有主键， 或者把一个表的主键删掉了， 那么InnoDB会自己生成一个长度为6字节的rowid来作为主键</p><h2 id="18-为什么这些SQL语句逻辑相同，-性能却差异巨大？"><strong>18 | 为什么这些SQL语句逻辑相同，</strong> <strong>性能却差异巨大？</strong></h2><p>【索引失效】</p><p>案例一： 条件字段函数操作</p><p>对索引字段做函数操作， 可能会破坏索引值的有序性， 因此优化器就决定放弃走树搜索功能。</p><p>案例二： 隐式类型转换</p><p>数据类型转换的规则是什么？<br>为什么有数据类型转换， 就需要走全索引扫描？</p><p>在MySQL中， 字符串和数字做比较的话， 是将字符串转换成数字</p><p>案例三： 隐式字符编码转换</p><p>其实是在说同一件事儿， 即： 对索引字段做函数操作， 可能会破坏索引值的有序性， 因此优化器就决定放弃走树搜索功能。</p><h2 id="19-为什么我只查一行的语句，-也执行这么慢？"><strong>19 | 为什么我只查一行的语句，</strong> <strong>也执行这么慢？</strong></h2><p>【锁住了or长事务】</p><p>套路：分析问题，验证问题，解决问题。</p><p>有些情况下， “查一行”， 也会执行得特别慢。</p><p><strong>第一类：</strong> <strong>查询长时间不返回</strong></p><p>如图1所示， 在表t执行下面的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>查询结果长时间不返回。一般碰到这种情况的话， 大概率是表t被锁住了。</p><p>接下来分析原因的时候， 一般都是首先执行一下show processlist命令， 看看当前语句处于什么状态。然后我们再针对每种状态， 去分析它们产生的原因、 如何复现， 以及如何处理。</p><p><strong>等MDL锁</strong></p><p>使用show processlist命令查看Waiting for table metadata lock。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201745437.png" alt="image-20240421201745437"></p><p>出现这个状态表示的是， 现在有一个线程正在表t上请求或者持有MDL写锁， 把select语句堵住了。</p><p>解决方法：就是找到谁持有MDL写锁，然后把它kill掉。</p><p>通过查询sys.schema_table_lock_waits这张表，我们就可以直接找出造成阻塞的process id，把这个连接用kill 命令断开即可。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201712264.png" alt="image-20240421201712264"></p><p><strong>等flush</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.processlist <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201753947.png" alt="image-20240421201753947"></p><p>使用show processlist排查。</p><p><strong>等行锁</strong></p><p>现在， 经过了表级锁的考验， 我们的select 语句终于来到引擎里了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421201839042.png" alt="image-20240421201839042"></p><p>解决方法：</p><p>通过sys.innodb_lock_waits 表查出是谁占着这个写锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t sys.innodb_lock_waits <span class="keyword">where</span> locked_table<span class="operator">=</span>`<span class="string">&#x27;test&#x27;</span>.<span class="string">&#x27;t&#x27;</span>`\G</span><br></pre></td></tr></table></figure><p>然后直接断开这个连接。</p><p><strong>第二类：</strong> <strong>查询慢</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>；</span><br></pre></td></tr></table></figure><p>虽然扫描行数是1， 但执行时间却长达800毫秒。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202203454.png" alt="image-20240421202203454"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> lock <span class="keyword">in</span> share mode</span><br></pre></td></tr></table></figure><p>执行时扫描行数也是1行， 执行时间是0.2毫秒。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202228245.png" alt="image-20240421202228245"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202237859.png" alt="image-20240421202237859"></p><p>先猜测下，再往下看。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202245363.png" alt="image-20240421202245363"></p><p>session A先用start transaction with consistent snapshot命令启动了一个事务， 之后session B才开始执行update 语句。</p><p>session B执行完100万次update语句后， id=1这一行处于什么状态呢？</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202312908.png" alt="image-20240421202312908"></p><p>session B更新完100万次，生成了100万个回滚日志(undo log)。</p><p>带lock in share mode的SQL语句，是当前读，因此会直接读到1000001这个结果，所以速度很快；而select * from t where id=1这个语句，是一致性读，因此需要从1000001开始，依次执行undo log，执行了100万次以后，才将1这个结果返回。</p><h2 id="20-幻读是什么，-幻读有什么问题？"><strong>20 | 幻读是什么，</strong> <strong>幻读有什么问题？</strong></h2><p>【是什么？会出现什么问题？数据库又是怎么解决的？】</p><p>前提：可重复读隔离级别下的，间隙锁才会发生。</p><p><strong>幻读是什么？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `c` (`c`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>),(<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>),(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>),(<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>这个表除了主键id外，还有一个索引c，初始化语句在表中插入了6行数据。</p><p>现在，我们就来分析一下，如果只在id=5这一行加锁，而其他行的不加锁的话，会怎么样。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202441948.png" alt="image-20240421202441948"></p><p>可以看到， session A里执行了三次查询， 分别是Q1、 Q2和Q3。 它们的SQL语句相同， 都是select * from t where d=5 for update。 查所有d=5的行， 而且使用的是当前读， 并且加上写锁。</p><ol><li>Q1只返回id=5这一行；</li><li>在T2时刻，session B把id=0这一行的d值改成了5，因此T3时刻Q2查出来的是id=0和id=5这两行；</li><li>在T4时刻，session C又插入一行（1,1,5），因此T5时刻Q3查出来的是id=0、id=1和id=5的这三行。</li></ol><p>其中， Q3读到id=1这一行的现象， 被称为“幻读”。</p><p><strong>幻读指的是一个事务在前后两次查询同一个范围的时候， 后一次查询看到了前一次查询没有看到的行。</strong></p><p><strong>说明</strong></p><ol><li>在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此，幻读在“当前读”下才会出现。</li><li>上面session B的修改结果，被session A之后的select语句用“当前读”看到，不能称为幻读。<strong>幻读仅专指“新插入的行”。</strong></li></ol><p><strong>幻读有什么问题？</strong></p><p>会导致数据不一致问题。</p><p>下面这个例子非常好。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202546044.png" alt="image-20240421202546044"></p><p>分析一下上图</p><ol><li>经过T1时刻，id=5这一行变成 (5,5,100)，当然这个结果最终是在T6时刻正式提交的;</li><li>经过T2时刻，id=0这一行变成(0,5,5);</li><li>经过T4时刻，表里面多了一行(1,5,5);</li><li>其他行跟这个执行序列无关，保持不变。</li></ol><p>这些数据也没啥问题，但是我们来看看binlog里面的内容。</p><ol><li>T2时刻，session B事务提交，写入了两条语句；</li><li>T4时刻，session C事务提交，写入了两条语句；</li><li>T6时刻，session A事务提交，写入了update t set d=100 where d=5 这条语句。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t <span class="keyword">set</span> d<span class="operator">=</span><span class="number">5</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">0</span>; <span class="comment">/*(0,0,5)*/</span></span><br><span class="line"><span class="keyword">update</span> t <span class="keyword">set</span> c<span class="operator">=</span><span class="number">5</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">0</span>; <span class="comment">/*(0,5,5)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>); <span class="comment">/*(1,1,5)*/</span></span><br><span class="line"><span class="keyword">update</span> t <span class="keyword">set</span> c<span class="operator">=</span><span class="number">5</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>; <span class="comment">/*(1,5,5)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t <span class="keyword">set</span> d<span class="operator">=</span><span class="number">100</span> <span class="keyword">where</span> d<span class="operator">=</span><span class="number">5</span>;<span class="comment">/*所有d=5的行，d改成100*/</span></span><br></pre></td></tr></table></figure><p>好，你应该看出问题了。这个语句序列，不论是拿到备库去执行，还是以后用binlog来克隆一个库，这三行的结果，都变成了 (0,5,100)、(1,5,100)和(5,5,100)。</p><p>也就是说，id=0和id=1这两行，发生了数据不一致。这个问题很严重，是不行的。</p><p><strong>如何解决幻读？</strong></p><p>行锁只能锁住行， 但是新插入记录这个动作， 要更新的是记录之间的“间隙”。 因此， 为了解决幻读问题， InnoDB只好引入新的锁， 也就是间隙锁(Gap Lock)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421202915584.png" alt="image-20240421202915584"></p><p>解决办法：执行 select * from t where d=5 for update的时候， 就不止是给数据库中已有的6个记录加上了行锁， 还同时加了7个间隙锁。 这样就确保了无法再插入新的记录。也就是说这时候， 在一行行扫描的过程中， 不仅将给行加上了行锁， 还给行两边的空隙， 也加上了间隙锁。</p><p><strong>跟间隙锁存在冲突关系的， 是“往这个间隙中插入一个记录”这个操作。 间隙锁之间都不存在冲突关系</strong>。</p><p>间隙锁和行锁合称next-keylock， 每个next-keylock是前开后闭区间。 也就是说， 我们的表t初始化以后， 如果用select * from t for update要把整个表所有记录锁起来， 就形成了7个next-key lock， 分别是 (-∞,0]、 (0,5]、 (5,10]、 (10,15]、 (15,20]、 (20, 25]、 (25, +supremum]。</p><p>但是可能会有死锁的情况发生。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421203059813.png" alt="image-20240421203059813"></p><p>你看到了，其实都不需要用到后面的update语句，就已经形成死锁了。我们按语句执行顺序来分析一下：</p><ol><li>session A 执行select … for update语句，由于id=9这一行并不存在，因此会加上间隙锁(5,10);</li><li>session B 执行select … for update语句，同样会加上间隙锁(5,10)，间隙锁之间不会冲突，因此这个语句可以执行成功；</li><li>session B 试图插入一行(9,9,9)，被session A的间隙锁挡住了，只好进入等待；</li><li>session A试图插入一行(9,9,9)，被session B的间隙锁挡住了。</li></ol><p>至此，两个session进入互相等待状态，形成死锁。当然，InnoDB的死锁检测马上就发现了这对死锁关系，让session A的insert语句报错返回了。</p><p>最后，这节分析的问题都是在可重复读隔离级别下的，间隙锁是在可重复读隔离级别下才会生效的。所以，你如果把隔离级别设置为读提交的话，就没有间隙锁了。但同时，你要解决可能出现的数据和日志不一致问题，需要把binlog格式设置为row。这也是现在不少公司使用的配置组合。</p><h2 id="21-为什么我只改一行的语句，-锁这么多？"><strong>21 | 为什么我只改一行的语句，</strong> <strong>锁这么多？</strong></h2><p>【重点】</p><p><strong>以下默认是可重复读隔离级别。</strong></p><ol><li>原则1：加锁的基本单位是next-key lock。希望你还记得，next-key lock是前开后闭区间。</li><li>原则2：查找过程中访问到的对象才会加锁。</li><li>优化1：索引上的等值查询，给唯一索引加锁的时候，next-key lock退化为行锁。</li><li>优化2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock退化为间隙锁。</li><li>一个bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ol><p>该节有许多经典案例，回到平台文章细看，就不再这里一一列举。</p><h2 id="22-MySQL有哪些“饮鸩止渴”提高性能的方法？"><strong>22 | MySQL有哪些“饮鸩止渴”提高性能的方法？</strong></h2><p>第一种方法： 先处理掉那些占着连接但是不工作的线程。</p><p>第二种方法： 减少连接过程的消耗。</p><p><strong>慢查询性能问题</strong></p><p>导致慢查询的第一种可能是， 索引没有设计好。</p><p>导致慢查询的第二种可能是， 语句没写好。</p><p><strong>QPS突增问题</strong></p><ol><li>一种是由全新业务的bug导致的。假设你的DB运维是比较规范的，也就是说白名单是一个个加的。这种情况下，如果你能够确定业务方会下掉这个功能，只是时间上没那么快，那么就可以从数据库端直接把白名单去掉。</li><li>如果这个新功能使用的是单独的数据库用户，可以用管理员账号把这个用户删掉，然后断开现有连接。这样，这个新功能的连接不成功，由它引发的QPS就会变成0。</li><li>如果这个新增的功能跟主体功能是部署在一起的，那么我们只能通过处理语句来限制。这时，我们可以使用上面提到的查询重写功能，把压力最大的SQL语句直接重写成&quot;select 1&quot;返回。</li></ol><h2 id="23-MySQL是怎么保证数据不丢的？"><strong>23 | MySQL是怎么保证数据不丢的？</strong></h2><p>【日志】</p><p>只要redo log和binlog保证持久化到磁盘， 就能确保MySQL异常重启后， 数据可以恢复。</p><p><strong>binlog的写入机制</strong></p><p>事务执行过程中， 先把日志写到binlog cache， 事务提交的时候， 再把binlog cache写到binlog文件中。</p><p>一个事务的binlog是不能被拆开的， 因此不论这个事务多大， 也要确保一次性写入。</p><p>系统给binlog cache分配了一片内存， 每个线程一个， 参数 binlog_cache_size用于控制单个线程内binlog cache所占内存的大小。 如果超过了这个参数规定的大小， 就要暂存到磁盘。事务提交的时候， 执行器把binlog cache里的完整事务写入到binlog中， 并清空binlog cache。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421203459314.png" alt="image-20240421203459314"></p><p><strong>每个线程有自己binlog cache， 但是共用同一份binlog文件。</strong></p><p>图中的write， 指的就是指把日志写入到文件系统的page cache， 并没有把数据持久化到磁盘， 所以速度比较快。</p><p>图中的fsync， 才是将数据持久化到磁盘的操作。 一般情况下， 我们认为fsync才占磁盘的IOPS。</p><p><strong>redo log的写入机制</strong></p><p>事务在执行过程中， 生成的redolog是要先写到redo log buffer的。 redo log buffer里面的内容， 是不是每次生成后都要直接持久化到磁盘呢？答案是， 不需要。如果事务执行期间MySQL发生异常重启， 那这部分日志就丢了。 由于事务并没有提交， 所以这时日志丢了也不会有损失。事务还没提交的时候， redo log buffer中的部分日志有没有可能被持久化到磁盘呢？答案是， 确实会有。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421203632190.png" alt="image-20240421203632190"></p><p>这三种状态分别是：</p><ol><li>存在redo log buffer中，物理上是在MySQL进程内存中，就是图中的红色部分；</li><li>写到磁盘(write)，但是没有持久化（fsync)，物理上是在文件系统的page cache里面，也就是图中的黄色部分；</li><li>持久化到磁盘，对应的是hard disk，也就是图中的绿色部分。</li></ol><p>日志写到redo log buffer是很快的， wirte到page cache也差不多， 但是持久化到磁盘的速度就慢多了。</p><p>为了控制redo log的写入策略，InnoDB提供了innodb_flush_log_at_trx_commit参数，它有三种可能取值：</p><ol><li>设置为0的时候，表示每次事务提交时都只是把redo log留在redo log buffer中;</li><li>设置为1的时候，表示每次事务提交时都将redo log直接持久化到磁盘；</li><li>设置为2的时候，表示每次事务提交时都只是把redo log写到page cache。</li></ol><p>InnoDB有一个后台线程，每隔1秒，就会把redo log buffer中的日志，调用write写到文件系统的page cache，然后调用fsync持久化到磁盘。</p><p>注意，事务执行中间过程的redo log也是直接写在redo log buffer中的，这些redo log也会被后台线程一起持久化到磁盘。也就是说，一个没有提交的事务的redo log，也是可能已经持久化到磁盘的。</p><p>实际上，除了后台线程每秒一次的轮询操作外，还有两种场景会让一个没有提交的事务的redo log写入到磁盘中。</p><ul><li><strong>一种是，redo log buffer占用的空间即将达到 innodb_log_buffer_size一半的时候，后台线程会主动写盘。</strong></li><li><strong>另一种是，并行的事务提交的时候，顺带将这个事务的redo log buffer持久化到磁盘。</strong></li></ul><p>如果把innodb_flush_log_at_trx_commit设置成1，那么redo log在prepare阶段就要持久化一次，因为有一个崩溃恢复逻辑是要依赖于prepare 的redo log，再加上binlog来恢复的。</p><p>每秒一次后台轮询刷盘，再加上崩溃恢复这个逻辑，InnoDB就认为redo log在commit的时候就不需要fsync了，只会write到文件系统的page cache中就够了。</p><p><strong>通常我们说MySQL的“双1”配置，指的就是sync_binlog和innodb_flush_log_at_trx_commit都设置成 1。也就是说，一个事务完整提交前，需要等待两次刷盘，一次是redo log（prepare 阶段），一次是binlog。</strong></p><p>其实到这里，我的理解是本质就是2次刷盘磁盘，但是加了buffer进行优化，提高效率。</p><p><strong>组提交</strong></p><p>三个并发事务(trx1, trx2, trx3)在prepare 阶段， 都写完redo log buffer， 持久化到磁盘的过程， 对应的LSN分别是50、 120 和160。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421203939757.png" alt="image-20240421203939757"></p><p>从图中可以看到，</p><ol><li>trx1是第一个到达的，会被选为这组的 leader；</li><li>等trx1要开始写盘的时候，这个组里面已经有了三个事务，这时候LSN也变成了160；</li><li>trx1去写盘的时候，带的就是LSN=160，因此等trx1返回时，所有LSN小于等于160的redo log，都已经被持久化到磁盘；</li><li>这时候trx2和trx3就可以直接返回了。</li></ol><p>所以，一次组提交里面，组员越多，节约磁盘IOPS的效果越好。</p><p>WAL机制主要得益于两个方面：</p><ol><li>redo log 和 binlog都是顺序写，磁盘的顺序写比随机写速度要快；</li><li>组提交机制，可以大幅度降低磁盘的IOPS消耗。【磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I/O读写；】</li></ol><p><strong>如果你的MySQL现在出现了性能瓶颈，</strong> <strong>而且瓶颈在IO上，</strong> <strong>可以通过哪些方法来提升性能呢？</strong></p><ol><li>设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count参数，减少binlog的写盘次数。这个方法是基于“额外的故意等待”来实现的，因此可能会增加语句的响应时间，但没有丢失数据的风险。</li><li>将sync_binlog 设置为大于1的值（比较常见是100~1000）。这样做的风险是，主机掉电时会丢binlog日志。</li><li>将innodb_flush_log_at_trx_commit设置为2。这样做的风险是，主机掉电的时候会丢数据。</li></ol><h2 id="24-MySQL是怎么保证主备一致的？"><strong>24 | MySQL是怎么保证主备一致的？</strong></h2><p>【日志】</p><p>binlog对主备一致贡献非常的大。</p><p><strong>MySQL主备的基本原理</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204119341.png" alt="image-20240421204119341"></p><p>节点A到B这条线的内部流程是什么样的。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204125172.png" alt="image-20240421204125172"></p><p>主库接收到客户端的更新请求后，执行内部事务的更新逻辑，同时写binlog。</p><p>备库B跟主库A之间维持了一个长连接。主库A内部有一个线程，专门用于服务备库B的这个长连接。一个事务日志同步的完整过程是这样的：</p><ol><li>在备库B上通过change master命令，设置主库A的IP、端口、用户名、密码，以及要从哪个位置开始请求binlog，这个位置包含文件名和日志偏移量。</li><li>在备库B上执行start slave命令，这时候备库会启动两个线程，就是图中的io_thread和sql_thread。其中io_thread负责与主库建立连接。</li><li>主库A校验完用户名、密码后，开始按照备库B传过来的位置，从本地读取binlog，发给B。</li><li>备库B拿到binlog后，写到本地文件，称为中转日志（relay log）。</li><li>sql_thread读取中转日志，解析出日志里的命令，并执行。</li></ol><p><strong>binlog的三种格式</strong></p><p>当binlog_format=statement时， binlog里面记录的就是SQL语句的原文。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204210641.png" alt="image-20240421204210641"></p><p>把binlog的格式改为binlog_format=‘row’</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204223526.png" alt="image-20240421204223526"></p><p>row格式的binlog里没有了SQL语句的原文， 而是替换成了两个event： Table_map和Delete_rows</p><p><strong>为什么会有mixed这种binlog格式的存在场景？</strong></p><ul><li>因为有些statement格式的binlog可能会导致主备不一致，所以要使用row格式。</li><li>但row格式的缺点是，很占空间。比如你用一个delete语句删掉10万行数据，用statement的话就是一个SQL语句被记录到binlog中，占用几十个字节的空间。但如果用row格式的binlog，就要把这10万条记录都写到binlog中。这样做，不仅会占用更大的空间，同时写binlog也要耗费IO资源，影响执行速度。</li><li>所以，MySQL就取了个折中方案，也就是有了mixed格式的binlog。<strong>mixed格式的意思是，MySQL自己会判断这条SQL语句是否可能引起主备不一致，如果有可能，就用row格式，否则就用statement格式。</strong></li></ul><p><strong>循环复制问题</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204300198.png" alt="image-20240421204300198"></p><p>双M结构和M-S结构， 其实区别只是多了一条线， 即： 节点A和B之间总是互为主备关系。 这样在切换的时候就不用再修改主备关系。</p><p>业务逻辑在节点A上更新了一条语句， 然后再把生成的binlog 发给节点B， 节点B执行完这条更新语句后也会生成binlog。如果节点A同时是节点B的备库， 相当于又把节点B新生成的binlog拿过来执行了一次， 然后节点A和B间， 会不断地循环执行这个更新语句， 也就是循环复制了。 这个要怎么解决呢？</p><p>MySQL在binlog中记录了这个命令第一次执行时所在实例的serverid。 因此， 我们可以用下面的逻辑， 来解决两个节点间的循环复制的问题：</p><ol><li>规定两个库的server id必须不同，如果相同，则它们之间不能设定为主备关系；</li><li>一个备库接到binlog并在重放的过程中，生成与原binlog的server id相同的新的binlog；</li><li>每个库在收到从自己的主库发过来的日志后，先判断server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。</li></ol><p>按照这个逻辑，如果我们设置了双M结构，日志的执行流就会变成这样：</p><ol><li>从节点A更新的事务，binlog里面记的都是A的server id；</li><li>传到节点B执行一次以后，节点B生成的binlog 的server id也是A的server id；</li><li>再传回给节点A，A判断到这个server id与自己的相同，就不会再处理这个日志。所以，死循环在这里就断掉了。</li></ol><h2 id="25-MySQL是怎么保证高可用的？"><strong>25 | MySQL是怎么保证高可用的？</strong></h2><p>【就是主备低延时】</p><p>正常情况下， 只要主库执行更新生成的所有binlog， 都可以传到备库并被正确地执行， 备库就能达到跟主库一致的状态， 这就是最终一致性。</p><p><strong>主备延迟</strong></p><p>主备切换可能是一个主动运维动作， 比如软件升级、 主库所在机器按计划下线等， 也可能是被动操作， 比如主库所在机器掉电。</p><p>与数据同步有关的时间点主要包括以下三个：</p><ol><li>主库A执行完成一个事务，写入binlog，我们把这个时刻记为T1;</li><li>之后传给备库B，我们把备库B接收完这个binlog的时刻记为T2;</li><li>备库B执行完成这个事务，我们把这个时刻记为T3。</li></ol><p>所谓主备延迟， 就是同一个事务， 在备库执行完成的时间和主库执行完成的时间之间的差值， 也就是T3-T1。</p><p>你可以在备库上执行show slave status命令，它的返回结果里面会显示seconds_behind_master，用于表示当前备库延迟了多少秒。</p><p><strong>seconds_behind_master</strong>的计算方法是这样的：</p><ol><li>每个事务的binlog 里面都有一个时间字段，用于记录主库上写入的时间；</li><li>备库取出当前正在执行的事务的时间字段的值，计算它与当前系统时间的差值，得到seconds_behind_master。</li></ol><p>可以看到，其实seconds_behind_master这个参数计算的就是T3-T1。所以，我们可以用seconds_behind_master来作为主备延迟的值，这个值的时间精度是秒。</p><p><strong>主备延迟最直接的表现是，备库消费中转日志（relay log）的速度，比主库生产binlog的速度要慢。</strong></p><p>下面来说说常见的例子。</p><p><strong>主备延迟的来源</strong></p><ol><li><p>备库所在机器的性能要比主库所在的机器性能差。</p></li><li><p>备库的压力大：备库上的查询耗费了大量的CPU资源， 影响了同步速度， 造成主备延迟</p></li></ol><ul><li>一主多从。除了备库外，可以多接几个从库，让这些从库来分担读的压力。</li><li>通过binlog输出到外部系统，比如Hadoop这类系统，让外部系统提供统计类查询的能力。</li></ul><ol start="3"><li>大事务</li></ol><p><strong>可靠性优先策略</strong></p><p>双M结构下， 从状态1到状态2切换的详细过程是这样的：</p><ol><li>判断备库B现在的seconds_behind_master，如果小于某个值（比如5秒）继续下一步，否则持续重试这一步；</li><li>把主库A改成只读状态，即把readonly设置为true；</li><li>判断备库B的seconds_behind_master的值，直到这个值变成0为止；</li><li>把备库B改成可读写状态，也就是把readonly 设置为false；</li><li>把业务请求切到备库B。</li></ol><p>这个切换流程， 一般是由专门的HA系统来完成的， 我们暂时称之为可靠性优先流程。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204637780.png" alt="image-20240421204637780"></p><p><strong>可用性优先策略</strong></p><p>强行把步骤4、 5调整到最开始执行， 也就是说不等主备数据同步， 直接把连接切到备库B， 并且让备库B可以读写， 那么系统几乎就没有不可用时间了。我们把这个切换流程， 暂时称作<strong>可用性优先</strong>流程。 这个切换流程的代价， 就是可能出现数据不一致的情况。</p><p><strong>可用性优先策略，且binlog_format=mixed</strong>时的切换流程和数据结果。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204731138.png" alt="image-20240421204731138"></p><p>现在，我们一起分析下这个切换流程：</p><ol><li>步骤2中，主库A执行完insert语句，插入了一行数据（4,4），之后开始进行主备切换。</li><li>步骤3中，由于主备之间有5秒的延迟，所以备库B还没来得及应用“插入c=4”这个中转日志，就开始接收客户端“插入 c=5”的命令。</li><li>步骤4中，备库B插入了一行数据（4,5），并且把这个binlog发给主库A。</li><li>步骤5中，备库B执行“插入c=4”这个中转日志，插入了一行数据（5,4）。而直接在备库B执行的“插入c=5”这个语句，传到主库A，就插入了一行新数据（5,5）。</li></ol><p>最后的结果就是，主库A和备库B上出现了两行不一致的数据。可以看到，这个数据不一致，是由可用性优先流程导致的。</p><p><strong>可用性优先策略，但设置binlog_format=row</strong>时的切换流程和数据结果。</p><p>因为row格式在记录binlog的时候，会记录新插入的行的所有字段值，所以最后只会有一行不一致。而且，两边的主备同步的应用线程会报错duplicate key error并停止。也就是说，这种情况下，备库B的(5,4)和主库A的(5,5)这两行数据，都不会被对方执行。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421204815379.png" alt="image-20240421204815379"></p><p>结论：</p><ol><li>使用row格式的binlog时，数据不一致的问题更容易被发现。而使用mixed或者statement格式的binlog时，数据很可能悄悄地就不一致了。如果你过了很久才发现数据不一致的问题，很可能这时的数据不一致已经不可查，或者连带造成了更多的数据逻辑不一致。</li><li>主备切换的可用性优先策略会导致数据不一致。因此，大多数情况下，我都建议你使用可靠性优先策略。毕竟对数据服务来说的话，数据的可靠性一般还是要优于可用性的。</li></ol><p>MySQL高可用系统的可用性，是依赖于主备延迟的。延迟的时间越小，在主库故障的时候，服务恢复需要的时间就越短，可用性就越高。</p><h2 id="26-备库为什么会延迟好几个小时？"><strong>26 | 备库为什么会延迟好几个小时？</strong></h2><p>【中转日志消费不够快】</p><p>如果备库执行日志的速度持续低于主库生成日志的速度， 那这个延迟就有可能成了小时级别。 而且对于一个压力持续比较高的主库来说， 备库很可能永远都追不上主库的节奏。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205013154.png" alt="image-20240421205013154"></p><p>coordinator在分发的时候， 需要满足以下这两个基本要求：</p><ol><li>不能造成更新覆盖。 这就要求更新同一行的两个事务， 必须被分发到同一个worker中。</li><li>同一个事务不能被拆开， 必须放到同一个worker中。</li></ol><p><strong>MySQL 5.5版本的并行复制策略</strong></p><p><strong>按表分发策略</strong></p><p>按表分发事务的基本思路是， 如果两个事务更新不同的表， 它们就可以并行。 因为数据是存储在表里的， 所以按表分发， 可以保证两个worker不会更新同一行。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205026348.png" alt="image-20240421205026348"></p><p><strong>按行分发策略</strong></p><p>要解决热点表的并行复制问题， 就需要一个按行并行复制的方案。 按行复制的核心思路是： 如果两个事务没有更新相同的行， 它们在备库上可以并行执行。 显然， 这个模式要求binlog格式必须是row。</p><p>相比于按表并行分发策略， 按行并行策略在决定线程分发的时候， 需要消耗更多的计算资源。</p><p><strong>MySQL 5.6版本的并行复制策略</strong></p><p>官方MySQL5.6版本， 支持了并行复制， 只是支持的粒度是按库并行。这个策略的并行效果， 取决于压力模型。 如果在主库上有多个DB， 并且各个DB的压力均衡， 使用这个策略的效果会很好。</p><p><strong>MySQL 5.7的并行复制策略</strong></p><p>MySQL 5.7并行复制策略的思想是：</p><ol><li>同时处于prepare状态的事务， 在备库执行时是可以并行的；</li><li>处于prepare状态的事务， 与处于commit状态的事务之间， 在备库执行时也是可以并行的。</li></ol><p>为什么要有多线程复制呢？ 这是因为单线程复制的能力全面低于多线程复制， 对于更新压力较大的主库， 备库是可能一直追不上主库的。 从现象上看就是， 备库上seconds_behind_master的值越来越大。</p><h2 id="27-主库出问题了，-从库怎么办？"><strong>27 | 主库出问题了，</strong> <strong>从库怎么办？</strong></h2><p>【主备切换，日志从哪开始同步问题】</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205036452.png" alt="image-20240421205036452"></p><p>图中， 虚线箭头表示的是主备关系， 也就是A和A’互为主备， 从库B、 C、 D指向的是主库A。一主多从的设置， 一般用于读写分离， 主库负责所有的写入和一部分读， 其他的读请求则由从库分担。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205046203.png" alt="image-20240421205046203"></p><p>相比于一主一备的切换流程， 一主多从结构在切换完成后， A’会成为新的主库， 从库B、 C、 D也要改接到A’。 正是由于多了从库B、 C、 D重新指向的这个过程， 所以主备切换的复杂性也相应增加了。</p><p><strong>基于位点的主备切换</strong></p><p>之所以需要这个，是因为从库要换连接的主库，我认为这个位点是之后备库A‘和从库开始同步的位置。</p><p>一种取同步位点的方法是这样的：</p><ol><li>等待新主库A’把中转日志（relay log）全部同步完成；</li><li>在A’上执行show master status命令，得到当前A’上最新的File 和 Position；</li><li>取原主库A故障的时刻T；</li><li>用mysqlbinlog工具解析A’的File，得到T时刻的位点。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog File --stop-datetime=T --start-datetime=T</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205402957.png" alt="image-20240421205402957"></p><p>当然这个值并不精确。为什么呢？</p><p>你可以设想有这么一种情况，假设在T这个时刻，主库A已经执行完成了一个insert 语句插入了一行数据R，并且已经将binlog传给了A’和B，然后在传完的瞬间主库A的主机就掉电了。</p><p>那么，这时候系统的状态是这样的：</p><ol><li>在从库B上，由于同步了binlog， R这一行已经存在；</li><li>在新主库A’上， R这一行也已经存在，日志是写在123这个位置之后的；</li><li>我们在从库B上执行change master命令，指向A’的File文件的123位置，就会把插入R这一行数据的binlog又同步到从库B去执行。</li></ol><p>这时候，从库B的同步线程就会报告 Duplicate entry ‘id_of_R’ for key ‘PRIMARY’ 错误，提示出现了主键冲突，然后停止同步。</p><p>因此，<strong>我们在切换任务的时候，要先主动跳过这些错误，有两种常用的方法。</strong></p><p><strong>一种做法是</strong>，主动跳过一个事务。跳过命令的写法是：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global <span class="attribute">sql_slave_skip_counter</span>=1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>因为切换过程中，可能会不止重复执行一个事务，所以我们需要在从库B刚开始接到新主库A’时，持续观察，每次碰到这些错误就停下来，执行一次跳过命令，直到不再出现停下来的情况，以此来跳过可能涉及的所有事务。</p><p>**另外一种方式是，**通过设置slave_skip_errors参数，直接设置跳过指定的错误。</p><p>在执行主备切换时，有这么两类错误，是经常会遇到的：</p><ul><li>1062错误是插入数据时唯一键冲突；</li><li>1032错误是删除数据时找不到行。</li></ul><p>因此，我们可以把slave_skip_errors 设置为 “1032,1062”，这样中间碰到这两个错误时就直接跳过。</p><p><strong>GTID</strong></p><p>知道GTID的概念这部分就非常好理解了。</p><p><a href="https://www.bilibili.com/video/BV1rr4y1Q7uy?p=11&amp;vd_source=d6efee335659a376be8deb6c0654e9f7">MySQL5.7 集群管理（主从复制、MHA、GTID、PXC）</a></p><ol><li><p>全局事务标识∶ global transaction identifiers。</p></li><li><p>GTID与事务——对应，并且全局唯一ID。</p></li><li><p>一个GTID在一个服务器上只执行一次。</p></li><li><p>MySQL-5.6.5开始支持GTID。</p></li></ol><p>组成：GTID = server_uuid : transaction_id</p><p>binlog和GTID的关系</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205708126.png" alt="image-20240421205708126"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205835872.png" alt="image-20240421205835872"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421205853616.png" alt="image-20240421205853616"></p><h2 id="28-读写分离有哪些坑？"><strong>28 | 读写分离有哪些坑？</strong></h2><p>【从库没有同步到位】</p><p>由于主从可能存在延迟，客户端执行完一个更新事务后马上发起查询，如果查询选择的是从库的话，就有可能读到刚刚的事务更新之前的状态。我们称这种读为过期读。</p><p><strong>强制走主库方案</strong></p><p>我们可以将查询请求分为这么两类：</p><ol><li><p>对于必须要拿到最新结果的请求， 强制将其发到主库上。 比如， 在一个交易平台上， 卖家发布商品以后， 马上要返回主页面， 看商品是否发布成功。 那么， 这个请求需要拿到最新的结果， 就必须走主库。</p></li><li><p>对于可以读到旧数据的请求， 才将其发到从库上。 在这个交易平台上， 买家来逛商铺页面，就算晚几秒看到最新发布的商品， 也是可以接受的。 那么， 这类请求就可以走从库。</p></li></ol><p><strong>Sleep 方案</strong></p><p>主库更新后， 读从库之前先sleep一下。</p><p><strong>判断主备无延迟方案</strong></p><p>第一种确保主备无延迟的方法是， 每次从库执行查询请求前， 先判断seconds_behind_master是否已经等于0。 如果还不等于0 ， 那就必须等到这个参数变为0才能执行查询请求 。</p><p>第二种方法， 对比位点确保主备无延迟 。</p><p>第三种方法， 对比GTID集合确保主备无延迟 。</p><p><strong>等主库位点方案</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> master_pos_wait(file, pos[, timeout]);</span><br></pre></td></tr></table></figure><p>这条命令的逻辑如下：</p><ol><li>它是在从库执行的；</li><li>参数file和pos指的是主库上的文件名和位置；</li><li>timeout可选，设置为正整数N表示这个函数最多等待N秒。</li></ol><p>这个命令正常返回的结果是一个正整数M，表示从命令开始执行，到应用完file和pos表示的binlog位置，执行了多少事务。</p><p>使用逻辑：</p><ol><li>trx1事务更新完成后，马上执行show master status得到当前主库执行到的File和Position；</li><li>选定一个从库执行查询语句；</li><li>在从库上执行select master_pos_wait(File, Position, 1)；</li><li>如果返回值是&gt;=0的正整数，则在这个从库执行查询语句；</li><li>否则，到主库执行查询语句。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421210118844.png" alt="image-20240421210118844"></p><p><strong>GTID方案</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">wait_for_executed_gtid_set</span>(<span class="params">gtid_set, <span class="number">1</span></span>)</span>;</span><br></pre></td></tr></table></figure><p>这条命令的逻辑是：</p><ol><li>等待，直到这个库执行的事务中包含传入的gtid_set，返回0；</li><li>超时返回1。</li></ol><p>等GTID的执行流程就变成了：</p><ol><li>trx1事务更新完成后，从返回包直接获取这个事务的GTID，记为gtid1；</li><li>选定一个从库执行查询语句；</li><li>在从库上执行 select wait_for_executed_gtid_set(gtid1, 1)；</li><li>如果返回值是0，则在这个从库执行查询语句；</li><li>否则，到主库执行查询语句。</li></ol><p>跟等主库位点的方案一样，等待超时后是否直接到主库查询，需要业务开发同学来做限流考虑。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421210204444.png" alt="image-20240421210204444"></p><h2 id="29-如何判断一个数据库是不是出问题了？"><strong>29 | 如何判断一个数据库是不是出问题了？</strong></h2><p>主备切换有两种场景， 一种是主动切换， 一种是被动切换。 而其中被动切换， 往往是因为主库出问题了， 由HA系统发起的。</p><p><strong>select 1判断</strong></p><p>实际上，select 1成功返回，只能说明这个库的进程还在，并不能说明主库没问题。</p><p><strong>查表判断</strong></p><p>为了能够检测InnoDB并发线程数过多导致的系统不可用情况， 我们需要找一个访问InnoDB的场景。 一般的做法是， 在系统库（mysql库） 里创建一个表， 比如命名为health_check， 里面只放一行数据， 然后定期执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.health_check;</span><br></pre></td></tr></table></figure><p>可能出现读没有问题，但是写存在问题，还是排查不够彻底。</p><p><strong>更新判断</strong></p><p>既然要更新，就要放个有意义的字段，常见做法是放一个timestamp字段，用来表示最后一次执行检测的时间。这条更新语句类似于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> mysql.health_check <span class="keyword">set</span> t_modified<span class="operator">=</span>now();</span><br></pre></td></tr></table></figure><p>节点可用性的检测都应该包含主库和备库。如果用更新来检测主库的话，那么备库也要进行更新检测。</p><p>但是这都是外部提供，我们可以通过使用数据库告诉我们内部的真实情况。</p><p><strong>内部统计</strong></p><p>MySQL 5.6版本以后提供的performance_schema库，就在file_summary_by_event_name表里统计了每次IO请求的时间。</p><h2 id="30-答疑文章（二）-：-用动态的观点看加锁"><strong>30 | 答疑文章（二）</strong> <strong>：</strong> <strong>用动态的观点看加锁</strong></h2><p>原则1： 加锁的基本单位是next-keylock。 希望你还记得， next-keylock是前开后闭区间。<br>原则2： 查找过程中访问到的对象才会加锁。<br>优化1： 索引上的等值查询， 给唯一索引加锁的时候， next-keylock退化为行锁。<br>优化2： 索引上的等值查询， 向右遍历时且最后一个值不满足等值条件的时候， next-keylock退化为间隙锁。<br>一个bug： 唯一索引上的范围查询会访问到不满足条件的第一个值为止。</p><h2 id="31-误删数据后除了跑路，-还能怎么办？"><strong>31 | 误删数据后除了跑路，</strong> <strong>还能怎么办？</strong></h2><p>先对和MySQL相关的误删数据， 做下分类：</p><ol><li>使用delete语句误删数据行；</li><li>使用drop table或者truncate table语句误删数据表；</li><li>使用drop database语句误删数据库；</li><li>使用rm命令误删整个MySQL实例。</li></ol><p>其实主要就是靠数据库记录的日志恢复。</p><p><strong>误删行</strong></p><p>具体恢复数据时， 对单个事务做如下处理：</p><ol><li>对于insert语句，对应的binlog event类型是Write_rows event，把它改成Delete_rows event即可；</li><li>同理，对于delete语句，也是将Delete_rows event改为Write_rows event；</li><li>而如果是Update_rows的话，binlog里面记录了数据行修改前和修改后的值，对调这两行的位置即可。</li></ol><p><strong>误删库/表</strong></p><p>这种情况下， 要想恢复数据， 就需要使用全量备份， 加增量日志的方式了。 这个方案要求线上有定期的全量备份， 并且实时备份binlog。在这两个条件都具备的情况下， 假如有人中午12点误删了一个库， 恢复数据的流程如下：</p><ol><li><p>取最近一次全量备份， 假设这个库是一天一备， 上次备份是当天0点；</p></li><li><p>用备份恢复出一个临时库；</p></li><li><p>从日志备份里面， 取出凌晨0点之后的日志；</p></li><li><p>把这些日志， 除了误删除数据的语句外， 全部应用到临时库。</p></li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421211155332.png" alt="image-20240421211155332"></p><p><strong>延迟复制备库</strong></p><p>我们可以考虑**搭建延迟复制的备库。**这个功能是MySQL 5.6版本引入的。</p><p>一般的主备复制结构存在的问题是，如果主库上有个表被误删了，这个命令很快也会被发给所有从库，进而导致所有从库的数据表也都一起被误删了。</p><p>延迟复制的备库是一种特殊的备库，通过 CHANGE MASTER TO MASTER_DELAY = N命令，可以指定这个备库持续保持跟主库有N秒的延迟。</p><p>比如你把N设置为3600，这就代表了如果主库上有数据被误删了，并且在1小时内发现了这个误操作命令，这个命令就还没有在这个延迟复制的备库执行。这时候到这个备库上执行stop slave，再通过之前介绍的方法，跳过误操作命令，就可以恢复出需要的数据。</p><p>这样的话，你就随时可以得到一个，只需要最多再追1小时，就可以恢复出数据的临时实例，也就缩短了整个数据恢复需要的时间。</p><p><strong>预防误删库/表的方法</strong></p><p>第一条建议是，账号分离。第二条建议是，制定操作规范。</p><p><strong>rm删除数据</strong></p><p>只要不是恶意地把整个集群删除， 而只是删掉了其中某一个节点的数据的话， HA系统就会开始工作， 选出一个新的主库， 从而保证整个集群的正常工作。这时， 你要做的就是在这个节点上把数据恢复回来， 再接入整个集群</p><h2 id="32-为什么还有kill不掉的语句？"><strong>32 | 为什么还有kill不掉的语句？</strong></h2><p>在MySQL中有两个kill命令： 一个是kill query+线程id， 表示终止这个线程中正在执行的语句； 一个是kill connection +线程id， 这里connection可缺省， 表示断开这个线程的连接， 当然如果这个线程有语句正在执行， 也是要先停止正在执行的语句的。不知道你在使用MySQL的时候， 有没有遇到过这样的现象： 使用了kill命令， 却没能断开这个连接。 再执行show processlist命令， 看到这条语句的Command列显示的是Killed。</p><p>kill并不是马上停止的意思， 而是告诉执行线程说， 这条语句已经不需要继续执行了，可以开始“执行停止的逻辑了”。</p><p>MySQL客户端发送请求后， 接收服务端返回结果的方式有两种：</p><ol><li><p>一种是本地缓存， 也就是在本地开一片内存， 先把结果存起来。 如果你用API开发， 对应的就是mysql_store_result 方法。</p></li><li><p>另一种是不缓存， 读一个处理一个。 如果你用API开发， 对应的就是mysql_use_result方法。</p></li></ol><h2 id="33-我查这么多数据，-会不会把数据库内存打爆？"><strong>33 | 我查这么多数据，</strong> <strong>会不会把数据库内存打爆？</strong></h2><p>其实这篇文章主要说的是MySQL是边读边发的，但是我认为和DBMS的buffer pool也有关系。</p><p><strong>全表扫描对server层的影响</strong></p><p>InnoDB的数据是保存在主键索引上的， 所以全表扫描实际上是直接扫描表t的主键索引。 这条查询语句由于没有其他的判断条件， 所以查到的每一行都可以直接放到结果集里面， 然后返回给客户端</p><p>实际上， 服务端并不需要保存一个完整的结果集。 取数据和发数据的流程是这样的：</p><ol><li><p>获取一行， 写到net_buffer中。 这块内存的大小是由参数net_buffer_length定义的， 默认是16k。</p></li><li><p>重复获取行， 直到net_buffer写满， 调用网络接口发出去。</p></li><li><p>如果发送成功， 就清空net_buffer， 然后继续取下一行， 并写入net_buffer。</p></li><li><p>如果发送函数返回EAGAIN或WSAEWOULDBLOCK， 就表示本地网络栈（socket send buffer） 写满了， 进入等待。 直到网络栈重新可写， 再继续发送。</p></li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421211458092.png" alt="image-20240421211458092"></p><p><strong>MySQL是“边读边发的”</strong>，这个概念很重要。这就意味着，如果客户端接收得慢，会导致MySQL服务端由于结果发不出去，这个事务的执行时间变长。</p><p>在show processlist命令中的State列的值一直处于**“Sending to client”**，就表示服务器端的网络栈写满了。</p><p><strong>对于正常的线上业务来说，如果一个查询的返回结果不会很多的话，我都建议你使用mysql_store_result这个接口，直接把查询结果保存到本地内存。</strong></p><p><strong>Sending data</strong>：它的意思只是“正在执行”。</p><p><strong>全表扫描对InnoDB的影响</strong></p><p>InnoDB内存管理用的是最近最少使用 (Least RecentlyUsed, LRU)算法， 这个算法的核心就是淘汰最久未使用的数据。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421211510369.png" alt="image-20240421211510369"></p><p>InnoDB不能直接使用这个LRU算法。 实际上， InnoDB对LRU算法做了改进。在InnoDB实现上， 按照5:3的比例把整个LRU链表分成了young区域和old区域。 图中LRU_old指向的就是old区域的第一个位置， 是整个链表的5/8处。 也就是说， 靠近链表头部的5/8是young区域， 靠近链表尾部的3/8是old区域。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421211516058.png" alt="image-20240421211516058"></p><p>改进后的LRU算法执行流程变成了下面这样。</p><ol><li><p>图7中状态1， 要访问数据页P3， 由于P3在young区域， 因此和优化前的LRU算法一样， 将其移到链表头部， 变成状态2。</p></li><li><p>之后要访问一个新的不存在于当前链表的数据页， 这时候依然是淘汰掉数据页Pm， 但是新插入的数据页Px， 是放在LRU_old处。</p></li><li><p>处于old区域的数据页， 每次被访问的时候都要做下面这个判断：若这个数据页在LRU链表中存在的时间超过了1秒， 就把它移动到链表头部；如果这个数据页在LRU链表中存在的时间短于1秒， 位置保持不变。 1秒这个时间， 是由参数innodb_old_blocks_time控制的。 其默认值是1000， 单位毫秒。</p></li></ol><p>我们看看改进后的LRU算法的操作逻辑：</p><ol><li><p>扫描过程中， 需要新插入的数据页， 都被放到old区域;</p></li><li><p>一个数据页里面有多条记录， 这个数据页会被多次访问到， 但由于是顺序扫描， 这个数据页第一次被访问和最后一次被访问的时间间隔不会超过1秒， 因此还是会被保留在old区域；</p></li><li><p>再继续扫描后续的数据， 之前的这个数据页之后也不会再被访问到， 于是始终没有机会移到链表头部（也就是young区域） ， 很快就会被淘汰出去。</p></li></ol><h2 id="34-到底可不可以使用join？"><strong>34 | 到底可不可以使用join？</strong></h2><p>在实际生产中， 关于join语句使用的问题， 一般会集中在以下两类：</p><ol><li><p>我们DBA不让使用join， 使用join有什么问题呢？</p></li><li><p>如果有两个大小不同的表做join， 应该用哪个表做驱动表呢？</p></li></ol><p><strong>Index Nested-Loop Join</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 straight_join t2 <span class="keyword">on</span> (t1.a<span class="operator">=</span>t2.a);</span><br></pre></td></tr></table></figure><p>如果直接使用join语句， MySQL优化器可能会选择表t1或t2作为驱动表， 这样会影响我们分析SQL语句的执行过程。 所以， 为了便于分析执行过程中的性能问题， 我改用straight_join让MySQL使用固定的连接方式执行查询， 这样优化器只会按照我们指定的方式去join。 在这个语句里， t1 是驱动表， t2是被驱动表。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421212736792.png" alt="image-20240421212736792"></p><p>可以看到， 在这条语句里， 被驱动表t2的字段a上有索引， join过程用上了这个索引， 因此这个语句的执行流程是这样的：</p><ol><li><p>从表t1中读入一行数据 R；</p></li><li><p>从数据行R中， 取出a字段到表t2里去查找；</p></li><li><p>取出表t2中满足条件的行， 跟R组成一行， 作为结果集的一部分；</p></li><li><p>重复执行步骤1到3， 直到表t1的末尾循环结束。</p></li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421212800908.png" alt="image-20240421212800908"></p><p>对比用单表查询怎么实现。</p><ol><li>执行select * from t1，查出表t1的所有数据，这里有100行；</li><li>循环遍历这100行数据：<ul><li>从每一行R取出字段a的值$R.a；</li><li>执行select * from t2 where a=$R.a；</li><li>把返回的结果和R构成结果集的一行。</li></ul></li></ol><p>可以看到，在这个查询过程，也是扫描了200行，但是总共执行了101条语句，比直接join多了100次交互。除此之外，客户端还要自己拼接SQL语句和结果。</p><p>结论：</p><ol><li><p>使用join语句， 性能比强行拆成多个单表执行SQL语句的性能要好；</p></li><li><p>如果使用join语句的话， 需要让小表做驱动表。</p></li></ol><p><strong>Simple Nested-Loop Join</strong></p><p>由于表的字段b上没有索引， 因此再用图的执行流程时， 每次到t2去匹配的时候， 就要做一次全表扫描 。</p><p><strong>Block Nested-Loop Join</strong></p><p>这时候， 被驱动表上没有可用的索引， 算法的流程是这样的：</p><ol><li><p>把表t1的数据读入线程内存join_buffer中， 由于我们这个语句中写的是select *， 因此是把整个表t1放入了内存；</p></li><li><p>扫描表t2， 把表t2中的每一行取出来， 跟join_buffer中的数据做对比， 满足join条件的， 作为结果集的一部分返回。</p></li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421212952835.png" alt="image-20240421212952835"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213046975.png" alt="image-20240421213046975"></p><p>可以看到，在这个过程中，对表t1和t2都做了一次全表扫描，因此总的扫描行数是1100。由于join_buffer是以无序数组的方式组织的，因此对表t2中的每一行，都要做100次判断，总共需要在内存中做的判断次数是：100*1000=10万次。</p><p>假设小表的行数是N，大表的行数是M，那么在这个算法里：</p><ol><li>两个表都做一次全表扫描，所以总的扫描行数是M+N；</li><li>内存中的判断次数是M*N。</li></ol><p>可以看到，调换这两个算式中的M和N没差别，因此这时候选择大表还是小表做驱动表，执行耗时是一样的。</p><p>分段放：join_buffer的大小是由参数join_buffer_size设定的， 默认值是256k。 <strong>如果放不下表t1的所有数据话， 策略很简单， 就是分段放</strong>。 我把join_buffer_size改成1200， 再执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 straight_join t2 <span class="keyword">on</span> (t1.a<span class="operator">=</span>t2.b);</span><br></pre></td></tr></table></figure><p>执行过程就变成了：</p><ol><li><p>扫描表t1， 顺序读取数据行放入join_buffer中， 放完第88行join_buffer满了， 继续第2步；</p></li><li><p>扫描表t2， 把t2中的每一行取出来， 跟join_buffer中的数据做对比， 满足join条件的， 作为结果集的一部分返回；</p></li><li><p>清空join_buffer；</p></li><li><p>继续扫描表t1， 顺序读取最后的12行数据放入join_buffer中， 继续执行第2步。</p></li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213008023.png" alt="image-20240421213008023"></p><p>我们再来看下， 在这种情况下驱动表的选择问题。</p><p>假设， 驱动表的数据行数是N， 需要分K段才能完成算法流程， 被驱动表的数据行数是M。注意， 这里的K不是常数， N越大K就会越大， 因此把K表示为λ * N， 显然λ的取值范围是(0,1)。所以， 在这个算法的执行过程中：</p><ol><li><p>扫描行数是 N+λ * N * M；</p></li><li><p>内存判断 N * M次。</p><p>显然， 内存判断次数是不受选择哪个表作为驱动表影响的。 而考虑到扫描行数， 在M和N大小确定的情况下， N小一些， 整个算式的结果会更小。所以结论是， 应该让小表当驱动表。当然， 你会发现， 在N+λ<em>N</em>M这个式子里， λ才是影响扫描行数的关键因素， 这个值越小越好。</p></li></ol><p><strong>回答文章开头的两个问题</strong>。</p><p>第一个问题：能不能使用join语句？</p><ol><li>如果可以使用Index Nested-Loop Join算法，也就是说可以用上被驱动表上的索引，其实是没问题的；</li><li>如果使用Block Nested-Loop Join算法，扫描行数就会过多。尤其是在大表上的join操作，这样可能要扫描被驱动表很多次，会占用大量的系统资源。所以这种join尽量不要用。</li></ol><p>所以你在判断要不要使用join语句时，就是看explain结果里面，Extra字段里面有没有出现“Block Nested Loop”字样。</p><p>第二个问题是：如果要使用join，应该选择大表做驱动表还是选择小表做驱动表？</p><ol><li>如果是Index Nested-Loop Join算法，应该选择小表做驱动表；</li><li>如果是Block Nested-Loop Join算法：<ul><li>在join_buffer_size足够大的时候，是一样的；</li><li>在join_buffer_size不够大的时候（这种情况更常见），应该选择小表做驱动表。</li></ul></li></ol><p>所以，这个问题的结论就是，总是应该使用小表做驱动表。</p><p>在决定哪个表做驱动表的时候， 应该是两个表按照各自的条件过滤， 过滤完成之后， 计算参与join的各个字段的总数据量， 数据量小的那个表， 就是“小表”， 应该作为驱动表。</p><p><strong>总结</strong></p><p>通过对Index Nested-Loop Join和Block Nested-Loop Join两个算法执行过程的分析，我们也得到了文章开头两个问题的答案：</p><ol><li>如果可以使用被驱动表的索引，join语句还是有其优势的；</li><li>不能使用被驱动表的索引，只能使用Block Nested-Loop Join算法，这样的语句就尽量不要使用；</li><li>在使用join的时候，应该让小表做驱动表。</li></ol><h2 id="35-join语句怎么优化？"><strong>35 | join语句怎么优化？</strong></h2><p><strong>Multi-Range Read优化</strong></p><p>【主要是根据局部一致性原理进行优化的】</p><p>Multi-Range Read优化 (MRR)。 这个优化的主要目的是尽量使用顺序读盘。</p><p>主键索引是一棵B+树， 在这棵树上， 每次只能根据一个主键id查到一行数据。 因此， 回表肯定是一行行搜索主键索引的</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213400293.png" alt="image-20240421213400293"></p><p>如果随着a的值递增顺序查询的话， id的值就变成随机的， 那么就会出现随机访问， 性能相对较差。 虽然“按行查”这个机制不能改， 但是调整查询的顺序， 还是能够加速的。因为大多数的数据都是按照主键递增顺序插入得到的， 所以我们可以认为， 如果按照主键的递增顺序查询的话， 对磁盘的读比较接近顺序读， 能够提升读性能。</p><p>这就是MRR优化的设计思路。 此时， 语句的执行流程变成了这样：</p><ol><li><p>根据索引a， 定位到满足条件的记录， 将id值放入read_rnd_buffer中;</p></li><li><p>将read_rnd_buffer中的id进行递增排序；</p></li><li><p>排序后的id数组， 依次到主键id索引中查记录， 并作为结果返回。</p></li></ol><p><strong>Batched Key Access</strong></p><p>NLJ算法执行的逻辑是： 从驱动表t1， 一行行地取出a的值， 再到被驱动表t2去做join。 也就是说， 对于表t2来说， 每次都是匹配一个值。 这时， MRR的优势就用不上了。</p><p><strong>BNL算法的性能问题</strong></p><p>大表join操作虽然对IO有影响， 但是在语句执行结束后， 对IO的影响也就结束了。 但是，对Buffer Pool的影响就是持续性的， 需要依靠后续的查询请求慢慢恢复内存命中率。</p><p>也就是说， BNL算法对系统的影响主要包括三个方面：</p><ol><li><p>可能会多次扫描被驱动表， 占用磁盘IO资源；</p></li><li><p>判断join条件需要执行M*N次对比（M、 N分别是两张表的行数） ， 如果是大表就会占用非常多的CPU资源；</p></li><li><p>可能会导致Buffer Pool的热数据被淘汰， 影响内存命中率。</p></li></ol><h2 id="36-为什么临时表可以重名？"><strong>36 | 为什么临时表可以重名？</strong></h2><p><strong>内存表和临时表的概念</strong></p><ul><li><p>内存表， 指的是使用Memory引擎的表， 建表语法是create table engine=memory。 这种表的数据都保存在内存里， 系统重启的时候会被清空， 但是表结构还在。 除了这两个特性看上去比较“奇怪”外， 从其他的特征上看， 它就是一个正常的表。</p></li><li><p>临时表， 可以使用各种引擎类型 。 如果是使用InnoDB引擎或者MyISAM引擎的临时表， 写数据的时候是写到磁盘上的。 当然， 临时表也可以使用Memory引擎。</p></li></ul><p><strong>临时表的特性</strong></p><p>临时表在使用上有以下几个特点：</p><ol><li><p>建表语法是create temporary table …。</p></li><li><p>一个临时表只能被创建它的session访问， 对其他线程不可见。</p></li><li><p>临时表可以与普通表同名。</p></li><li><p>session A内有同名的临时表和普通表的时候， show create语句， 以及增删改查语句访问的是临时表。</p></li><li><p>show tables命令不显示临时表。</p></li></ol><p><strong>临时表的应用</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213557334.png" alt="image-20240421213557334"></p><p><strong>为什么临时表可以重名？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">create</span> temporary <span class="keyword">table</span> temp_t(id <span class="type">int</span> <span class="keyword">primary</span> key)engine<span class="operator">=</span>innodb;</span><br></pre></td></tr></table></figure><p>MySQL要给这个InnoDB表创建一个frm文件保存表结构定义， 还要有地方保存表数据。这个frm文件放在临时文件目录下， 文件名的后缀是.frm， 前缀是“#sql{进程id}_{线程id}_序列号”。 你可以使用select @@tmpdir命令， 来显示实例的临时文件目录。</p><h2 id="37-什么时候会使用内部临时表？"><strong>37 | 什么时候会使用内部临时表？</strong></h2><p><strong>union 执行流程</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> (<span class="keyword">select</span> <span class="number">1000</span> <span class="keyword">as</span> f) <span class="keyword">union</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t1 <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span> limit <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213647330.png" alt="image-20240421213647330"></p><ol><li><p>创建一个内存临时表， 这个临时表只有一个整型字段f， 并且f是主键字段。</p></li><li><p>执行第一个子查询， 得到1000这个值， 并存入临时表中。</p></li><li><p>执行第二个子查询：</p><p>i. 拿到第一行id=1000， 试图插入临时表中。 但由于1000这个值已经存在于临时表了， 违反了唯一性约束， 所以插入失败， 然后继续执行；</p><p>Sii. 取到第二行id=999， 插入临时表成功。</p></li><li><p>从临时表中按行取出数据， 返回结果， 并删除临时表， 结果中包含两行数据分别是1000和999。</p></li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213702537.png" alt="image-20240421213702537"></p><p>可以看到， 这里的内存临时表起到了暂存数据的作用， 而且计算过程还用上了临时表主键id的唯一性约束， 实现了union的语义。</p><p><strong>group by 执行流程</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">select</span> id<span class="operator">%</span><span class="number">10</span> <span class="keyword">as</span> m, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> c <span class="keyword">from</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> m;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213717901.png" alt="image-20240421213717901"></p><p>在Extra字段里面， 我们可以看到三个信息：</p><ul><li><p>Using index， 表示这个语句使用了覆盖索引， 选择了索引a， 不需要回表；</p></li><li><p>Using temporary， 表示使用了临时表；</p></li><li><p>Using filesort， 表示需要排序。</p></li></ul><p>这个语句的执行流程是这样的：</p><ol><li><p>创建内存临时表， 表里有两个字段m和c， 主键是m；</p></li><li><p>扫描表t1的索引a， 依次取出叶子节点上的id值， 计算id%10的结果， 记为x；</p></li></ol><ul><li><p>如果临时表中没有主键为x的行， 就插入一个记录(x,1);</p></li><li><p>如果表中有主键为x的行， 就将x这一行的c值加1；</p></li></ul><ol start="3"><li>遍历完成后， 再根据字段m做排序， 得到结果集返回给客户端。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421213743352.png" alt="image-20240421213743352"></p><p><strong>指导原则</strong></p><ol><li><p>如果对group by语句的结果没有排序要求， 要在语句后面加 order bynull；</p></li><li><p>尽量让group by过程用上表的索引， 确认方法是explain结果里没有Using temporary和 Using filesort；</p></li><li><p>如果group by需要统计的数据量不大， 尽量只使用内存临时表； 也可以通过适当调大tmp_table_size参数， 来避免用到磁盘临时表；</p></li><li><p>如果数据量实在太大， 使用SQL_BIG_RESULT这个提示， 来告诉优化器直接使用排序算法得到group by的结果。</p></li></ol><p><strong>数据库中已经设置buffer，为什么还要有临时表这个东西，除了存储在磁盘上还有其他的好处吗</strong>?</p><ol><li><strong>缓冲区（Buffer）</strong>：缓冲区是用来存储数据页的内存区域，它的主要作用是提高数据库的性能。当数据库需要读取或写入数据时，首先将数据页加载到内存的缓冲区中，这样数据库可以直接在内存中进行操作，而不必每次都访问磁盘。这样做的好处是减少了磁盘I/O操作的次数，加快了数据的访问速度，提高了数据库的性能。</li><li><strong>临时表（Temporary Table）</strong>：临时表是一种特殊类型的表，它在数据库中的生命周期通常比普通表短暂，它的数据通常不会持久保存，而是在会话结束或者事务提交后被删除。临时表通常用于临时存储数据、中间计算结果等，它们可以帮助简化复杂的查询或者操作，提高查询的可读性和性能。</li></ol><h2 id="38-都说InnoDB好，-那还要不要使用Memory引擎？"><strong>38 | 都说InnoDB好，</strong> <strong>那还要不要使用Memory引擎？</strong></h2><p><strong>内存表的数据组织结构</strong></p><p>假设有以下的两张表t1 和 t2， 其中表t1使用Memory引擎， 表t2使用InnoDB引擎。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421214154359.png" alt="image-20240421214154359"></p><p>可以看到， 内存表t1的返回结果里面0在最后一行， 而InnoDB表t2的返回结果里0在第一行。表t2用的是InnoDB引擎， 它的主键索引id的组织方式， 你已经很熟悉了： InnoDB表的数据就放在主键索引树上， 主键索引是B+树。 所以表t2的数据组织方式如下图所示：</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421214201995.png" alt="image-20240421214201995"></p><p>与InnoDB引擎不同， Memory引擎的数据和索引是分开的。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421214207021.png" alt="image-20240421214207021"></p><p>可见， InnoDB和Memory引擎的数据组织方式是不同的：</p><ul><li>InnoDB引擎把数据放在主键索引上， 其他索引上保存的是主键id。 这种方式， 我们称之为索引组织表（IndexOrganizied Table）</li><li>而Memory引擎采用的是把数据单独存放， 索引上保存数据位置的数据组织形式， 我们称之为堆组织表（Heap Organizied Table）</li></ul><p>从中我们可以看出， 这两个引擎的一些典型不同</p><ol><li><p>InnoDB表的数据总是有序存放的， 而内存表的数据就是按照写入顺序存放的；</p></li><li><p>当数据文件有空洞的时候， InnoDB表在插入新数据的时候， 为了保证数据有序性， 只能在固定的位置写入新值， 而内存表找到空位就可以插入新值；</p></li><li><p>数据位置发生变化的时候， InnoDB表只需要修改主键索引， 而内存表需要修改所有索引；</p></li><li><p>InnoDB表用主键索引查询时需要走一次索引查找， 用普通索引查询的时候， 需要走两次索引查找。 而内存表没有这个区别， 所有索引的“地位”都是相同的。</p></li><li><p>InnoDB支持变长数据类型， 不同记录的长度可能不同； 内存表不支持Blob 和 Text字段， 并且即使定义了varchar(N)， 实际也当作char(N)， 也就是固定长度字符串来存储， 因此内存表的每行数据长度相同。</p></li></ol><p><strong>hash索引和B-Tree索引</strong></p><p>存表也是支B-Tree索引的。 在id列上创建一个B-Tree索引， SQL语句可以这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> index a_btree_index <span class="keyword">using</span> btree (id);</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421214257739.png" alt="image-20240421214257739"></p><p><strong>内存表的锁</strong></p><p>内存表不支持行锁， 只支持表锁。 因此， 一张表只要有更新， 就会堵住其他所有在这个表上的读写操作。</p><p><strong>数据持久性问题</strong></p><p>数据放在内存中， 是内存表的优势， 但也是一个劣势。 因为， 数据库重启的时候， 所有的内存表都会被清空。内存表并不适合在生产环境上作为普通数据表使用 。</p><ol><li><p>如果你的表更新量大， 那么并发度是一个很重要的参考指标， InnoDB支持行锁， 并发度比内存表好；</p></li><li><p>能放到内存表的数据量都不大。 如果你考虑的是读的性能， 一个读QPS很高并且数据量不大的表， 即使是使用InnoDB， 数据也是都会缓存在InnoDB Buffer Pool里的。 因此， 使用InnoDB表的读性能也不会差。</p></li></ol><p>建议你把普通内存表都用InnoDB表来代替</p><p>内存临时表刚好可以无视内存表的两个不足， 主要是下面的三个原因：</p><ol><li><p>临时表不会被其他线程访问， 没有并发性的问题；</p></li><li><p>临时表重启后也是需要删除的， 清空数据这个问题不存在；</p></li><li><p>备库的临时表也不会影响主库的用户线程。</p></li></ol><h2 id="39-自增主键为什么不是连续的？"><strong>39 | 自增主键为什么不是连续的？</strong></h2><p><strong>自增值保存在哪儿？</strong></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421214411507.png" alt="image-20240421214411507"></p><p>可以看到， 表定义里面出现了一个AUTO_INCREMENT=2， 表示下一次插入数据时， 如果需要自动生成自增值， 会生成id=2。其实， 这个输出结果容易引起这样的误解： 自增值是保存在表结构定义里的。 实际上， 表的结构定义存放在后缀名为.frm的文件中， 但是并不会保存自增值。</p><p>不同的引擎对于自增值的保存策<strong>略不同。MyISAM引擎的自增值保存在数据文件中。InnoDB引擎的自增值， 其实是保存在了内存里， 并且到了MySQL 8.0版本后， 才有了“自增值持久化”的能力， 也就是才实现了“如果发生重启， 表的自增值可以恢复为MySQL重启前的值”</strong>。</p><p><strong>自增值修改机制</strong></p><p>在MySQL里面，如果字段id被定义为AUTO_INCREMENT，在插入一行数据的时候，自增值的行为如下：</p><ol><li>如果插入数据时id字段指定为0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT值填到自增字段；</li><li>如果插入数据时id字段指定了具体的值，就直接使用语句里指定的值。</li></ol><p><strong>自增值的修改时机</strong></p><p><strong>唯一键冲突导致自增主键id不连续</strong></p><p>假设，表t里面已经有了(1,1,1)这条记录，这时我再执行一条插入数据命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">1</span>); </span><br></pre></td></tr></table></figure><p>这个语句的执行流程就是：</p><ol><li>执行器调用InnoDB引擎接口写入一行，传入的这一行的值是(0,1,1);</li><li>InnoDB发现用户没有指定自增id的值，获取表t当前的自增值2；</li><li>将传入的行的值改成(2,1,1);</li><li>将表的自增值改成3；</li><li>继续执行插入数据操作，由于已经存在c=1的记录，所以报Duplicate key error，语句返回。</li></ol><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421214727022.png" alt="image-20240421214727022"></p><p>可以看到，这个表的自增值改成3，是在真正执行插入数据的操作之前。这个语句真正执行的时候，因为碰到唯一键c冲突，所以id=2这一行并没有插入成功，但也没有将自增值再改回去。</p><p><strong>事务回滚导致自增主键id不连续</strong></p><p>同样道理。</p><p>思考：为什么<strong>自增值为什么不能回退？</strong></p><p>【简单来说，在多事务执行下回退会出现重复】</p><p>下面举例子说明。</p><p>假设有两个并行执行的事务，在申请自增值的时候，为了避免两个事务申请到相同的自增id，肯定要加锁，然后顺序申请。</p><ol><li>假设事务A申请到了id=2， 事务B申请到id=3，那么这时候表t的自增值是4，之后继续执行。</li><li>事务B正确提交了，但事务A出现了唯一键冲突。</li><li>如果允许事务A把自增id回退，也就是把表t的当前自增值改回2，那么就会出现这样的情况：表里面已经有id=3的行，而当前的自增id值是2。</li><li>接下来，继续执行的其他事务就会申请到id=2，然后再申请到id=3。这时，就会出现插入语句报错“主键冲突”。</li></ol><p>而为了解决这个主键冲突，有两种方法：</p><ol><li>每次申请id之前，先判断表里面是否已经存在这个id。如果存在，就跳过这个id。但是，这个方法的成本很高。因为，本来申请id是一个很快的操作，现在还要再去主键索引树上判断id是否存在。</li><li>把自增id的锁范围扩大，必须等到一个事务执行完成并提交，下一个事务才能再申请自增id。这个方法的问题，就是锁的粒度太大，系统并发能力大大下降。</li></ol><p>可见，这两个方法都会导致性能问题。</p><p><strong>MySQL内部机制</strong></p><p>对于批量插入数据的语句，MySQL有一个批量申请自增id的策略：</p><ol><li>语句执行过程中，第一次申请自增id，会分配1个；</li><li>1个用完以后，这个语句第二次申请自增id，会分配2个；</li><li>2个用完以后，还是这个语句，第三次申请自增id，会分配4个；</li><li>依此类推，同一个语句去申请自增id，每次申请到的自增id个数都是上一次的两倍。</li></ol><p>举个例子，我们一起看看下面的这个语句序列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2 <span class="keyword">like</span> t;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2(c,d) <span class="keyword">select</span> c,d <span class="keyword">from</span> t;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="number">5</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>insert…select，实际上往表t2中插入了4行数据。但是，这四行数据是分三次申请的自增id，第一次申请到了id=1，第二次被分配了id=2和id=3， 第三次被分配到id=4到id=7。</p><p>由于这条语句实际只用上了4个id，所以id=5到id=7就被浪费掉了。之后，再执行insert into t2 values(null, 5,5)，实际上插入的数据就是（8,5,5)。</p><h2 id="40-insert语句的锁为什么这么多？"><strong>40 | insert语句的锁为什么这么多？</strong></h2><p>insert …select 是很常见的在两个表之间拷贝数据的方法。 你需要注意， 在可重复读隔离级别下， 这个语句会给select的表里扫描到的记录和间隙加读锁。</p><p>而如果insert和select的对象是同一个表， 则有可能会造成循环写入。 这种情况下， 我们需要引入用户临时表来做优化。<br>insert 语句如果出现唯一键冲突， 会在冲突的唯一值上加共享的next-keylock(S锁)。 因此， 碰到由于唯一键约束导致报错后， 要尽快提交或回滚事务， 避免加锁时间过长。</p><h2 id="41-怎么最快地复制一张表？"><strong>41 | 怎么最快地复制一张表？</strong></h2><p><strong>mysqldump方法</strong></p><p>SQL mysqldump -h$host -P$port -u$user --add-locks=0 --no-create-info --single-transaction --set-gtid-purged=OFF db1</p><p>这条命令中， 主要参数含义如下：</p><ol><li><p>–single-transaction的作用是， 在导出数据的时候不需要对表db1.t加表锁， 而是使用STARTTRANSACTION WITH CONSISTENTSNAPSHOT的方法；</p></li><li><p>–add-locks设置为0， 表示在输出的文件结果里， 不增加&quot; LOCKTABLES t WRITE;&quot;；</p></li><li><p>–no-create-info的意思是， 不需要导出表结构；</p></li><li><p>–set-gtid-purged=off表示的是， 不输出跟GTID相关的信息；</p></li><li><p>–result-file指定了输出文件的路径， 其中client表示生成的文件是在客户端机器上的。<br>通过这条mysqldump命令生成的t.sql文件中就包含了如图1所示的INSERT语句。</p></li></ol><p><strong>导出CSV文件</strong></p><p>另一种方法是直接将结果导出成.csv文件。 MySQL提供了下面的语法， 用来将查询结果导出到服务端本地目录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> db1.t <span class="keyword">where</span> a<span class="operator">&gt;</span><span class="number">900</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/server_tmp/t.csv&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>物理拷贝</strong></p><h2 id="42-grant之后要跟着flush-privileges吗？"><strong>42 | grant之后要跟着flush privileges吗？</strong></h2><p>grant之后真的需要执行flush privileges吗？</p><p>如果没有执行这个flush命令的话， 赋权语句真的不能生效吗？grant语句会同时修改数据表和内存， 判断权限的时候使用的是内存数据。 因此， 规范地使用grant和revoke语句， 是不需要随后加上flush privileges语句的。flush privileges语句本身会用数据表的数据重建一份内存权限数据， 所以在权限数据可能存在不一致的情况下再使用。 而这种不一致往往是由于直接用DML语句操作系统权限表导致的， 所以我们尽量不要使用这类语句。</p><h2 id="43-要不要使用分区表？"><strong>43 | 要不要使用分区表？</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t` (</span><br><span class="line">  `ftime` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  KEY (`ftime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">YEAR</span>(ftime))</span><br><span class="line">(<span class="keyword">PARTITION</span> p_2017 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2017</span>) ENGINE <span class="operator">=</span> InnoDB,</span><br><span class="line"> <span class="keyword">PARTITION</span> p_2018 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2018</span>) ENGINE <span class="operator">=</span> InnoDB,</span><br><span class="line"> <span class="keyword">PARTITION</span> p_2019 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2019</span>) ENGINE <span class="operator">=</span> InnoDB,</span><br><span class="line"><span class="keyword">PARTITION</span> p_others <span class="keyword">VALUES</span> LESS THAN MAXVALUE ENGINE <span class="operator">=</span> InnoDB);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="string">&#x27;2017-4-1&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;2018-4-1&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>在表t中初始化插入了两行记录， 按照定义的分区规则， 这两行记录分别落在p_2018和p_2019这两个分区上。可以看到， 这个表包含了一个.frm文件和4个.ibd文件， 每个分区对应一个.ibd文件。 也就是说：对于引擎层来说， 这是4个表；对于Server层来说， 这是1个表。</p><p><strong>分区策略</strong></p><ul><li><p>MyISAM分区表使用的分区策略， 我们称为通用分区策略（generic partitioning） ， 每次访问分区都由server层控制。 通用分区策略， 是MySQL一开始支持分区表的时候就存在的代码， 在文件管理、 表管理的实现上很粗糙， 因此有比较严重的性能问题。</p></li><li><p>从MySQL 5.7.9开始， InnoDB引擎引入了本地分区策略（native partitioning） 。 这个策略是在InnoDB内部自己管理打开分区的行为。</p></li><li><p>MySQL从5.7.17开始， 将MyISAM分区表标记为即将弃用(deprecated)， 意思是“从这个版本开始不建议这么使用， 请使用替代方案。 在将来的版本中会废弃这个功能”。</p></li><li><p>从MySQL 8.0版本开始， 就不允许创建MyISAM分区表了， 只允许创建已经实现了本地分区策略的引擎。 目前来看， 只有InnoDB和NDB这两个引擎支持了本地分区策略。</p></li></ul><p><strong>分区表的server层行为</strong></p><p>如果从server层看的话， 一个分区表就只是一个表。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421215158558.png" alt="image-20240421215158558"></p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240421215203807.png" alt="image-20240421215203807"></p><p>可以看到， 虽然session B只需要操作p_2107这个分区， 但是由于session A持有整个表t的MDL锁， 就导致了session B的alter语句被堵住。</p><ol><li><p>MySQL在第一次打开分区表的时候， 需要访问所有的分区；</p></li><li><p>在server层， 认为这是同一张表， 因此所有分区共用同一个MDL锁；</p></li><li><p>在引擎层， 认为这是不同的表， 因此MDL锁之后的执行过程， 会根据分区表规则，只访问必要的分区。</p></li></ol><p>有两个问题需要注意：</p><ol><li>分区并不是越细越好。 实际上， 单表或者单分区的数据一千万行， 只要没有特别大的索引，对于现在的硬件能力来说都已经是小表了。</li><li>分区也不要提前预留太多， 在使用之前预先创建即可。 比如， 如果是按月分区， 每年年底时再把下一年度的12个新分区创建上即可。 对于没有数据的历史分区， 要及时的drop掉。</li></ol><p>至于分区表的其他问题， 比如查询需要跨多个分区取数据， 查询性能就会比较慢， 基本上就不是分区表本身的问题， 而是数据量的问题或者说是使用方式的问题了。</p><h2 id="44-答疑文章（三）-：-说一说这些好问题"><strong>44 | 答疑文章（三）</strong> <strong>：</strong> <strong>说一说这些好问题</strong></h2><h2 id="45-自增id用完怎么办？"><strong>45 | 自增id用完怎么办？</strong></h2><p>MySQL里面的几种自增id， 一起分析一下它们的值达到上限以后，会出现什么情况。2^32 -1（4294967295） 不是一个特别大的数， 对于一个频繁插入删除数据的表来说， 是可能会被用完的。 因此在建表的时候你需要考察你的表是否有可能达到这个上限， 如果有可能， 就应该创建成8个字节的bigint unsigned。</p><p><strong>InnoDB系统自增row_id</strong></p><p>如果你创建的InnoDB表没有指定主键， 那么InnoDB会给你创建一个不可见的， 长度为6个字节的row_id。 InnoDB维护了一个全局的dict_sys.row_id值， 所有无主键的InnoDB表， 每插入一行数据， 都将当前的dict_sys.row_id值作为要插入数据的row_id， 然后把dict_sys.row_id的值加1。</p><p>每种自增id有各自的应用场景， 在达到上限后的表现也不同：</p><ol><li><p>表的自增id达到上限后， 再申请时它的值就不会改变， 进而导致继续插入数据时报主键冲突的错误。</p></li><li><p>row_id达到上限后， 则会归0再重新递增， 如果出现相同的row_id， 后写的数据会覆盖之前的数据。</p></li><li><p>Xid只需要不在同一个binlog文件中出现重复值即可。 虽然理论上会出现重复值， 但是概率极小， 可以忽略不计。</p></li><li><p>InnoDB的max_trx_id 递增值每次MySQL重启都会被保存起来， 所以我们文章中提到的脏读的例子就是一个必现的bug， 好在留给我们的时间还很充裕。</p></li><li><p>thread_id是我们使用中最常见的， 而且也是处理得最好的一个自增id逻辑了。</p></li></ol><h2 id="面试高频知识"><strong>面试高频知识</strong></h2><p>搬运自知乎</p><p>1、一条 sql 语句是如何执行的？也就是说，从客户端执行了一条 sql 命令，服务端会进行哪些处理？（例如验证身份，是否启用缓存啥的）</p><p>2、索引相关：索引是如何实现的？多种引擎的实现区别？聚族索引，非聚族索引，二级索引，唯一索引、最左匹配原则等等（非常重要）</p><p>3、事务相关：例如事务的隔离是如何实现的？事务是如何保证原子性？不同的事务看到的数据怎么就不一样了？难道每个事务都拷贝一份视图？MVCC 的实现原理（重要）等等。</p><p>4、各种锁相关：例如表锁，行锁，间隙锁，共享锁，排他锁。这些锁的出现主要是用来解决哪些问题？（重要）</p><p>5、日志相关：redolog，binlog，undolog，这些日志的实现原理，为了解决怎么问题？日志也是非常重要的吧，面试也问的挺多。</p><p>6、数据库的主从备份、如何保证数据不丢失、如何保证高可用等等。</p><p>7、一些故障排查的命令，例如慢查询，sql 的执行计划，索引统计的刷新等等。</p>]]></content>
    
    
    <summary type="html">MySQL实战45讲</summary>
    
    
    
    <category term="MySQL" scheme="https://penge666.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://penge666.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Cpp基础知识</title>
    <link href="https://penge666.github.io/posts/4772239d.html"/>
    <id>https://penge666.github.io/posts/4772239d.html</id>
    <published>2024-04-19T06:52:18.000Z</published>
    <updated>2024-05-04T03:38:47.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>内功学习推荐</p><ul><li>CSAPP 第七章：链接</li><li>程序员的自我修养：第2，3，4，6章</li></ul><h2 id="基础知识">基础知识</h2><h3 id="形参带默认值">形参带默认值</h3><p>形参带默认值的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum1</span><span class="params">(<span class="type">int</span> a=<span class="number">2</span>, <span class="type">int</span> b=<span class="number">4</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">sum</span>(a, b);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ret:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note1</strong></p></blockquote><p>若是传入实参，则使用的就是你的实参。没有传入就使用形参的默认值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a=<span class="number">1</span>,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fun</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bug</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span><span class="number">5</span>E<span class="operator">:</span>\CPP\<span class="number">996.</span>cpp[<span class="literal">Error</span>] <span class="keyword">default</span> argument missing <span class="keyword">for</span> parameter <span class="number">2</span> <span class="keyword">of</span> <span class="symbol">&#x27;int</span> <span class="keyword">fun</span>(<span class="type">int</span>, <span class="type">int</span>)&#x27;</span><br></pre></td></tr></table></figure><p>Note：形参给默认值的时候，只能从右向左给。因为压栈的时候是从右向左压的。</p><blockquote><p><strong>Note2</strong></p></blockquote><p>调用形参带默认值的函数，其效率与不带的比较？</p><ul><li>效率是增长了，毕竟少了mov指令</li></ul><p>汇编查看</p><ul><li>pre</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01112156  mov         eax,dword ptr [b]  【ebp-8】</span><br><span class="line">01112159  push        eax  </span><br><span class="line">0111215A  mov         ecx,dword ptr [a]  【ebp-4】</span><br><span class="line">0111215D  push        ecx  </span><br><span class="line">0111215E  call        sum (01111406h)  </span><br></pre></td></tr></table></figure><ul><li>now</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0111217A  push        14h  </span><br><span class="line">0111217C  push        0Ah  </span><br><span class="line">0111217E  call        sum (01111406h)  </span><br></pre></td></tr></table></figure><blockquote><p><strong>Note3</strong></p></blockquote><p>函数形参变量给默认值，定义处可以声明也可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">sum</span>(a, b);</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">sum</span>(a);</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">sum</span>();</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">sum</span>(a, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note4</strong></p></blockquote><p>函数声明可以很多次，定义只有一次。但是形参给默认值，不管是在定义处还是声明处给，形参默认值只能出现一次。</p><h3 id="内联inline">内联inline</h3><p>内联函数和普通函数的区别：</p><ol><li>inline函数在编译过程中，没有函数调用的开销。在函数调用点（int ret = sum(a, b);）直接把函数的代码进行展开处理。</li><li>inline函数(内联成功)不会在符号表中生成相应的函数符号。</li><li>inline只是建议编译器把这个函数处理为内联函数，但是编译器最终决定是否处理为内联函数的。</li><li>可以通过命令查看：objdump -t main.o。就看在符号表里面有没有产生符号，若内联成功肯定没有符号。</li><li>在debug版本上，inline是不起作用的(也有普通函数的调用开销)，因为是debug版本需要调试的。</li></ol><p>Note：递归不会产生内联。</p><p>具体代码规范参考《Google Style C++》</p><h3 id="函数重载">函数重载</h3><blockquote><p>pro1：C++为什么支持函数重载，但是C语言不支持？</p></blockquote><p>编译器编译代码产生符号的规则不同。</p><ol><li>C++代码产生函数符号的时候，是由 <strong>函数名+参数列表类型</strong> 组成的。</li><li>C语言产生函数符号的时候，是只由函数名来决定的。（在C语言中，函数名相同，所以就会产生链接错误：找到多个函数的定义）</li></ol><blockquote><p>pro2：函数重载需要注意些什么？</p></blockquote><p>函数重载：一组函数，其函数名相同，参数列表的个数或者类型不同，那么这一组函数就可以称作为函数重载。一组函数要称得上重载，一定得先处于同一个作用域当中的。重载函数名字都一样，在编译器编译的过程中会根据函数调用的时候 传入的实参的类型来选择合适的函数重载版本。</p><p>注意点</p><ol><li>函数重载定义：<strong>一组函数，其函数名相同，参数列表的个数或者类型不同</strong>，那么这一组函数就可以称作为函数重载。</li><li>一组函数要称得上重载，<strong>一定得先处于同一个作用域当中的</strong>（从函数调用点来看，这组函数是处于同一个作用域 。注：在函数中不可以定义函数，可以声明函数，但是需要注意其中的作用域问题）</li><li>当给参数加上const或者volatile（标准的C/C++的关键字）的时候，是怎么影响形参类型的？(下面会进行详解)</li><li>一组函数，函数名相同，参数列表也相同，仅仅是返回值不同？<strong>这不是重载</strong> 。</li></ol><ul><li><strong>返回值相不相同和函数重载没有任何关系</strong>，函数重载的主要原因就是：虽然看起来函数名相同但最终生成的符号是不同的。因为符号是函数名+形参列表。</li></ul><p>程序1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare_int_int&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare_double_double&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare_const char*_const char*&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10.0</span>, <span class="number">20.0</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compare_int_int</span><br><span class="line">compare_double_double</span><br><span class="line">compare_const char*_const char*</span><br></pre></td></tr></table></figure><p>程序2：不同作用域</p><p><strong>在C和C++里面，在函数里面再定义一个函数是不行的，但是声明一个函数是可以的。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare_int_int&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare_double_double&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare_const char*_const char*&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10.0</span>, <span class="number">20.0</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2420E:\CPP\996.cpp[Error] invalid conversion from <span class="string">&#x27;const char*&#x27;</span> to <span class="string">&#x27;int&#x27;</span> [-fpermissive]</span><br></pre></td></tr></table></figure><p>分析：在C语言和C++中，都是分作用域的。在函数里面也可以定义一个和全局变量同名的局部变量，作用域不同 是可以定义同名变量。<strong>在使用这个变量的时候，会优先使用在当前最近的作用域下找这个变量。</strong></p><p>程序3：当给参数加上const或者volatile</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fun</span>(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65E:\CPP\996.cpp[Error] redefinition of <span class="string">&#x27;int func(int)&#x27;</span></span><br></pre></td></tr></table></figure><p>对于编译器而言，两个func的形参类型都是int。相当于函数重定义了</p><blockquote><p>**补充：**C++和C语言代码之间如何相互调用？</p></blockquote><p>在说这个问题之前，需要先了解下两者之间的差异。</p><p>最大的差异是C++支持函数重载，而C语言不支持。为了使函数支持重载，C++在C语言的基础上，将函数名添加上返回值和参数的类型信息。例如，int add(int, int)这个函数，通过C++编译器编译后，可能呈现的函数名为int int_add_int_int(int, int)。因此调用过程在链接阶段可能会出现错误。</p><blockquote><p><strong>C调用C++</strong></p></blockquote><ol><li>将函数用extern &quot;C&quot;声明。</li><li>C代码中不要include C++的头文件, 而采用直接在C中增加函数声明的方式。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*C++ code*/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// your code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*C code*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;  <span class="comment">// 不引入, 而只是直接声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cc</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">f</span>(i);  <span class="comment">//调用</span></span><br><span class="line"><span class="comment">// other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>C++调用C</strong></p></blockquote><p>cfun.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------cfun.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __C_FUN_20180228_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __C_FUN_20180228_H__</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __cplusplus</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cfun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>#ifdef __cplusplus， 表示如果是C++来调用该接口，则该函数接口经编译后的函数符号生成规则按照C风格走, 否则没有extern “C” ， 这样提供的接口同时支持C和C++两者的调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------cfun.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cfun.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cfun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cfun.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cfun</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const修饰">const修饰</h3><blockquote><p><strong>const是什么？</strong></p></blockquote><p>const修饰的变量不能再作为左治，初始化完成，值不能修改！</p><blockquote><p><strong>const在C和C++中的区别？</strong></p></blockquote><ol><li><p>初始化</p><ul><li>C++中的const，必须初始化</li></ul></li><li><p>编译方式不一样：</p><ul><li>C中，const就是当作一个变量[常变量]来编译生成指令</li></ul></li></ol><ul><li>C++中，所有出现const常量名字的地方，都会常量的初始值代替</li></ul><h3 id="const和一级指针">const和一级指针</h3><p>待填坑…</p><h3 id="const和二级指针">const和二级指针</h3><p>待填坑…</p><h2 id="面向对象">面向对象</h2><p>Q：OOP语言的四大特征是什么？</p><p>A：抽象 ，封装（隐藏）， 继承， 多态。</p><p>Q：封装（隐藏）体现在？</p><p>A：使用的访问限定符 （public private protected）</p><p>Q：对象的内存大小计算</p><p>A：对象的内存大小只依赖于 成员变量，与成员方法的多少无关。算成员变量的大小是和结构体变量的内存计算方式一样：先找占用内存最长的成员变量，以其为内存字节对齐的方式。然后计算出总的对象的大小。</p><p>Note：静态成员变量不占用对象大小。</p><p>类有无数个对象，每个对象都有自己的成员变量，但是共享一套成员方法【方法放在代码段】</p><p>Q：当用对象调用类里面的同一套方法时，这个方法是怎么知道处理哪个对象的信息呢？</p><p>A：this 指针：this 是 C++ 中的一个关键字，也是一个 const 指针，它指向当前对象，通过它可以访问当前对象的所有成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="built_in">init</span>();<span class="comment">// 编译器给加的：init(A *const this,...)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">a.<span class="built_in">init</span>();<span class="comment">// 编译器给加的： init(&amp;a,...)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的成员方法经过编译，所有方法参数都会加上this指针，接受该方法的对象地址。</p><p>Q：对象的构造函数和析构函数的时机？</p><p>A：先构造的后析构，后构造的先析构</p><p>Q：动态和静态定义对象？</p><p>A：静态建立一个类对象， 是由编译器为对象在栈空间中分配内存， 通过直接移动栈顶指针挪出适当的空间， 然后在这片内存空间上调用构造函数形成一个栈对象。 动态建立类对象， 是使用new运算符将对象建立在堆空间中， 在栈中只保留了指向该对象的指针。</p><p>Q：深拷贝和浅拷贝？</p><p>对象默认的拷贝构造是在做内存的数据拷贝。在new的时候会存在问题。</p><p>case1:默认拷贝构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A a=b;(等于A <span class="built_in">a</span>(b))</span><br></pre></td></tr></table></figure><p>case2:默认赋值函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A a;</span><br><span class="line">a=b;</span><br></pre></td></tr></table></figure><p>Q：看看下面代码哪错了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;typeinfo&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;functional&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a)&#123;</span><br><span class="line">a_=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> aa)&#123;</span><br><span class="line">tmp=<span class="built_in">A</span>(aa);</span><br><span class="line">&#125;</span><br><span class="line">A tmp; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>构造函数初始化列表的时候，tmp=A(aa)赋值语句本质是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A tmp</span><br><span class="line">tmp=<span class="built_in">A</span>(aa)</span><br></pre></td></tr></table></figure><p>由于A类中提供了有参构造，因此，不会生成默认的无参构造。所以A tmp报错。</p><p>如果修改正确？</p><p>方式1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;typeinfo&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;functional&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a)&#123;</span><br><span class="line">a_=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> aa):<span class="built_in">tmp</span>(<span class="built_in">A</span>(aa))&#123;</span><br><span class="line">&#125;</span><br><span class="line">A tmp; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>方式2：</p><p>在A中添加无参构造。</p><p>Q：构造函数初始化顺序问题？</p><p>A：结论：谁先定义，谁先初始化。因为C++的·对象模型在内存中是连续的！</p><p>Q：类的成员方法有哪些？区别是什么？</p><p>A：</p><ul><li>普通方法要用对象调用=》编译会产生this指针</li><li>静态方法用类的作用域调用=》没有this指针</li></ul><h2 id="模板编程">模板编程</h2><h3 id="函数模板">函数模板</h3><p>函数模板 ： 是不进行编译的，因为（形参a b）类型还不知道。（区分函数模板很简单，前面看有没有加template和模板参数列表）。</p><p>模板的实例化：是在函数调用点进行实例化（由用户指定的类型，或实参推演出的类型）。</p><p>模板函数： 在函数调用点，编译器用用户指定的类型，从原模板实例化一份函数代码出来。这是真真正正需要代码编译（编译器编译）的函数。</p><p>模板的实参推演 ：可以根据用户传入的实参的类型，来推导出模板类型参数的具体类型。</p><p>模板代码是不能在一个文件中定义，在另外一个文件中使用的。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240503193134169.png" alt="image-20240503193134169"></p><p>针对某些类型来说，依赖编译器默认实例化的模板代码，代码处理逻辑是有错误的。</p><p>因此，使用模板的特例化的实例化。</p><p>下面来看个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//定义一个模板参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用T类型 定义具体的形参变量</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;template compare&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//针对compare函数模板，提供const char *类型的特例化版本</span></span><br><span class="line"><span class="comment">//不可省略：表示这个特例化也是从上面的模板来的，先有模板才有特例化。</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">compare</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;compare&lt;const char*&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////非模板函数</span></span><br><span class="line"><span class="comment">//bool compare(const char* a, const char* b)&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;普通的compare&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//return strcmp(a, b) &gt; 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">compare</span>(<span class="string">&quot;11&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>Note:模板的非类型参数，都是常量</strong></p><h3 id="类模板">类模板</h3><p>类模板的使用实际上是类模板实例化成一个具体的类（而非模板类）。模板参数列表里面一般都是定义参数，用来初始化类型的。即都是定义模板类型参数。模板类型参数：&lt; &gt; 里面可以由typename/class定义 模板 类型参数T （可以定义多个，由，隔开）T用来接收 类型的。</p><p>直接来个例子练练手吧~</p><p>实现C++ STL向量容器vector。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="type">int</span>&gt;<span class="comment">//定义模板类型参数</span></span><br><span class="line"><span class="keyword">class</span> MyVector</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyVector</span>(<span class="type">int</span> size = <span class="number">5</span>)<span class="comment">//底层开辟5个元素的空间</span></span><br><span class="line">&#123;</span><br><span class="line">_first = <span class="keyword">new</span> T[size];</span><br><span class="line">_last = _first;</span><br><span class="line">_end = _first + size;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">MyVector</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]_first;</span><br><span class="line">_first = _last = _end = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MyVector</span>(<span class="type">const</span> MyVector&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = src._end - src._first;<span class="comment">//总的空间 个数</span></span><br><span class="line">_first = <span class="keyword">new</span> T[size];</span><br><span class="line">_end = _first + size;</span><br><span class="line"><span class="type">int</span> len = src._last - src._first;<span class="comment">//有效长度</span></span><br><span class="line">_last = _first + len;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">_first[i] = src._first[i];<span class="comment">//把值赋过来</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">MyVector&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyVector&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]_first;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = src._end - src._first;<span class="comment">// 总的空间 个数</span></span><br><span class="line">_first = <span class="keyword">new</span> T[size];</span><br><span class="line">_end = _first + size;</span><br><span class="line"><span class="type">int</span> len = src._last - src._first;<span class="comment">// 有效长度</span></span><br><span class="line">_last = _first + len;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">_first[i] = src._first[i];<span class="comment">// 把值赋过来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">// 向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">resize</span>();</span><br><span class="line">&#125;</span><br><span class="line">*_last++ = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span><span class="comment">// 向容器末尾删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">*_last--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">getValueBack</span><span class="params">()</span><span class="type">const</span><span class="comment">// 返回容器末尾的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(_last - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last == _end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _first == _last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cursize</span><span class="params">()</span><span class="type">const</span><span class="comment">//元素的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last - _first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _first;<span class="comment">// 数组起始位置</span></span><br><span class="line">T* _last;<span class="comment">// 最后一个有效元素的 后继</span></span><br><span class="line">T* _end;<span class="comment">// 数组最后一个空间位置的  后继</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">()</span><span class="comment">// 容器的2倍扩容</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;resize()&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> size = <span class="built_in">cursize</span>() * <span class="number">2</span>;</span><br><span class="line">T* newfirst = <span class="keyword">new</span> T[size];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">cursize</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">newfirst[i] = _first[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]_first;</span><br><span class="line">_first = newfirst;</span><br><span class="line">_last = _first + size / <span class="number">2</span>;</span><br><span class="line">_end = _first + size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyVector&lt;&gt;myvec;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前容器的容量是：&quot;</span> &lt;&lt; myvec.<span class="built_in">cursize</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">myvec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前容器的容量是：&quot;</span> &lt;&lt; myvec.<span class="built_in">cursize</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> (!myvec.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myvec.<span class="built_in">getValueBack</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">myvec.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前容器的容量是：&quot;</span> &lt;&lt; myvec.<span class="built_in">cursize</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="理解容器空间配置器allocator">理解容器空间配置器allocator</h3><p>为什么要提出这个东东呢？</p><p>先来看个例子，PS：代码示例虽然长，但是比起文字更有力量！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;</span><br><span class="line">p=<span class="keyword">new</span> T[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()&#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">&#125;</span><br><span class="line">T *p;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Test()\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Test</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;~Test()\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A&lt;Test&gt; a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test()</span><br><span class="line">Test()</span><br><span class="line">Test()</span><br><span class="line">Test()</span><br><span class="line">Test()</span><br><span class="line">~Test()</span><br><span class="line">~Test()</span><br><span class="line">~Test()</span><br><span class="line">~Test()</span><br><span class="line">~Test()</span><br></pre></td></tr></table></figure><p>这一个空的容器，竟然给我构造了5个 Test对象。出了作用域，又析构了5个Test对象。我现在就只是实例化一个这个空的vector容器。</p><p>若是用户传入了个 10000，那么他只是想 定义一个容器对象。然后就给人家构造了10000个对象，这不是人家想要的。</p><p><strong>因此</strong>，现在的需求：需要把内存开辟 和 对象的构造分开处理。在定义容器对象的时候，需要做的只是 底层开辟空间（只是给容器这个数组开辟空间，而不去构造对象）。</p><p>废话少说，直接看代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义容器的空间配置器，和C++标准库的allocator实现一样</span></span><br><span class="line"><span class="comment">//默认的内存管理都是free malloc（也可以采用内存池的方式）</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Allocator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">T* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> size)</span> <span class="comment">// 只负责内存开辟</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (T*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(T) * size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* p)</span> <span class="comment">// 只负责内存释放</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span> <span class="comment">// 只负责对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在我们指定的地址里面构造一个值为val的对象</span></span><br><span class="line"><span class="comment">//在一个已经存在 开辟好的内存上去构造一个值为val的对象</span></span><br><span class="line"><span class="keyword">new</span> (p) <span class="built_in">T</span>(val); <span class="comment">// 定位new    T类型的拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">(T* p)</span> <span class="comment">// 只负责对象析构</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;~<span class="built_in">T</span>(); <span class="comment">// ~T()代表了T类型的析构函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">容器底层内存开辟，内存释放，对象构造和析构，</span></span><br><span class="line"><span class="comment">都通过allocator空间配置器来实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="type">int</span>,<span class="keyword">typename</span> Alloc=Allocator&lt;T&gt;&gt;<span class="comment">//定义模板类型参数</span></span><br><span class="line"><span class="keyword">class</span> MyVector</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyVector</span>(<span class="type">int</span> size = <span class="number">5</span>)<span class="comment">//底层开辟5个元素的空间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//需要把内存开辟和对象的构造分开处理</span></span><br><span class="line"><span class="comment">//_first = new T[size];</span></span><br><span class="line"></span><br><span class="line">_first = _allocator.<span class="built_in">allocate</span>(size);</span><br><span class="line">_last = _first;</span><br><span class="line">_end = _first + size;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">MyVector</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//析构容器里面有效的元素，再去释放_first指向的堆内存</span></span><br><span class="line"><span class="comment">//delete[]_first;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (T* p = _first; p != _last; ++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//把_first指针指向的数组的有效元素进行析构操作</span></span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">_allocator.<span class="built_in">deallocate</span>(_first);<span class="comment">// 释放堆上的数组内存</span></span><br><span class="line">_first = _last = _end = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MyVector</span>(<span class="type">const</span> MyVector&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = src._end - src._first;<span class="comment">//总的空间 个数</span></span><br><span class="line"><span class="comment">//_first = new T[size];</span></span><br><span class="line"></span><br><span class="line">_first = _allocator.<span class="built_in">allocate</span>(size);</span><br><span class="line">_end = _first + size;</span><br><span class="line"><span class="type">int</span> len = src._last - src._first;<span class="comment">//有效长度</span></span><br><span class="line">_last = _first + len;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//_first[i] = src._first[i];//把值赋过来</span></span><br><span class="line"></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_first + i, src._first[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">MyVector&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyVector&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete[]_first;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (T* p = _first; p != _last; ++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//把_first指针指向的数组的有效元素进行析构操作</span></span><br><span class="line">_allocator.<span class="built_in">destory</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">_allocator.<span class="built_in">deallocate</span>(_first);<span class="comment">// 释放堆上的数组内存</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = src._end - src._first;<span class="comment">//总的空间 个数</span></span><br><span class="line"><span class="comment">//_first = new T[size];</span></span><br><span class="line"></span><br><span class="line">_first = _allocator.<span class="built_in">allocate</span>(size);</span><br><span class="line">_end = _first + size;</span><br><span class="line"><span class="type">int</span> len = src._last - src._first;<span class="comment">//有效长度</span></span><br><span class="line">_last = _first + len;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//_first[i] = src._first[i];//把值赋过来</span></span><br><span class="line"></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_first + i, src._first[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">//向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">resize</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*_last= val;</span></span><br><span class="line"><span class="comment">//_last++;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//_last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span><span class="comment">//向容器末尾删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//_last--;// 不仅要把_last指针--，还需要析构删除的元素</span></span><br><span class="line">--_last;</span><br><span class="line">_allocator.<span class="built_in">destroy</span>(_last);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">getValueBack</span><span class="params">()</span><span class="type">const</span><span class="comment">//返回容器末尾的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(_last - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last == _end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _first == _last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cursize</span><span class="params">()</span><span class="type">const</span><span class="comment">//元素的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last - _first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _first;<span class="comment">//数组起始位置</span></span><br><span class="line">T* _last;<span class="comment">//最后一个有效元素的 后继</span></span><br><span class="line">T* _end;<span class="comment">//数组最后一个空间位置的  后继</span></span><br><span class="line">Alloc _allocator;<span class="comment">//定义的容器 空间配置器对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">()</span><span class="comment">//容器的2倍扩容</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;resize()&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> size = <span class="built_in">cursize</span>() * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//T* newfirst = new T[size];</span></span><br><span class="line"></span><br><span class="line">T* newfirst = _allocator.<span class="built_in">allocate</span>(size);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">cursize</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">construct</span>(newfirst + i, _first[i]);</span><br><span class="line"><span class="comment">//newfirst[i] = _first[i];</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//delete[]_first;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (T* p = _first; p != _last; ++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//把_first指针指向的数组的有效元素进行析构操作</span></span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">_allocator.<span class="built_in">deallocate</span>(_first);<span class="comment">// 释放堆上的数组内存</span></span><br><span class="line"></span><br><span class="line">_first = newfirst;</span><br><span class="line">_last = _first + size / <span class="number">2</span>;</span><br><span class="line">_end = _first + size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>() &#123; cout &lt;&lt; <span class="string">&quot;Test()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">Test</span>() &#123; cout &lt;&lt; <span class="string">&quot;~Test()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="built_in">Test</span>(<span class="type">const</span> Test&amp;) &#123; cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1, t2, t3;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++++++++++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//MyVector&lt;&gt;myvec;//定义了一个容器，里面并没有添加元素</span></span><br><span class="line">MyVector&lt;Test&gt;myvec;<span class="comment">//用Test类型 实例化一下这个vector容器</span></span><br><span class="line">myvec.<span class="built_in">push_back</span>(t1);</span><br><span class="line">myvec.<span class="built_in">push_back</span>(t2);</span><br><span class="line">myvec.<span class="built_in">push_back</span>(t3);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++++++++++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line">myvec.<span class="built_in">pop_back</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++++++++++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过空间配置器的功能，就可以很好的解决上面的问题。</p><blockquote><p><strong>补充：定位new运算符</strong></p></blockquote><p>定位new（placement new）是C++中的一种new操作符，它允许在已分配的内存中构造对象。这种构造方式不会为对象分配新的内存，而是在已经存在的内存中创建对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;MyClass constructed\n&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> a) &#123; std::cout &lt;&lt; <span class="string">&quot;MyClass constructed:&quot;</span>&lt;&lt;a&lt;&lt;std::endl; &#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;MyClass destroyed\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">50</span>]; <span class="comment">// 分配一块内存</span></span><br><span class="line"></span><br><span class="line">    MyClass *p = <span class="built_in">new</span> (buffer) <span class="built_in">MyClass</span>(<span class="number">10</span>); <span class="comment">// 在已分配的内存中构造对象</span></span><br><span class="line"></span><br><span class="line">    p-&gt;~<span class="built_in">MyClass</span>(); <span class="comment">// 手动调用析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载">运算符重载</h2><p><strong>Note1:</strong></p><p>++ --单目运算符<br>operator++() 前置++<br>operator++(int) 后置++</p><h3 id="String类的实现">String类的实现</h3><p>实现String类，并支持以下功能：</p><ol><li>支持默认构造</li><li>说明string类 里面有string（const char*参数)的构造函数</li><li>里面有 加法运算符的重载函数</li><li>里面有类内实现的：支持对象+ const char*的</li><li>还要全局实现的：const char*+对象</li></ol><p>Note：strlen§表示字符串有效字符个数，但是字符后面存在\0,因此申请大小的时候要加1.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(str_, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *str_ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] str_;</span><br><span class="line">        str_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝构造</span></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(obj.str_) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(str_, obj.str_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 赋值运算,保证可以连续赋值</span></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;obj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] str_;</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(obj.str_) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(str_, obj.str_);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(str_, obj.str_) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(str_, obj.str_) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(str_, obj.str_) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strlen</span>(str_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> &amp;<span class="keyword">operator</span>[](<span class="type">int</span> index) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str_[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">c_str</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 在一个类中指明其他的类（或者）函数能够直接访问该类中的private和protected成员</span></span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;des, <span class="type">const</span> String src);</span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, String &amp;src);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> String &amp;src);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *str_;</span><br><span class="line">&#125;;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> String &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; src.str_;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line">istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, String &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    in &gt;&gt; src.str_;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;des, <span class="type">const</span> String src)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *newstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(des.str_) + <span class="built_in">strlen</span>(src.str_) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(newstr, des.str_);</span><br><span class="line">    newstr = <span class="built_in">strcat</span>(newstr, src.str_);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(newstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String c = a + b;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a&gt;b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a&lt;b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成以上示例，我们还要继续完善，如果给String类加迭代器呢？就好像使用的是原生的一样呢？</p><p>完善的代码。迭代器只要去嵌套个类即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str = <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(str_, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *str_ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] str_;</span><br><span class="line">        str_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝构造</span></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(obj.str_) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(str_, obj.str_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 赋值运算,保证可以连续赋值</span></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;obj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] str_;</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(obj.str_) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(str_, obj.str_);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(str_, obj.str_) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(str_, obj.str_) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(str_, obj.str_) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strlen</span>(str_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> &amp;<span class="keyword">operator</span>[](<span class="type">int</span> index) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str_[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">c_str</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">iterator</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">iterator</span>(<span class="type">char</span> *p = <span class="literal">nullptr</span>) : <span class="built_in">p_</span>(p) &#123;&#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> iterator &amp;it)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> it.p_ != p_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">void</span> <span class="keyword">operator</span>++()</span><br><span class="line">        &#123;</span><br><span class="line">            p_++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> &amp;<span class="keyword">operator</span>*()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *p_;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">char</span> *p_;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(str_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(str_ + <span class="built_in">length</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 在一个类中指明其他的类（或者）函数能够直接访问该类中的private和protected成员</span></span><br><span class="line">    <span class="keyword">friend</span> String</span><br><span class="line">    <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;des, <span class="type">const</span> String src);</span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, String &amp;src);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> String &amp;src);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *str_;</span><br><span class="line">&#125;;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> String &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; src.str_;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line">istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, String &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    in &gt;&gt; src.str_;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;des, <span class="type">const</span> String src)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *newstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(des.str_) + <span class="built_in">strlen</span>(src.str_) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(newstr, des.str_);</span><br><span class="line">    newstr = <span class="built_in">strcat</span>(newstr, src.str_);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(newstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String c = a + b;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a&gt;b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a&lt;b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = c.<span class="built_in">begin</span>(); it != c.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们讨论个常见的问题：<strong>容器的迭代器 iterator失效</strong></p><p>迭代器失效通常发生在对容器进行修改操作后。下面是一些常见的情况：</p><ol><li><strong>向容器中添加元素</strong>：如果容器的内部存储空间不足以容纳新的元素，容器可能需要分配新的内存空间，将所有元素移动到新的位置。在这种情况下，指向容器中元素的所有迭代器都会失效。</li><li><strong>从容器中删除元素</strong>：删除元素会导致容器中后面的元素向前移动，填补空出的位置。在这种情况下，指向被删除元素和它之后的元素的迭代器都会失效。</li><li><strong>对容器进行排序或重新排列</strong>：这些操作会改变元素的位置，导致指向容器中元素的迭代器失效。</li><li><strong>清空容器</strong>：清空容器后，指向容器中任何元素的迭代器都会失效。</li></ol><h3 id="Vector类的实现">Vector类的实现</h3><p>【重点】在上述的vector代码继续完善insert erase的实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyAllocator</span>    <span class="comment">//自定义的空间配置器，负责内存管理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">T* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> size)</span><span class="comment">//负责开辟内存</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (T*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(T) * size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* p)</span><span class="comment">//负责回收内存</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p, <span class="type">const</span> T&amp; val)</span><span class="comment">//负责 对象构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p)<span class="built_in">T</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">(T* p)</span><span class="comment">//负责对象析构</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;~<span class="built_in">T</span>();<span class="comment">//~T()代表了T类型的析构函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">容器底层内存开辟，内存释放，对象构造和析构</span></span><br><span class="line"><span class="comment">都通过allocator空间配置器来实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="type">int</span>,<span class="keyword">typename</span> Allo= MyAllocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> MyVector</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyVector</span>(<span class="type">int</span> size = <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//需要把内存开辟 和 对象构造分开，不能用new</span></span><br><span class="line">_first = _allocator.<span class="built_in">allocate</span>(size);</span><br><span class="line">_last = _first;</span><br><span class="line">_end = _first + size;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">MyVector</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//先析构容器里面的有效的元素</span></span><br><span class="line"><span class="keyword">for</span> (T* p = _first; p != _last; ++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把_first指针指向的数组的有效元素进行析构操作</span></span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后释放_first 指向的堆内存</span></span><br><span class="line">_allocator.<span class="built_in">deallocate</span>(_first);</span><br><span class="line">_first = _last = _end = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MyVector</span>(<span class="type">const</span> MyVector&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> size = src._last - src._first;<span class="comment">//有效元素的个数</span></span><br><span class="line"><span class="type">int</span> len = src._end - src._first;<span class="comment">//空间总长度</span></span><br><span class="line">_first = _allocator.<span class="built_in">allocate</span>(len);</span><br><span class="line">_last = _first + size;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)</span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">construct</span>(_first + i, src._first[i]);</span><br><span class="line">&#125;</span><br><span class="line">_end = _first + len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyVector&lt;T&gt;<span class="keyword">operator</span>=(<span class="type">const</span> MyVector&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;= 运算符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先析构容器里面的有效的元素</span></span><br><span class="line"><span class="keyword">for</span> (T* p = _first; p != _last; ++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把_first指针指向的数组的有效元素进行析构操作</span></span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后释放_first 指向的堆内存</span></span><br><span class="line">_allocator.<span class="built_in">deallocate</span>(_first);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = src._last - src._first;<span class="comment">//有效元素的个数</span></span><br><span class="line">_first = _allocator.<span class="built_in">allocate</span>(size);</span><br><span class="line">_last = _first + size;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">construct</span>(_first + i, src._first[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = src._end - src._first;<span class="comment">//空间总长度</span></span><br><span class="line">_end = _first + len;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; val)</span><span class="comment">// 向容器末尾添加元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">resize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//_last指针指向的内存构造一个值为val的对象</span></span><br><span class="line">_allocator.<span class="built_in">construct</span>(_last, val);</span><br><span class="line">_last++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">getBack</span><span class="params">()</span><span class="type">const</span><span class="comment">// 返回容器末尾的元素的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(_last - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span><span class="comment">// 从容器末尾删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是从当前末尾元素进行删除的 需要把那个 失效一下</span></span><br><span class="line"><span class="built_in">checkIterator</span>(_last - <span class="number">1</span>, _last);</span><br><span class="line"><span class="comment">// 不仅要把_last指针--，还需要析构删除的元素</span></span><br><span class="line">_allocator.<span class="built_in">destroy</span>(--_last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last == _end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last == _first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _last - _first;</span><br><span class="line">&#125;</span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index)<span class="comment">//myv[4]  下标运算符的重载</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;下标运算符的重载&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">getSize</span>())</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;index 不合法&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> _first[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器一般实现成容器类的嵌套类</span></span><br><span class="line"><span class="comment">// 给vector类型提供迭代器的实现</span></span><br><span class="line"><span class="comment">//作为vector的嵌套类，为了迭代向量的底层数组</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">MyVector</span>&lt;T, Allo&gt;;</span><br><span class="line"><span class="built_in">iterator</span>(MyVector&lt;T, Allo&gt;* ptrVec=<span class="literal">nullptr</span>,T*_p=<span class="literal">nullptr</span>)</span><br><span class="line"> :_p(_p),_ptrVec(ptrVec)</span><br><span class="line">&#123;</span><br><span class="line">Iterator_Base* newIter = </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Iterator_Base</span>(<span class="keyword">this</span>, _ptrVec-&gt;_head._next);</span><br><span class="line">_ptrVec-&gt;_head._next = newIter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两个对于字符串的迭代器的不等于</span></span><br><span class="line"><span class="comment">// 迭代器的不等于就是底层指针的不等于</span></span><br><span class="line"><span class="comment">// 迭代器的指向 就是 vector数组底层指针的指向</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> iterator&amp; it)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查迭代器的有效性</span></span><br><span class="line"><span class="keyword">if</span> (_ptrVec == <span class="literal">nullptr</span> || _ptrVec != it._ptrVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;iterator 不匹配!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _p != it._p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置++ 不会产生临时量，就是修改当前对象的值 再返回</span></span><br><span class="line"><span class="comment">//后置++ 需要把原对象的值返回  再修改当前对象的值</span></span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查迭代器的有效性</span></span><br><span class="line"><span class="keyword">if</span> (_ptrVec == <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;iterator 无效的!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">++_p;<span class="comment">//给迭代器 成员变量++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常方法：普通对象 常对象都可以调用</span></span><br><span class="line"><span class="type">const</span> T&amp; <span class="keyword">operator</span>*()<span class="type">const</span><span class="comment">//只读 常方法</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">// 检查迭代器的有效性</span></span><br><span class="line"><span class="keyword">if</span> (_ptrVec == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;iterator 无效的!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *_p; </span><br><span class="line">&#125;</span><br><span class="line">T&amp; <span class="keyword">operator</span>*() <span class="comment">//可读可写</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查迭代器的有效性</span></span><br><span class="line"><span class="keyword">if</span> (_ptrVec == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;iterator 无效的!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *_p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _p;</span><br><span class="line"><span class="comment">//当前迭代器需要知道 它在迭代哪种容器对象</span></span><br><span class="line">MyVector&lt;T, Allo&gt;* _ptrVec;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要给容器提供begin end方法</span></span><br><span class="line"><span class="comment">// begin返回的是容器底层 首元素 的迭代器的表示</span></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 用_first这个指向数组首元素地址的 指针</span></span><br><span class="line"><span class="comment">// 构造一个iterator</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="keyword">this</span>,_first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end返回的是容器末尾(有效的)元素后继位置的迭代器的表示</span></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="keyword">this</span>,_last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkIterator</span><span class="params">(T* first, T* last)</span><span class="comment">// 检查迭代器失效</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Iterator_Base* preIter = &amp;<span class="keyword">this</span>-&gt;_head;<span class="comment">// 指向头结点</span></span><br><span class="line">Iterator_Base* curIter = <span class="keyword">this</span>-&gt;_head._next;<span class="comment">// 指向第一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (curIter != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;<span class="comment">//迭代的地址 在这个失效区间里面  则把这个迭代器失效一下</span></span><br><span class="line"><span class="keyword">if</span> (curIter-&gt;_curiterator-&gt;_p &gt; first &amp;&amp;</span><br><span class="line"> curIter-&gt;_curiterator-&gt;_p &lt;= last)</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 迭代器失效，把iterator持有的容器指针置nullptr</span></span><br><span class="line">curIter-&gt;_curiterator-&gt;_ptrVec = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// 删除当前迭代器节点，继续判断后面的迭代器节点是否失效</span></span><br><span class="line">preIter-&gt;_next = curIter-&gt;_next;</span><br><span class="line"><span class="keyword">delete</span> curIter;</span><br><span class="line">curIter = preIter-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">preIter = curIter;</span><br><span class="line">curIter = curIter-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义实现vector容器的insert方法</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it, <span class="type">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.不考虑扩容 verify(_first - 1, _last);</span></span><br><span class="line"><span class="comment">//2.不考虑it._ptr的指针合法性</span></span><br><span class="line"><span class="built_in">checkIterator</span>(it._p - <span class="number">1</span>, _last);</span><br><span class="line">T* p = _last;</span><br><span class="line"><span class="keyword">while</span> (p &gt; it._p)<span class="comment">//元素依次后移</span></span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">construct</span>(p, *(p - <span class="number">1</span>));</span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p - <span class="number">1</span>);</span><br><span class="line">--p;</span><br><span class="line">&#125;</span><br><span class="line">_allocator.<span class="built_in">construct</span>(p, val); </span><br><span class="line">_last++;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//最后返回一个当前位置的新的迭代器</span></span><br><span class="line"><span class="comment">//把当前对象 this传进去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义实现vector容器的erase方法</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1.不考虑扩容 verify(_first - 1, _last);</span></span><br><span class="line"><span class="comment">// 2.不考虑it._ptr的指针合法性</span></span><br><span class="line"><span class="built_in">checkIterator</span>(it._p - <span class="number">1</span>, _last);</span><br><span class="line">T* p = it._p;</span><br><span class="line"><span class="keyword">while</span> ( p&lt;_last<span class="number">-1</span>)<span class="comment">//元素依次前移</span></span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">_allocator.<span class="built_in">construct</span>(p, *(p + <span class="number">1</span>));</span><br><span class="line">++p;</span><br><span class="line">&#125;</span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">_last--;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="keyword">this</span>, it._p);</span><br><span class="line"><span class="comment">// 最后返回一个当前位置的新的迭代器</span></span><br><span class="line"><span class="comment">// 把当前对象 this传进去</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _first;<span class="comment">// 指向数组起始的位置</span></span><br><span class="line">T* _last;<span class="comment">// 指向数组中有效元素的后继位置</span></span><br><span class="line">T* _end;<span class="comment">// 指向数组空间的后继位置</span></span><br><span class="line">Allo _allocator;<span class="comment">// 定义容器的空间配置器对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;resize()&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> size = _last - _first;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> newsize = size * <span class="number">2</span>;</span><br><span class="line">T* newfirst = _allocator.<span class="built_in">allocate</span>(newsize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">construct</span>(newfirst + i, _first[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (T* p = _first; p != _last; ++p)</span><br><span class="line">&#123;</span><br><span class="line">_allocator.<span class="built_in">destroy</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">_allocator.<span class="built_in">deallocate</span>(_first);</span><br><span class="line">_first = newfirst;</span><br><span class="line">_last = _first + size;</span><br><span class="line">_end = _first + newsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Iterator_Base</span> <span class="comment">// 容器迭代器失效增加</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Iterator_Base</span>(iterator* curiterator=<span class="literal">nullptr</span>,</span><br><span class="line"> Iterator_Base* next=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_curiterator = curiterator;</span><br><span class="line">_next = next;</span><br><span class="line">&#125;</span><br><span class="line">iterator* _curiterator;</span><br><span class="line">Iterator_Base* _next;</span><br><span class="line">&#125;;</span><br><span class="line">Iterator_Base _head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyVector&lt;&gt; <span class="built_in">myv</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">myv.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//要使用iterator</span></span><br><span class="line">MyVector&lt;&gt;::iterator it = myv.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span> (; it != myv.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 使用 iterator 是通用做法，提供[]只适合内存连续 有意义的</span></span><br><span class="line"><span class="comment">// 使用[]运算符重载</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; myv.<span class="built_in">getSize</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myv[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用C++11 的foeach</span></span><br><span class="line"><span class="comment">//其底层原理就是通过iterator来实现容器遍历的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : myv)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!myv.<span class="built_in">empty</span>())<span class="comment">//进行打印 OK的</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; myv.<span class="built_in">getBack</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">myv.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : myv)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//在容器里面，在容器的奇数前面 都添加上一个小于1的偶数</span></span><br><span class="line">MyVector&lt;<span class="type">int</span>&gt;::iterator it1 = myv.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it1 != myv.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((*it1) % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">it1 = myv.<span class="built_in">insert</span>(it1, (*it1) - <span class="number">1</span>);</span><br><span class="line">++it1;</span><br><span class="line">&#125;</span><br><span class="line">++it1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : myv)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//把容器中的奇数都删掉</span></span><br><span class="line">MyVector&lt;<span class="type">int</span>&gt;::iterator it2 = myv.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it2 != myv.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((*it2) % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">it2 = myv.<span class="built_in">erase</span>(it2);</span><br><span class="line"><span class="keyword">else</span> ++it2;<span class="comment">//没有删除</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val : myv)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="new和delete">new和delete</h3><p>new delete两个运算符的调用，实质上也是两个运算符重载函数的调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> -&gt; <span class="keyword">operator</span> <span class="keyword">new</span></span><br><span class="line"><span class="keyword">delete</span> -&gt; <span class="keyword">operator</span> <span class="keyword">delete</span></span><br></pre></td></tr></table></figure><p>new和malloc的区别：</p><ol><li>malloc是按字节开辟内存的:malloc(sizeof(int)10);它不管内存上放什么数据的。开辟完内存之后返回的是void 需要人为的类型强转。而new开辟内存时需要指定类型，并直接给出开辟元素的个数。new int[10];实质上调用operator new（），返回的类型就是自动的就是你给定的类型指针。int* 。</li><li>malloc只负责开辟内存，而new不仅仅具有malloc的功能，还具有数据的初始化操作。</li><li>malloc开辟内存失败 返回nullptr；new的则是抛出bad_alloc类型的异常（不可以进行与nullptr的比较），需要把new开辟内存的代码放在 try catch里面。</li><li>malloc开辟单个元素和数组的内存都是一样的（给字节数就行）；new的 对于单个字符不需要加上[]的,对于数组需要加[]并指定个数就可以了。</li></ol><p>free与delete的区别：</p><ol><li>delete 需要先进行调用析构函数，再free内存。但是对于 delete (int*)p，和free（p）是一样的。因为int 类型没有什么析构函数，只剩下内存释放。</li></ol><h2 id="继承与多态">继承与多态</h2><h3 id="继承">继承</h3><p>继承的本质：</p><ol><li>代码复用</li><li>在基类中提供统一的虚函数接口，让派生类重写，然后就可以使用多态</li></ol><p>类和类之间的关系：</p><ol><li>组合: a part of … …一部分的关系</li><li>继承: a kind of … …一种的关系</li></ol><p><strong>访问限定符权限</strong></p><table><thead><tr><th>继承方式</th><th>基类的访问限定</th><th>派生类的访问限定</th><th>(main)外部的访问限定</th></tr></thead><tbody><tr><td>public (class B : public A)</td><td>public</td><td>public 派生类里面可以访问</td><td>外部可以访问</td></tr><tr><td></td><td>protected</td><td>protected 派生类里面可以访问</td><td>外部不可以访问</td></tr><tr><td></td><td>private</td><td>不可见 派生类里面不可以访问</td><td>外部不可以访问</td></tr><tr><td>protected(class B: protected A)</td><td>public</td><td>protected 相当于降级为 protected</td><td>外部不可以访问</td></tr><tr><td></td><td>protected</td><td>protected 派生类里面可以访问</td><td>外部不可以访问</td></tr><tr><td></td><td>private</td><td>不可见 派生类里面不可以访问</td><td>外部不可以访问</td></tr><tr><td>protected(class B: private A)</td><td>public</td><td>private 相当于降级为 private 派生类里面可以访问</td><td>外部不可以访问</td></tr><tr><td></td><td>protected</td><td>private 相当于降级为 private 派生类里面可以访问</td><td>外部不可以访问</td></tr><tr><td></td><td>private</td><td>不可见 派生类里面不可以访问</td><td>外部不可以访问</td></tr></tbody></table><p>总结：</p><ol><li>外部只能访问对象 public 成员， protected 和 private 的成员无法直接访问</li><li>在继承结构中， 派生类从基类可以继承过来 private 的成员， 但是派生类无法直接访问</li><li>protected 和 private 的区别？ 在基类中定义的成员， 想被派生类访问， 但是不想被外部访问， 那么在基类中， 把相关成员定义成 protected 保护的； 如果派生类和外部都不打算访问， 那么在基类中， 就把相关成员定义成 private 私有的。</li></ol><p>protected 主要用于继承。</p><p><strong>默认的继承方式是什么？</strong></p><p>要看 派生类是用 class 定义的， 还是 struct 定义的。</p><ul><li>class 定义派生类， 默认继承方式是 private 私有的。class 的成员默认是 private 权限。</li><li>struct 定义派生类， 默认继承方式是 public 公有的。 struct 默认是 public 权限。</li></ul><p><strong>派生类的构造过程</strong></p><p>派生类从基类可以继承来所有的成员（变量和方法），<strong>除构造函数和析构函数</strong></p><p>派生类怎么初始化从基类继承来的成员变量呢？通过调用<strong>基类相应的构造函数来初始化</strong>。</p><p>派生类的构造函数和析构函数，负责初始化和清理派生类部分</p><p>派生类从基类继承来的成员由基类的构造函数和析构函数负责。</p><p><strong>派生类对象构造和析构的过程</strong></p><ol><li>派生类调用基类的构造函数，初始化从基类继承来的成员</li><li>调用派生类自己的构造函数，初始化派生类自己特有的成员</li><li>… 派生类对象的作用域到期了</li><li>调用派生类的析构函数，释放派生类成员可能占用的外部资源（堆内存，文件）</li><li>调用基类的析构函数，释放派生类内存中，从基类继承来的成员可能占用的外部资源（堆内存，文件）</li></ol><p><strong>派生类和基类赋值问题</strong></p><ul><li>派生类对象可以赋值给基类对象， 派生类对象中含有基类部分【多可以到少】</li><li>基类对象不可以赋值给派生类对象， 因为基类中不含派生类部分【多可以到少】</li><li>基类指针 （ 引用） 可以指向派生类， 但是只能访问派生类的基类部分</li><li>派生类指针 （ 引用） 不可以指向基类， 因为派生类的指针会超出基类对象的范围， 不合法【类型强转】</li></ul><h3 id="重载、隐藏、覆盖">重载、隐藏、覆盖</h3><p><strong>重载关系</strong></p><p>一组函数要重载，必须处在同一作用域中；而且函数名字相同，参数列表不同。</p><p><strong>隐藏关系</strong></p><p>在继承结构中，派生类的同名成员把基类的同名成员给隐藏了，也就是调用的时候调用的是派生类的成员函数。要调用基类那就加作用域，（比如 Base::show）</p><p>把继承结构也说成从上（基类）到下（派生类）的结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Base</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">Derive</span>(<span class="number">20</span>);</span><br><span class="line">b = d; <span class="comment">// 基类对象b &lt;- 派生类对象d类型从下到上的转换允许</span></span><br><span class="line">d = b; <span class="comment">// 派生类对象d &lt;- 基类对象b类型从上到下的转换不允许</span></span><br><span class="line">Base *pb = &amp;d; <span class="comment">// 基类指针（引用） &lt;- 派生类对象  类型从下到上的转换允许</span></span><br><span class="line">Derive *pd = &amp;b; <span class="comment">// 派生类指针（引用） &lt;- 基类对象。   类型从上到下的转换       不允许</span></span><br><span class="line"><span class="comment">// 在继承结构中进行上下的类型转换，默认只支持从下到上的类型转换</span></span><br></pre></td></tr></table></figure><h3 id="虚函数、静态绑定和动态绑定">虚函数、静态绑定和动态绑定</h3><p><strong>静态绑定和动态绑定的概念</strong></p><ul><li>静态绑定：静态–编译时期；绑定–函数的调用</li><li>动态绑定：动态–运行时期；绑定–函数的调用</li></ul><p><strong>虚函数 virtual</strong></p><ol><li><p>一个类里面定义了虚函数，那么编译阶段，编译器会给这个类类型产生一个唯一的 vftable 虚函数表，虚函数表中主要存储的内容就是 RTTI （run-time type information）指针和虚函数的地址。当程序运行时，每一张虚函数表都会加载到内存的 .rodata 区(read only data)。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240504104928494.png" alt="image-20240504104928494"></p></li><li><p>一个类里面定义了虚函数，那么这个类定义的对象，其运行时，内存中开始部分，多存储一个 vfptr 虚函数指针，指向相应类型的虚函数表 vftable。一个类型定义的 n 个对象，它们的 vfptr 指向的都是同一张虚函数表。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240504105018672.png" alt="image-20240504105018672"></p></li><li><p>一个类里面虚函数的个数，不影响对象内存大小(vfptr)，影响的是虚函数表的大小。</p></li><li><p>如果派生类中的方法，和基类继承来的某个方法，返回值、函数名、参数列表都相同，而且基类的方法是 virtual 虚函数，那么派生类的这个方法，自动处理成虚函数。</p></li><li><p>在派生类中的虚函数表， 如果重写了方法， 那么虚函数表中原本基类的虚函数地址， 被派生类的虚函数地址覆盖调用过程： 基类指针指向派生类对象， 调用函数， 先去基类查看函数的类型， 如果是普通函数， 那么就是静态绑定， 直接调用父类函数。 如果发现是虚函数， 那么进行动态绑定， 首先查看对象的前四个字节 （ 虚函数表） 找到虚函数中的虚函数地址。</p><p>​重写《=》覆盖</p><p><strong>覆盖：虚函数表中虚函数地址的覆盖</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="type">int</span> ma;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drive</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// virtual void show(),因为这个函数和基类同名，自动处理成虚函数</span></span><br><span class="line">    <span class="type">int</span> mb;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240504110035559.png" alt="image-20240504110035559"></p></li></ol><p>看个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base\n&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="type">int</span> ma;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drive</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Drive\n&quot;</span>; &#125; <span class="comment">// virtual void show(),因为这个函数和基类同名，自动处理成虚函数</span></span><br><span class="line">    <span class="type">int</span> mb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Drive d;</span><br><span class="line">    Base *p = (Base *)&amp;d;</span><br><span class="line">    p-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是Base类，当p调用的，p.show先去Base类中查看show是不是virtual：</p><ul><li>不是，则静态绑定，直接调用Base中的show方法。</li><li>是，则运行时期从代码看，运行时期指向子类Drive类，Drive类中存在从父类继承的虚函数表，那么就从中调用。</li></ul><p>如果这样呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="built_in">show</span>(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>也是动态绑定，调用子类的虚函数表中查找。</p><p>Q：哪些函数不能实现成虚函数？</p><p>虚函数依赖：</p><ol><li><p>虚函数能产生地址，存储在 vftable 当中</p></li><li><p>对象必须存在，(vfptr -&gt; vftable -&gt; 虚函数地址)</p></li></ol><p>构造函数：</p><ol><li>构造函数前面不能加 virtual</li><li>构造函数中（调用的任何函数都是静态绑定）调用虚函数，也不会进行动态绑定</li></ol><p>派生类对象构造过程 先调用基类的构造函数，然后才调用派生类的构造函数</p><ol start="3"><li>static 静态成员方法。对象都没有，也就不能 static 前面加 virtual</li></ol><p><strong>再谈动态绑定</strong></p><p>虚函数和动态绑定的问题：是不是虚函数的调用一定就是动态绑定？ 肯定不是的！</p><p>在类的构造函数中，调用虚函数，也是静态绑定（构造函数中调用其他函数（虚），不会发生动态绑定）</p><p>用对象本身调用虚函数，属于静态绑定</p><p>动态绑定，必须由指针调用虚函数（Base *pb1 = &amp;b;），或者必须由引用变量调用虚函数（Base &amp;rb1 = b;）</p><p><strong>虚函数通过指针或者引用变量调用，才发生动态绑定</strong></p><p><strong>多态</strong></p><ul><li><p>静态（编译时期）的多态：函数重载、模板（函数模板和类模板）</p></li><li><p>动态（运行时期）多态：在继承结构中，基类指针（引用）指向派生类对象，通过该指针（引用）调用同名覆盖方法（虚函数）。基类指针指向哪个派生类对象，就会调用哪个派生类对象的同名覆盖方法，称为多态。多态底层是通过动态绑定来实现的。</p></li></ul><p><strong>抽象类</strong></p><p>抽象类：有纯虚函数的类【为什么要有抽象类？属实不知道这个类抽象成什么实体】</p><p>抽象类不能再实例化对象了，到那时可以定义指针和引用变量。</p><p><strong>菱形继承</strong></p><p>待填坑。</p><h2 id="STL库">STL库</h2><ul><li><a href="https://mrbananazly.github.io/2023/03/22/cpp_STL_note/">初级STL笔记</a></li></ul><h2 id="对象优化">对象优化</h2><p>对象使用过程中调用了哪些方法</p><p>**case1:**C++编译器对于对象构造的优化。用临时对象生成新对象时，临时对象就不产生了。直接构造新对象即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test t4=<span class="built_in">Test</span>(<span class="number">20</span>) <span class="comment">// Test t4(20)；没有区别 《-拷贝构造</span></span><br></pre></td></tr></table></figure><p>**case2:**3个效果引用，都是赋值运算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>t4=<span class="built_in">Test</span>(<span class="number">20</span>)  <span class="comment">// </span></span><br><span class="line"><span class="number">2.</span>t4=(Test)<span class="number">20</span> <span class="comment">// 显式 【显式生成临时对象生命周期：所在语句】</span></span><br><span class="line"><span class="number">3.</span>t4=<span class="number">30</span>   <span class="comment">// 隐式</span></span><br></pre></td></tr></table></figure><p>case3:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test *p=&amp;<span class="built_in">Test</span>(<span class="number">40</span>) <span class="comment">// p指向的是一个已经析构的临时对象【之后就会有野指针了】</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> Test &amp;p = <span class="built_in">Test</span>(<span class="number">40</span>) <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>Test *p = &amp;Test(40)这行代码有问题，是因为Test(40)创建了一个临时对象，这个对象在该行代码执行完后就会被销毁，所以p指向的内存区域是未定义的，这样是非法的。</p><p>而const Test &amp;p = Test(40)则是合法的，这是因为const引用延长了临时对象的生命周期。在这种情况下，临时对象会一直存在，直到对应的const引用p不再使用。所以，p引用的对象在其生命周期内始终是有效的。</p><p>总的来说，这两种情况的区别在于const引用对临时对象的生命周期进行了延长，而普通指针则没有这个特性。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240504112620253.png" alt="image-20240504112620253"></p><p><strong>总结：3条对象优化规则</strong></p><ul><li><p>函数参数传递过程中，对象优先按引用传递。【防止对象切片】</p></li><li><p>函数返回的时候，应优先返回一个临时对象，而不要返回一个定义的对象。</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240504112419307.png" alt="image-20240504112419307"></p></li><li><p>接收返回值是对象的函数调用的时候，优先按初始化的方式接收，不要按照赋值方式接受</p><p><img src="https://penge666blog.oss-cn-beijing.aliyuncs.com/img/image-20240504112507471.png" alt="image-20240504112507471"></p></li></ul><p><strong>【精华】用临时对象生成新对象，临时对象就不产生了。</strong></p><h2 id="智能指针">智能指针</h2><p>为什么要有智能指针这个东西？裸指针不好吗？</p><p>裸指针到底有什么不好，比如下面的原因：</p><ol><li>有写free或者delete，忘记释放资源，导致资源泄露（发生了内存泄漏）</li><li>同一资源释放多次，导致释放野指针，程序崩溃</li><li>明明代码的后面写了释放资源的代码，但是由于程序逻辑满足条件，从中间return掉了，导致释放资源的代码未被执行到。</li><li>代码运行过程中一旦发生异常，随着异常栈展开，导致释放资源的代码未被执行到。</li></ol><p>那有没有什么办法自动负责管理这些资源。答案就是智能指针。</p><p><strong>智能指针的特点</strong>：主要体现在用户可以不关注资源的释放，因为智能指针会自动完全管理资源的释放，它会保证无论程序逻辑如何进行，正常执行还是发生异常，资源在到期的情况下，一定会进行资源的自动释放。智能指针就是对普通指针（裸指针）的一层封装（面向对象的），在构造函数中初始化资源地址，在析构函数中负责释放资源。利用栈上的对象出作用域会自动析构这么一个特点，把资源释放的代码全部放在这个析构函数中执行。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySmartptr</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MySmartptr</span>(T *ptr = <span class="literal">nullptr</span>) : <span class="built_in">ptr_</span>(ptr) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">MySmartptr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr_;</span><br><span class="line">        ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T *<span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_;</span><br><span class="line">    &#125;</span><br><span class="line">    T &amp;<span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *ptr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *ptr_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;show&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MySmartptr&lt;Test&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Test)</span></span>;</span><br><span class="line">    p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    (*p1).<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个问题：智能指针可不可以定义到堆上？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shared_ptr&lt;<span class="type">int</span>&gt; *p = <span class="keyword">new</span> <span class="built_in">shared_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>但是最后不是得手动·delete，那和裸指针没有区别了。</p><h3 id="不带引用计数的智能指针">不带引用计数的智能指针</h3><p>如果在最开始的示例中，改成如下语句，会发送什么事情？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MySmartptr&lt;Test&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Test)</span></span>;</span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line"><span class="function">MySmartptr&lt;Test&gt; <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br></pre></td></tr></table></figure><p>pro：在智能指针对象析构的时候，同一份资源释放了两次。第二次 是在释放野指针。也就是，我们常说的，默认拷贝构造函数：<strong>发生浅拷贝</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySmartptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MySmartptr</span>(T *ptr = <span class="literal">nullptr</span>) : <span class="built_in">ptr_</span>(ptr) &#123;&#125;</span><br><span class="line">    <span class="built_in">MySmartptr</span>(<span class="type">const</span> MySmartptr&lt;T&gt; &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr_ = <span class="keyword">new</span> <span class="built_in">T</span>(obj.ptr_);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因此，需要加上拷贝构造函数。</p><p>那智能指针这块是怎么解决这个浅拷贝问题呢？</p><p>不带引用计数的智能指针</p><ol><li>auto_ptr</li><li>scoped_ptr</li><li>unique_ptr</li></ol><blockquote><p><strong>auto_ptr</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">*p2=<span class="number">20</span>;</span><br><span class="line">cout&lt;&lt;*p1&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>程序运行崩溃！</p><p>查看源码就可以知道了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp1&gt;</span></span><br><span class="line"><span class="function"><span class="title">auto_ptr</span><span class="params">(auto_ptr&lt;_Tp1&gt;&amp; __a)</span> <span class="title">throw</span><span class="params">()</span> : _M_ptr(__a.release()) &#123;</span> &#125;</span><br></pre></td></tr></table></figure><p>release方法：把ptr1的 _ mptr值给ptr2的_ mptr，意思就是ptr2的_  mptr指向了原来ptr1的堆内存。然后把ptr1的_mptr置为nullptr，意思是ptr1放弃了堆内存的指向。</p><p>总结：auto_ptr解决浅拷贝的方法如下：<br>首先其成员变量只有一个裸指针，没有引用计数。<strong>永远让最后一个智能指针对象去 管理资源。其余前面的智能指针对象的_mptr置为nullptr，意思是他们放弃了堆内存的指向。</strong></p><blockquote><p><strong>scoped_ptr</strong></p></blockquote><p>scoped_ptr：不能拷贝构造和赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scoped_ptr</span>(scoped_ptr <span class="type">const</span> &amp;)=<span class="keyword">delete</span>;</span><br><span class="line">scoped_ptr &amp; <span class="keyword">operator</span>=(scoped_ptr <span class="type">const</span> &amp;)=<span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>unique_ptr</strong></p></blockquote><p>底层提供了移动拷贝和移动赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unique_ptr</span>(unique_ptr <span class="type">const</span> &amp;)=<span class="keyword">delete</span>;</span><br><span class="line">unique_ptr &amp; <span class="keyword">operator</span>=(unique_ptr <span class="type">const</span> &amp;)=<span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(move(p1))</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带引用计数的智能指针">带引用计数的智能指针</h3><p><strong>引用计数的智能指针：多个智能指针可以管理同一份资源。</strong></p><p>什么是带引用计数的智能指针？当允许多个智能指针对象指向同一个资源的时候，每一个智能指针对象都会给资源的引用计数加1，当一个智能指针对象析构时，同样会使资源的引用计数减1，这样最后一个智能指针把资源的引用计数从1减到0时，就说明该资源可以释放了，由最后一个智能指针对象的析构函数来处理资源的释放问题，这就是很好的解决了 智能指针的浅拷贝问题。</p><p><strong>shared_ptr和weak_ptr都是线程安全。</strong></p><p>来看个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//对资源进行引用计数的类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResouseCount</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ResouseCount</span>(T* mReptr = <span class="literal">nullptr</span>) :_mReptr(mReptr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ResouseCount()&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (_mReptr != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_mcount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> _mcount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">~<span class="built_in">ResouseCount</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~ResouseCount()&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> _mReptr;</span><br><span class="line">_mReptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addResouseCont</span><span class="params">()</span><span class="comment">//引用计数+1,增加资源的引用计数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_mcount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">delResouseCont</span><span class="params">()</span><span class="comment">//引用计数-1,减少资源的引用计数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_mcount--;</span><br><span class="line"><span class="keyword">return</span> _mcount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _mReptr;<span class="comment">//记录资源的地址</span></span><br><span class="line"><span class="type">int</span> _mcount;<span class="comment">//资源的引用计数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//智能指针 保证可以做到资源的自动释放</span></span><br><span class="line"><span class="comment">//利用栈上对象出作用域自动析构的特点，保证可以做到资源的自动释放</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySmartptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 在生成这个智能指针对象的时候，生成一个资源的引用计数对象</span></span><br><span class="line"><span class="built_in">MySmartptr</span>(T* mptr = <span class="literal">nullptr</span>) :_mptr(mptr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;MySmartptr()&quot;</span> &lt;&lt; endl;</span><br><span class="line">myRes = <span class="keyword">new</span> <span class="built_in">ResouseCount</span>&lt;T&gt;(_mptr);</span><br><span class="line"><span class="comment">//把_mptr传进去，即给这个资源建立了一个引用计数对象</span></span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">MySmartptr</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~MySmartptr()&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (myRes-&gt;<span class="built_in">delResouseCont</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _mptr;</span><br><span class="line">_mptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看似是在对 智能指针对象进行解引用，但是实际上是对底层的成员变量进行解引用</span></span><br><span class="line"><span class="comment">//返回值是引用，因为我们要改变指针指向的内存本身的值</span></span><br><span class="line">T&amp; <span class="keyword">operator</span> *()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_mptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给指向符  提供运算符重载函数 其实是：</span></span><br><span class="line"><span class="comment">(ptr2.operator-&gt;())-&gt;show();</span></span><br><span class="line"><span class="comment">即：智能指针对象调用指向符运算符重载函数，然后返回的结</span></span><br><span class="line"><span class="comment">果（返回智能指针对象底层管理的指针）再去调用后面的方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()<span class="comment">//指向 运算符重载函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _mptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数，当前的智能指针对象也要指向这个资源</span></span><br><span class="line"><span class="built_in">MySmartptr</span>(<span class="type">const</span> MySmartptr&lt;T&gt;&amp; src) </span><br><span class="line">:_mptr(src._mptr), <span class="built_in">myRes</span>(src.myRes)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;MySmartptr(const &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//引用了一个有效的资源</span></span><br><span class="line"><span class="comment">//相当于 两个智能指针对象都指向了这块资源，需要增加资源的引用计数</span></span><br><span class="line"><span class="keyword">if</span> (_mptr != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">myRes-&gt;<span class="built_in">addResouseCont</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">MySmartptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MySmartptr&lt;T&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;MySmartptr&lt;T&gt;&amp; operator=(const MySmartptr&lt;T&gt;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src)</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (myRes-&gt;<span class="built_in">delResouseCont</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _mptr;</span><br><span class="line">&#125;</span><br><span class="line">_mptr = src._mptr;</span><br><span class="line">myRes = src.myRes;<span class="comment">//当前智能指针也指向了这块资源</span></span><br><span class="line"></span><br><span class="line">myRes-&gt;<span class="built_in">addResouseCont</span>();<span class="comment">//当前资源的引用计数+1</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">拷贝构造函数 和 赋值运算符重载函数，并没有去开辟新的资源</span></span><br><span class="line"><span class="comment">而是给这个资源添加了引用计数。有效的避免了 多个智能指针引用同一块资源</span></span><br><span class="line"><span class="comment">然后对同一个资源进行多次的释放。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _mptr;<span class="comment">//指向资源的指针</span></span><br><span class="line">ResouseCount&lt;T&gt; * myRes;<span class="comment">//指向该资源引用计数对象的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MySmartptr&lt;<span class="type">int</span>&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">MySmartptr&lt;<span class="type">int</span>&gt; <span class="title">ptr2</span><span class="params">(ptr1)</span></span>;</span><br><span class="line">MySmartptr&lt;<span class="type">int</span>&gt; ptr3;</span><br><span class="line">ptr3 = ptr2;</span><br><span class="line"></span><br><span class="line">*ptr1 = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*ptr2:&quot;</span> &lt;&lt; *ptr2 &lt;&lt; <span class="string">&quot;   *ptr3:&quot;</span> &lt;&lt; *ptr3 &lt;&lt; endl;<span class="comment">//20 20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>myRes-&gt;delResouseCont()语句解释：</p><p>在这个函数中，myRes-&gt;delResouseCont()的作用是减少当前智能指针所指向资源的引用计数。这是因为在赋值操作中，我们假设当前的智能指针将不再指向原来的资源，因此需要减少原来资源的引用计数。接着，我们检查引用计数是否为0，如果是0，那么说明没有任何智能指针再指向这个资源了，因此我们可以安全地删除这个资源，这就是if (myRes-&gt;delResouseCont() == 0) { delete _mptr; }的作用。</p><h3 id="shared-ptr-的交叉引用问题">shared_ptr 的交叉引用问题</h3><ul><li>shared_ptr：强智能指针，可以改变资源的引用计数</li><li>weak_ptr：弱智能指针，不会改变资源的引用计数</li></ul><p>weak_ptr来观察shared_ptr，而shared_ptr来观察资源。</p><p>看个资源泄露的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125; <span class="comment">// 构造函数是给成员变量做初始化的</span></span><br><span class="line">    ~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="comment">// 析构函数是在对象内存释放之前，把对象占有的外部资源进行释放</span></span><br><span class="line">    shared_ptr&lt;B&gt; ptr_b; <span class="comment">// 指向B类型对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125; <span class="comment">// 构造函数是给成员变量做初始化的</span></span><br><span class="line">    ~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="comment">// 析构函数是在对象内存释放之前，把对象占有的外部资源进行释放</span></span><br><span class="line">    shared_ptr&lt;A&gt; ptr_a; <span class="comment">// 指向A类型对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;A&gt; <span class="title">pa</span><span class="params">(<span class="keyword">new</span> A())</span></span>; <span class="comment">// A 类型实例化的智能指针pa 来管理A对象</span></span><br><span class="line">    <span class="function">shared_ptr&lt;B&gt; <span class="title">pb</span><span class="params">(<span class="keyword">new</span> B())</span></span>; <span class="comment">// B 类型实例化的智能指针pb 来管理B对象</span></span><br><span class="line"></span><br><span class="line">    pa-&gt;ptr_b = pb;</span><br><span class="line">    pb-&gt;ptr_a = pa;</span><br><span class="line">    cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl; <span class="comment">// 打印它所引用资源的引用计数</span></span><br><span class="line">    cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A()</span><br><span class="line">B()</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>new出来的对象，没有释放，资源泄漏了。</p><p>这个问题又该怎么解决呢？</p><p>方法：<strong>定义对象的时候，用强智能指针;引用对象的地方，使用弱智能指针</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125; <span class="comment">// 构造函数是给成员变量做初始化的</span></span><br><span class="line">    ~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="comment">// 析构函数是在对象内存释放之前，把对象占有的外部资源进行释放</span></span><br><span class="line">    weak_ptr&lt;B&gt; ptr_b; <span class="comment">// 指向B类型对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125; <span class="comment">// 构造函数是给成员变量做初始化的</span></span><br><span class="line">    ~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="comment">// 析构函数是在对象内存释放之前，把对象占有的外部资源进行释放</span></span><br><span class="line">    weak_ptr&lt;A&gt; ptr_a; <span class="comment">// 指向A类型对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;A&gt; <span class="title">pa</span><span class="params">(<span class="keyword">new</span> A())</span></span>; <span class="comment">// A 类型实例化的智能指针pa 来管理A对象</span></span><br><span class="line">    <span class="function">shared_ptr&lt;B&gt; <span class="title">pb</span><span class="params">(<span class="keyword">new</span> B())</span></span>; <span class="comment">// B 类型实例化的智能指针pb 来管理B对象</span></span><br><span class="line"></span><br><span class="line">    pa-&gt;ptr_b = pb;</span><br><span class="line">    pb-&gt;ptr_a = pa;</span><br><span class="line">    cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl; <span class="comment">// 打印它所引用资源的引用计数</span></span><br><span class="line">    cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> penge@penge-<span class="keyword">virtual</span>-machine  ~/Desktop/MordenCpp  ./<span class="function">main                       </span></span><br><span class="line"><span class="function"><span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function">1</span></span><br><span class="line"><span class="function">1</span></span><br><span class="line"><span class="function">~<span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function">~<span class="title">A</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>Note：弱智能指针只会观察资源，不可以去使用和访问资源。弱智能指针 这个类就没有提供 * 运算符重载 和 -&gt; 运算符重载 函数。因此需要将弱智能指针升级成强智能指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;<span class="comment">//构造函数是给成员变量做初始化的</span></span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="comment">//析构函数是在对象内存释放之前，把对象占有的外部资源进行释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun_A</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;类A的成员方法&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="comment">//shared_ptr&lt;B&gt;ptr_b;//指向B类型对象的智能指针</span></span><br><span class="line">weak_ptr&lt;B&gt;ptr_b;<span class="comment">//指向B类型对象的智能指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125;<span class="comment">//构造函数是给成员变量做初始化的</span></span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="comment">//析构函数是在对象内存释放之前，把对象占有的外部资源进行释放</span></span><br><span class="line"><span class="comment">//shared_ptr&lt;A&gt;ptr_a;//指向A类型对象的智能指针</span></span><br><span class="line">weak_ptr&lt;A&gt;ptr_a;<span class="comment">//指向A类型对象的智能指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ptr_a-&gt;fun_A();//不可以进行访问</span></span><br><span class="line">shared_ptr&lt;A&gt; strongPtr = ptr_a.<span class="built_in">lock</span>();</span><br><span class="line"><span class="comment">//把ptr_a提升成一个强智能指针</span></span><br><span class="line"><span class="keyword">if</span> (strongPtr != <span class="literal">nullptr</span>)<span class="comment">//提升成功</span></span><br><span class="line">strongPtr-&gt;<span class="built_in">fun_A</span>();<span class="comment">//这样就可以访问了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">提升成功  strongPtr就是一个强智能指针了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shared_ptr&lt;A&gt;<span class="built_in">pa</span>(<span class="keyword">new</span> <span class="built_in">A</span>());<span class="comment">//A 类型实例化的智能指针pa 来管理A对象</span></span><br><span class="line">shared_ptr&lt;B&gt;<span class="built_in">pb</span>(<span class="keyword">new</span> <span class="built_in">B</span>());<span class="comment">//B 类型实例化的智能指针pb 来管理B对象</span></span><br><span class="line"></span><br><span class="line">pa-&gt;ptr_b = pb;</span><br><span class="line">pb-&gt;ptr_a = pa;</span><br><span class="line"></span><br><span class="line">pb-&gt;<span class="built_in">fun</span>();</span><br><span class="line">cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl;<span class="comment">//打印它所引用资源的引用计数</span></span><br><span class="line">cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程访问共享对象的线程安全问题">多线程访问共享对象的线程安全问题</h3><p>例子1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A\n&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun_A</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;类A的方法\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    weak_ptr&lt;B&gt; ptr_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(weak_ptr&lt;A&gt; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line">    shared_ptr&lt;A&gt; check = q.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (check)</span><br><span class="line">    &#123;</span><br><span class="line">        check-&gt;<span class="built_in">fun_A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;object is delete\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;A&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">        <span class="function">thread <span class="title">t1</span><span class="params">(handler, weak_ptr&lt;A&gt;(p))</span></span>;</span><br><span class="line">        t1.<span class="built_in">detach</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">20</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">penge@penge-<span class="keyword">virtual</span>-machine  ~/Desktop/MordenCpp  ./main                       </span><br><span class="line">A</span><br><span class="line">~A</span><br><span class="line">object is <span class="keyword">delete</span></span><br></pre></td></tr></table></figure><p>将上述代码改成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A\n&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun_A</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;类A的方法\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    weak_ptr&lt;B&gt; ptr_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(weak_ptr&lt;A&gt; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">2</span>));</span><br><span class="line">    shared_ptr&lt;A&gt; check = q.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (check)</span><br><span class="line">    &#123;</span><br><span class="line">        check-&gt;<span class="built_in">fun_A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;object is delete\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;A&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">        <span class="function">thread <span class="title">t1</span><span class="params">(handler, weak_ptr&lt;A&gt;(p))</span></span>;</span><br><span class="line">        t1.<span class="built_in">detach</span>();</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">penge@penge-<span class="keyword">virtual</span>-machine  ~/Desktop/MordenCpp  ./main                       </span><br><span class="line">A</span><br><span class="line">类A的方法</span><br><span class="line">~A</span><br></pre></td></tr></table></figure><p>总结：解决多线程访问共享对象的线程安全问题，强弱智能指针shared_ptr和weak_ptr 可以在线程里面 通过资源计数来检测对象还活着吗</p><h3 id="自定义删除器">自定义删除器</h3><p>C++11智能指针std::shared_ptr和std::unique_ptr都支持自定义删除器，本文将介绍自定义删除器的使用场景和使用方法。智能指针模板参数的第二个类型是删除器，一般是一个函数指针类型或者是一个函数对象类型。通常情况下，删除器的类型是std::default_delete&lt; T &gt;，它是一个函数对象类型，用于调用delete来释放所管理的对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Deleter = std::default_delete&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Deleter = std::default_delete&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> shared_ptr;</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong></p><p>自定义删除器的作用是在智能指针释放所管理的对象时，执行一些特殊的操作，比如：</p><ul><li>内存释放时打印一些日志。</li><li>管理除内存以外的其它资源，例如文件句柄、数据库连接等。</li><li>与自定义分配器（Allocator）配合使用，将资源释放给自定义分配器。</li><li>在C++17之前，std::shared_ptr用于管理数组时需要自定义删除器来释放数组内存，因为默认使用delete来释放所管理的对象，而delete不能正确释放分配的数组，需要在自定义删除器delete[]释放数组。</li></ul><p>这部分可以参考Effective书籍。</p><h2 id="绑定器和function函数对象">绑定器和function函数对象</h2><h3 id="绑定器">绑定器</h3><p><strong>函数对象：</strong> 拥有operator()运算符重载函数的对象，且这个对象的使用 类似于函数调用。</p><p>STL中提供了的绑定器函数bind1st和bind2nd，它们将一个二元函数对象转化为一个一元函数对象。</p><ul><li>bind1st()是绑定第一个参数。</li><li>bind2nd()是绑定第二个参数。</li></ul><p>看个示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123; <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="type">int</span> cx;</span><br><span class="line">    cx = <span class="built_in">count_if</span>(numbers, numbers + <span class="number">6</span>, <span class="built_in">bind2nd</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">40</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;There are &quot;</span> &lt;&lt; cx &lt;&lt; <span class="string">&quot; elements that are less than 40.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cx = <span class="built_in">count_if</span>(numbers, numbers + <span class="number">6</span>, <span class="built_in">bind1st</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">40</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;There are &quot;</span> &lt;&lt; cx &lt;&lt; <span class="string">&quot; elements that are not less than 40.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There are <span class="number">4</span> elements that are less than <span class="number">40.</span></span><br><span class="line">There are <span class="number">1</span> elements that are <span class="keyword">not</span> less than <span class="number">40.</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>bind1st将参数绑定到二元函数对象的第一个参数，例如bind1st(less&lt; int &gt;(), 40)将创建一个新的一元函数对象，这个函数对象将检查给定的参数是否大于40。</li><li>bind2nd将参数绑定到二元函数对象的第二个参数，例如bind2nd(less&lt; int &gt;(), 40)将创建一个新的一元函数对象，这个函数对象将检查给定的参数是否小于40。</li></ul><p>bind2nd(less&lt; int &gt;(), 40)用于计算数组中小于40的元素的数量，而bind1st(less&lt; int &gt;(), 40)用于计算数组中不小于40的元素的数量。因此，bind1st和bind2nd的区别在于它们将参数绑定到二元函数对象的不同位置。</p><p>通过上面的示例我们对于绑定器有了基本的了解。先记个结论：<strong>绑定器+二元函数对象 = 一元函数对象</strong>。</p><p>再来看个示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(T v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// C++11</span></span><br><span class="line">    <span class="comment">// for (auto it : v)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; it &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">typename</span> T::iterator it = v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="comment">// typename T::iterator it = v.begin();</span></span><br><span class="line">    <span class="keyword">for</span> (; it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">40</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="comment">// greater&lt;int&gt;()函数对象  二元函数对象：需要两个元素一一进行比较</span></span><br><span class="line">    <span class="comment">// 一次从容器里面拿出来2个元素</span></span><br><span class="line">    <span class="comment">// 其operator（） 有两个参数 比较的是 &gt;</span></span><br><span class="line">    <span class="comment">// 而库里面 与排序有关的默认 从小到大 &lt; less</span></span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="comment">// 需求1：把14插入容器其中</span></span><br><span class="line">    <span class="comment">// 30 &lt; x</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind1st</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != v.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">insert</span>(it, <span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="comment">// 需求2：把14插入容器其中</span></span><br><span class="line">    <span class="comment">// x &lt; 10</span></span><br><span class="line">    it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != v.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">insert</span>(it, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们学习下这个bind()以及find_if底层的实现。</p><blockquote><p><strong>find_if</strong></p></blockquote><p>find_if的底层实现：第三个参数需要的是一个 一元函数对象。</p><p>思路：遍历 iterator区间的元素，如果满足函数对象的运算 则返回当前iterator 。否则返回end 当然这里需要一个一元的函数对象 其operator（）只需要接收一个参数即可 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> Compare&gt;</span><br><span class="line"><span class="comment">//Compare:函数对象</span></span><br><span class="line"><span class="function">Iterator <span class="title">myfind_if</span><span class="params">(Iterator st, Iterator ed, Compare compare)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; st != ed; st++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">compare</span>(*st))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> st;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>bind1st 和 bind2nd</strong></p></blockquote><p>先来了解下这个函数对象是怎么调用的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span>  a = <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">cout&lt;&lt;<span class="built_in">a</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// greater&lt;int&gt;()(1,3)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道这个，下面就非常容易了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数模板 bind1st的实现</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个参数 是一个二元函数对象</span></span><br><span class="line"><span class="comment">第二个参数 是一个 元素的类型 val(要绑定的值)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Compare, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mybind1stClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mybind1stClass</span>(Compare compare, T val) : <span class="built_in">compare_</span>(compare), <span class="built_in">val_</span>(val) &#123;&#125;</span><br><span class="line">    <span class="comment">// 既然是函数对象 需要有operator（）的实现</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T &amp;val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 底层还是二元函数对象的实现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare_</span>(val_, val); <span class="comment">// 第1个值被绑定了 所以传入第2个值</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Compare compare_;</span><br><span class="line">    T val_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Compare, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">mybind1st</span><span class="params">(Compare compare, T val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// //构造一个 一元函数对象出来</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mybind1stClass</span>&lt;Compare, T&gt;(compare, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bind1st 是一个函数模板，里面封装了一个 一元函数对象的产生。 bind1st 就是函数对象的应用。绑定器+二元函数对象 = 一元函数对象。</p><p>bind2nd也很容易了。</p><p>完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(T v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// C++11</span></span><br><span class="line">    <span class="comment">// for (auto it : v)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; it &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">typename</span> T::iterator it = v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="comment">// typename T::iterator it = v.begin();</span></span><br><span class="line">    <span class="keyword">for</span> (; it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> Compare&gt;</span><br><span class="line"><span class="function">Iterator <span class="title">myfind_if</span><span class="params">(Iterator st, Iterator ed, Compare compare)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; st != ed; st++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">compare</span>(*st))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> st;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Compare, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mybind1stClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mybind1stClass</span>(Compare compare, T val) : <span class="built_in">compare_</span>(compare), <span class="built_in">val_</span>(val) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T &amp;val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare_</span>(val_, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Compare compare_;</span><br><span class="line">    T val_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Compare, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">mybind1st</span><span class="params">(Compare compare, T val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mybind1stClass</span>&lt;Compare, T&gt;(compare, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Compare, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mybind2ndClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mybind2ndClass</span>(Compare compare, T val) : <span class="built_in">compare_</span>(compare), <span class="built_in">val_</span>(val) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T &amp;val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare_</span>(val, val_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Compare compare_;</span><br><span class="line">    T val_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Compare, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">mybind2nd</span><span class="params">(Compare compare, T val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mybind2ndClass</span>&lt;Compare, T&gt;(compare, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">40</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="comment">// greater&lt;int&gt;()函数对象  二元函数对象：需要两个元素一一进行比较</span></span><br><span class="line">    <span class="comment">// 一次从容器里面拿出来2个元素</span></span><br><span class="line">    <span class="comment">// 其operator（） 有两个参数 比较的是 &gt;</span></span><br><span class="line">    <span class="comment">// 而库里面 与排序有关的默认 从小到大 &lt; less</span></span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="comment">// 需求1：把14插入容器其中</span></span><br><span class="line">    <span class="comment">// 30 &lt; x</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">myfind_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">mybind1st</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != v.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">insert</span>(it, <span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="comment">// 需求2：把14插入容器其中</span></span><br><span class="line">    <span class="comment">// x &lt; 10</span></span><br><span class="line">    it = <span class="built_in">myfind_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">mybind2nd</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != v.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">insert</span>(it, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是比较随机的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> penge@penge-<span class="keyword">virtual</span>-machine  ~/Desktop/MordenCpp  g++ main.cpp -o main -pthread</span><br><span class="line"> penge@penge-<span class="keyword">virtual</span>-machine  ~/Desktop/MordenCpp  ./main                       </span><br><span class="line"><span class="number">24</span> <span class="number">7</span> <span class="number">18</span> <span class="number">36</span> <span class="number">34</span> <span class="number">16</span> <span class="number">27</span> <span class="number">13</span> <span class="number">10</span> <span class="number">22</span> <span class="number">3</span> <span class="number">28</span> <span class="number">11</span> <span class="number">20</span> <span class="number">4</span> <span class="number">7</span> <span class="number">21</span> <span class="number">27</span> <span class="number">13</span> <span class="number">17</span> </span><br><span class="line"><span class="number">36</span> <span class="number">34</span> <span class="number">28</span> <span class="number">27</span> <span class="number">27</span> <span class="number">24</span> <span class="number">22</span> <span class="number">21</span> <span class="number">20</span> <span class="number">18</span> <span class="number">17</span> <span class="number">16</span> <span class="number">13</span> <span class="number">13</span> <span class="number">11</span> <span class="number">10</span> <span class="number">7</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span> </span><br><span class="line"><span class="number">30</span> <span class="number">36</span> <span class="number">34</span> <span class="number">28</span> <span class="number">27</span> <span class="number">27</span> <span class="number">24</span> <span class="number">22</span> <span class="number">21</span> <span class="number">20</span> <span class="number">18</span> <span class="number">17</span> <span class="number">16</span> <span class="number">13</span> <span class="number">13</span> <span class="number">11</span> <span class="number">10</span> <span class="number">7</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span> </span><br><span class="line"><span class="number">30</span> <span class="number">36</span> <span class="number">34</span> <span class="number">28</span> <span class="number">27</span> <span class="number">27</span> <span class="number">24</span> <span class="number">22</span> <span class="number">21</span> <span class="number">20</span> <span class="number">18</span> <span class="number">17</span> <span class="number">16</span> <span class="number">13</span> <span class="number">13</span> <span class="number">11</span> <span class="number">10</span> <span class="number">10</span> <span class="number">7</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>现在，bind1st() 和 bind2nd()，在 C++11 里已经 deprecated 了.bind()可以替代他们，且用法更灵活更方便。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123; <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="type">int</span> cx;</span><br><span class="line">    cx = <span class="built_in">count_if</span>(numbers, numbers + <span class="number">6</span>, <span class="built_in">bind</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), std::placeholders::_1, <span class="number">40</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;There are &quot;</span> &lt;&lt; cx &lt;&lt; <span class="string">&quot; elements that are less than 40.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cx = <span class="built_in">count_if</span>(numbers, numbers + <span class="number">6</span>, <span class="built_in">bind</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(), <span class="number">40</span>, std::placeholders::_1));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;There are &quot;</span> &lt;&lt; cx &lt;&lt; <span class="string">&quot; elements that are not less than 40.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="function函数对象">function函数对象</h3><p>C++中的std::function是一个强大而灵活的工具，它允许我们将可调用对象（函数、函数指针、Lambda表达式等）包装成一个对象，使得我们可以像操作其他对象一样操作和传递可调用对象。</p><p><strong>基本概念</strong></p><p>std::function是C++11引入的标准库组件，位于&lt; functional &gt;头文件中。它的主要作用是将可调用对象封装为一个函数对象，提供一种统一的方式来处理各种类型的可调用对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::function&lt;返回类型(参数类型1, 参数类型2, ...)&gt; func;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><p>1.封装函数指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; func = greet;</span><br><span class="line">    <span class="built_in">func</span>();  <span class="comment">// 调用封装的函数指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.封装Lambda表达式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; func = []() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Lambda says hi!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">func</span>();  <span class="comment">// 调用封装的Lambda表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.封装可调用对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Class Greeter says hello!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; func = <span class="built_in">Greeter</span>();</span><br><span class="line">    <span class="built_in">func</span>();  <span class="comment">// 调用封装的可调用对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.与bind结合使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> printHello = std::<span class="built_in">bind</span>(func,<span class="string">&quot;Hello&quot;</span>,std::placeholders::_1);</span><br><span class="line">function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; tmp=printHello;</span><br><span class="line"><span class="built_in">tmp</span>(<span class="number">666</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK,介绍完应用，我们来看看具体的原理</p><p>如果我们想使用function封装下面的函数，如果实现呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span>(string str)</span><br></pre></td></tr></table></figure><p>使用模板和函数对象的知识实现代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> <span class="comment">//C++库的函数对象</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>  <span class="comment">//C++库的泛型算法</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">//这两行相当于 提供模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFunction</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> A&gt;<span class="comment">// 返回值、形参类型 属于部分特例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFunction</span>&lt;<span class="built_in">R</span>(A)&gt; <span class="comment">// //因为这是一个函数类型（1返回值 1参数）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> pFun = <span class="built_in">R</span> (*)(A);<span class="comment">// 定义这个函数指针类型</span></span><br><span class="line">    <span class="built_in">MyFunction</span>(pFun pFun) &#123; pFun_ = pFun; &#125;</span><br><span class="line">    <span class="comment">/* operator（）重载函数</span></span><br><span class="line"><span class="comment">        封装的这个函数需要什么参数，</span></span><br><span class="line"><span class="comment">        operator（）就需要什么函数</span></span><br><span class="line"><span class="comment">        需要接收1个参数 类型为A </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pFun_</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pFun pFun_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MyFunction&lt;<span class="title">void</span><span class="params">(string)</span>&gt; <span class="title">f</span><span class="params">(show)</span></span>;</span><br><span class="line">    <span class="comment">// MyFunction&lt;void(string)&gt; f=show;</span></span><br><span class="line">    <span class="built_in">f</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的参数不确定呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span>(string str)</span><br><span class="line"><span class="built_in">void</span>(string str,<span class="type">int</span> a)</span><br><span class="line"><span class="built_in">void</span>(string str,<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>由C++11里面的 可变参（形参个数不定）的类型参数 完美解决</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> <span class="comment">//C++库的函数对象</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>  <span class="comment">//C++库的泛型算法</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFunction</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... A&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFunction</span>&lt;<span class="built_in">R</span>(A...)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> pFun = <span class="built_in">R</span> (*)(A...);</span><br><span class="line">    <span class="built_in">MyFunction</span>(pFun pFun) &#123; pFun_ = pFun; &#125;</span><br><span class="line">    <span class="function">R <span class="title">operator</span><span class="params">()</span><span class="params">(A... val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pFun_</span>(val...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pFun pFun_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(string a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MyFunction&lt;<span class="title">void</span><span class="params">(string, <span class="type">int</span>)</span>&gt; <span class="title">f</span><span class="params">(show)</span></span>;</span><br><span class="line">    <span class="built_in">f</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">111</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda表达式">lambda表达式</h3><p>lambda ：函数对象的升级版，原理就是更高级的函数对象的实现。</p><p>函数对象的缺点：虽然在使用中不会单独使用函数对象，而且也都是使用在 泛型算法的参数传递 或者 带有比较 或者优先级队列等自定义类型的元素比较方式 或者 智能指针的删除器 之中（就可以传递一个函数对象进去）。但是 但是 但是 函数对象 是需要自己先去定义一个函数对象类型 出来啊！！！！ 而且这个类型定义出来以后，这个类型定义的对象只是使用在 （例如：优先级队列的定义处），之后这个函数对象类型 可能再也不用了。</p><p>老样子，看个例子先</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> myfun1 = []()-&gt;<span class="type">void</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lambda: I Love Libaibai&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">myfun1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> myfun2 = [](<span class="type">int</span> a, <span class="type">int</span> b)-&gt;<span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">myfun2</span>(<span class="number">20</span>, <span class="number">30</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">auto</span> myfun3 = [&amp;a,&amp;b]()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">myfun3</span>();</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现代C++11对此有比较深入的介绍。</p><p>再来看个常见的例子，也就是优先队列对自定义对象排序。</p><p>优先队列中使用lambda表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">int</span> ma = <span class="number">10</span>, <span class="type">int</span> mb = <span class="number">10</span>) : _ma(ma), _mb(mb) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> _ma;</span><br><span class="line">    <span class="type">int</span> _mb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;Test, vector&lt;Test&gt;, function&lt;<span class="type">bool</span>(Test &amp;, Test &amp;)&gt;&gt;</span><br><span class="line">    <span class="built_in">myqueue</span>([](Test &amp;t1, Test &amp;t2) -&gt; <span class="type">bool</span></span><br><span class="line">            &#123; <span class="keyword">return</span> t1._ma &gt; t2._ma; &#125;);</span><br><span class="line">    myqueue.<span class="built_in">push</span>(<span class="built_in">Test</span>(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    myqueue.<span class="built_in">push</span>(<span class="built_in">Test</span>(<span class="number">15</span>, <span class="number">15</span>));</span><br><span class="line">    myqueue.<span class="built_in">push</span>(<span class="built_in">Test</span>(<span class="number">20</span>, <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">auto</span> cur = myqueue.<span class="built_in">top</span>();</span><br><span class="line">    myqueue.<span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; cur._ma;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    auto func = [](Test &amp;t1, Test &amp;t2) -&gt; bool</span></span><br><span class="line"><span class="comment">    &#123; return t1._ma &gt; t2._ma; &#125;;</span></span><br><span class="line"><span class="comment">    priority_queue&lt;Test, vector&lt;Test&gt;, function&lt;bool(Test &amp;, Test &amp;)&gt;&gt; myqueue(func);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：</p><ul><li><a href="https://suqingyu.com/2023/09/17/C++%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89%E7%AC%94%E8%AE%B0%E4%B8%8E%E6%80%BB%E7%BB%93/#%E5%89%8D%E8%A8%80">C++（基础）笔记与总结|</a></li></ul>]]></content>
    
    
    <summary type="html">C++11基础知识笔记</summary>
    
    
    
    <category term="Cpp" scheme="https://penge666.github.io/categories/Cpp/"/>
    
    
    <category term="Cpp" scheme="https://penge666.github.io/tags/Cpp/"/>
    
  </entry>
  
</feed>
